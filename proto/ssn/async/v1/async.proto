syntax = "proto3";

package ssn.async.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "ssn/annotator/v1/annotator.proto";
import "ssn/type/candidate.proto";
import "validate/validate.proto";
import "ssn/type/text_annotation.proto";

option go_package = "github.com/e-conomic/vmlapis/gen/go/ssn/async/v1;transaction";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Async API"
    version: "v1"
    description: ""
  }
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
};

// api.{{env}}.ssn.visma.ai
// transaction = example (receipt, document, scanned invoice text, etc.)
service TransactionService {
  /// --- MVP for async purchase lines ---
  rpc CreateTransaction(CreateTransactionRequest) returns (CreateTransactionResponse) {
    option (google.api.http) = {
      post: "/v1/transactions"
      body: "*"
    };
  }
  rpc GetTransactionResults(GetTransactionResultsRequest) returns (GetTransactionResultsResponse) {
    option (google.api.http) = {get: "/v1/transactions/{id}/results"};
  }
  rpc GetTransactionStatus(GetTransactionStatusRequest) returns (GetTransactionStatusResponse) {
    option (google.api.http) = {get: "/v1/transactions/{id}/status"};
  }
  rpc DeleteTransaction(DeleteTransactionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/transactions/{id}"};
  }
  rpc DeleteTag(DeleteTagRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/tags/{tag_name}"};
  }
  /// --- MVP for async purchase lines ---

  // below are more ideas how the API could progress
  // ---------------------
  // e.g. add more features for processing
  // rpc UpdateFeatures(UpdateFeaturesRequest) returns (UpdateFeaturesResponse) {
  //   option (google.api.http) = {put: "/v1/transactions/{id}/features"};
  // }
  // essentially a feedback endpoint
  // rpc UpdateTransactionResults(UpdateTransactionResultsRequest) returns (UpdateTransactionResultsResponse) {
  //   option (google.api.http) = {put: "/v1/transactions/{id}/results"};
  // }
  // streaming status back
  // rpc WatchTransactionStatus(WatchTransactionStatusRequest) returns (stream WatchTransactionStatusResponse) {
  //   option (google.api.http) = {get: "/v1/transactions/{id}/status:watch"};
  // }
  // delete on tags
}

// --- post: "/v1/transactions" ---
message CreateTransactionRequest {
  // we could have an ID here, in case they wanted to provide their own
  ssn.annotator.v1.Document document = 1;
  // Let's enforce the tags
  repeated string tags = 2;
  // e.g. "TOTAL_INCL_VAT", "PURCHASE_LINES"
  repeated string features = 3;
  string custom_id = 4;
}
message CreateTransactionResponse {
  string id = 1;
  string custom_id = 2;
  // CreateTransactionResponse message can potentially contain results from synchronous features (e.g. current SSN prediciton)
  // but I think I'm more prone to separate them in /results endpoint
}
// --- post: "/v1/transactions" ---

// --- get: "/v1/transactions/{id}/results" ---
message GetTransactionResultsRequest {
  string id = 1;
  string custom_id = 2;
  // GetTransactionResultsRequest message can potentially have a list of features to filter the response
  // e.g. repeated string features like in CreateTransactionRequest
}
message GetTransactionResultsResponse {
  string id = 1;
  // map: FEATURE NAME --> SSN CANDIDATES
  // empty when processing is still running
  repeated Annotation annotations = 2;
  string error_message = 3;
  string custom_id = 4;
}

// Wrappers for repeated Candidate
message Candidate {
  repeated ssn.type.Candidate candidate = 1;
}

// Wrappers for repeated PurchaseLineCandidate
message PurchaseLineCandidate {
  repeated ssn.type.PurchaseLineCandidate purchase_line_candidate = 1;
}

message LineCandidate {
  repeated ssn.type.LineCandidate line_candidates = 1;
}

message AnswerCandidate {
  repeated ssn.type.AnswerCandidate answers = 1;
}

message Annotation {
  string feature = 1; // feature name e.g. "TOTAL_INCL_VAT"
  oneof candidates {
    Candidate candidate = 2; // candidate contains a page number
    PurchaseLineCandidate purchase_line_candidate = 3;
    AnswerCandidate answer_candidates = 4;
    LineCandidate line_candidates = 5;
    ssn.type.PageText page_text = 6;
    string value = 7;
    ssn.type.TextAnnotation text_annotation = 8;
  }
}
// --- get: "/v1/transactions/{id}/results" ---

// --- get: "/v1/transactions/{id}/status" ---
message GetTransactionStatusRequest {
  string id = 1;
  string custom_id = 2;
}

message GetTransactionStatusResponse {
  string id = 1;
  // e.g. "RUNNING", "SUCCESSFUL", "PARTIAL", "FAILED"
  // "PARTIAL" is when some features failed - e.g. SSN succeeded but purchase lines failed
  string status = 2;
  // Only populated when status == "FAILED" or status == "PARTIAL"
  string error_message = 3;
  // maybe a timestamp on different status would be nice here
  string custom_id = 4;
}
// --- get: "/v1/transactions/{id}/status" ---

// --- delete: "/v1/transactions/{id}" ---
message DeleteTransactionRequest {
  string id = 1;
  string custom_id = 2;
}
// --- delete: "/v1/transactions/{id}" ---

// --- delete: "/v1/tags/{tag_name}" ---
message DeleteTagRequest {
  string tag_name = 1 [(validate.rules).string = {
    pattern: "^[A-Za-z0-9.][A-Za-z0-9_.>-]*$"
    max_bytes: 256
  }]; // text-no-spaces
}
// --- delete: "/v1/tags/{tag_name}" ---
