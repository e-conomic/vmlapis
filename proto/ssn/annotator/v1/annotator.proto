syntax = "proto3";

package ssn.annotator.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "ssn/type/candidate.proto";
import "ssn/type/text_annotation.proto";
import "ssn/type/tier.proto";

option go_package = "github.com/e-conomic/vmlapis/gen/go/ssn/annotator/v1;annotator";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "SmartScan";
    version: "v1";
    description: "";
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

service DocumentAnnotator {
  rpc AnnotateDocument(DocumentAnnotatorRequest) returns (DocumentAnnotatorResponse) {
    option (google.api.http) = {
      post: "/v1/document:annotate"
      body: "*"
    };
  }
  rpc AnswerDocumentQuestion(DocumentQuestionRequest) returns (DocumentQuestionResponse) {
    option (google.api.http) = {
      post: "/v1/document:answerquestion"
      body: "*"
    };
  }
}

message Feature {
  enum Type {
    // Run default feature set
    DEFAULT = 0;
    // Return text annotation
    TEXT_ANNOTATION = 1;
    // Run order date detection
    ORDER_DATE = 2;
    // Run due date detection
    PAYMENT_DUE_DATE = 3;
    // Run currency detection
    CURRENCY = 4;
    // Run total vat detection
    TOTAL_VAT = 5;
    // Run total incl vat detection
    TOTAL_INCL_VAT = 6;
    // Run total excl vat detection
    TOTAL_EXCL_VAT = 7;
    // [DEPRECATED] Run supplier corporate id detection.
    // Use SUPPLIER_ORGANISATION_NUMBER or SUPPLIER_VAT_NUMBER instead.
    SUPPLIER_CORPORATE_ID = 8;
    // Run country code detection
    SUPPLIER_COUNTRY_CODE = 9;
    // Run document type detection
    DOCUMENT_TYPE = 10;
    // Run pyment method detection
    PAYMENT_METHOD = 11;
    // Run credit card number detection
    CREDIT_CARD_LAST_FOUR = 12;
    // [DEPRECATED] Run invoice number detection
    INVOICE_NUMBER = 13;
    // Run danish ocr line detection, for the type
    OCR_LINE_DK_TYPE = 14;
    // Run danish ocr line detection, for the payment id
    OCR_LINE_DK_PAYMENT_ID = 15;
    // Run danish ocr line detection, for the creditor id
    OCR_LINE_DK_CREDITOR_ID = 16;
    // Run swedish ocr line detection for the payment id
    OCR_LINE_SE_PAYMENT_ID = 17;
    // Run swedish ocr line detection for the bankgiro creditor id
    OCR_LINE_SE_BANKGIRO_CREDITOR_ID = 18;
    // Run swedish ocr line detection for the plusgiro creditor id
    OCR_LINE_SE_PLUSGIRO_CREDITOR_ID = 19;
    // Run norwegian ocr line detection or the payment id
    OCR_LINE_NO_PAYMENT_ID = 20;
    // Run finish ocr line detection or the payment id
    OCR_LINE_FI_PAYMENT_ID = 21;
    // Run dutch ocr line detection for the payment id
    OCR_LINE_NL_PAYMENT_ID = 22;
    // Run belgian ocr line detection for the payment id
    OCR_LINE_BE_PAYMENT_ID = 39;
    // Return document text
    TEXT = 23;
    // Run IBAN detection
    IBAN = 24;
    // Run LINES detection
    LINES = 25;
    // Run first page of PDF to PNG conversion
    PREVIEW = 26;
    // Run bank account number detection
    BANK_ACCOUNT_NUMBER = 27;
    // Run bank registration number detection
    BANK_REGISTRATION_NUMBER = 28;
    // Run business identifier code detection
    BIC = 29;
    // Run document number detection
    DOCUMENT_NUMBER = 30;
    // Run document date detection
    DOCUMENT_DATE = 31;
    // Run order number detection
    ORDER_NUMBER = 32;
    // Run supplier name detection
    SUPPLIER_NAME = 33;
    // [EXPERIMENTAL] Run supplier VAT detection
    SUPPLIER_VAT_NUMBER = 34;
    // [EXPERIMENTAL] Run supplier organisation number detection
    SUPPLIER_ORGANISATION_NUMBER = 35;
    // [EXPERIMENTAL] Run supplier address detection
    SUPPLIER_ADDRESS = 36;
    // [EXPERIMENTAL] Run customer identifier detection
    CUSTOMER_NUMBER = 37;
    // Receiver order number
    RECEIVER_ORDER_NUMBER = 38;
    // Receiver address
    RECEIVER_ADDRESS = 40;
    // Receiver country code
    RECEIVER_COUNTRY_CODE = 41;
    // Receiver name
    RECEIVER_NAME = 42;
    // Receiver VAT number
    RECEIVER_VAT_NUMBER = 43;
    // Purchase Lines
    PURCHASE_LINES = 44;
  }
  // The feature type.
  Type type = 1;
  // Maximum number of results of this type. Does not apply to
  // `TEXT_ANNOTATION` or `DOCUMENT_TYPE`.
  int32 max_results = 2;
  // The minimum confidence for predictions that the caller wants returned
  ssn.type.Confidence.Level min_confidence = 3;
}

message DocumentAnnotatorRequest {
  Document document = 1;
  repeated Feature features = 2;
  repeated string tags = 3;
  ssn.type.Tier tier = 4;
  repeated string segments = 5;
  repeated string questions = 6;
}

message DocumentAnnotatorResponse {
  // orderDate
  // ISO 8601 date string, ie. a string of the format "YYYY-MM-DD"
  // Example: "2019-12-31"
  repeated ssn.type.Candidate order_date = 1;
  // paymentDueDate
  // ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
  // Example: "2019-12-31"
  repeated ssn.type.Candidate payment_due_date = 2;
  // currency
  // ISO 4217 string, ie. a 3-letter capitalized string
  // Example: "NOK"
  repeated ssn.type.Candidate currency = 3;
  // totalVat
  // A string that parses as a two-decimal number
  // Example: "10.0" or "11.11"
  repeated ssn.type.Candidate total_vat = 4;
  // totalInclVat
  // A string that parses as a two-decimal number
  // Example: "10.0" or "11.11"
  repeated ssn.type.Candidate total_incl_vat = 5;
  // totalExclVat
  // A string that parses as a two-decimal number
  // Example: "10.0" or "11.11"
  repeated ssn.type.Candidate total_excl_vat = 6;
  // [DEPRECATED]
  // Use SUPPLIER_ORGANISATION_NUMBER or SUPPLIER_VAT_NUMBER instead.
  // supplierCorporateId
  // The company VAT number
  // Example: "123456789B01" (for Dutch companies)
  // or "12345678" (for Norwegian companies)
  // Note: The field is repeated because multiple VAT numbers might exist.
  // If you have the VAT number of you customer, you can use this information
  // to find out which VAT number belongs to the supplier of the invoice.
  repeated ssn.type.Candidate supplier_corporate_id = 7;
  // supplierCountryCode
  // ISO 3166-1 alpha-2 string, ei. a two-letter capitalized string
  // Example: "NO"
  repeated ssn.type.Candidate supplier_country_code = 8;
  // documentType
  // Either "Receipt" or "Invoice"
  repeated ssn.type.Candidate document_type = 9;
  // paymentMethod
  // Either "Cash" or "CreditCard"
  repeated ssn.type.Candidate payment_method = 10;
  // creditCardNumber
  // Four digits
  // Example: "0012"
  repeated ssn.type.Candidate credit_card_last_four = 11;
  // [DEPRECATED]
  // use document number instead
  // invoiceNumber
  // The supplier defined identifier af the invoice
  // Example: "12345-A99"
  repeated ssn.type.Candidate invoice_number = 12;
  // Return text annotation
  ssn.type.TextAnnotation text_annotation = 13;
  // example: "71"
  repeated ssn.type.Candidate ocr_line_dk_type = 14;
  // example: "000002879094031"
  repeated ssn.type.Candidate ocr_line_dk_payment_id = 15;
  //example: "86570807"
  repeated ssn.type.Candidate ocr_line_dk_creditor_id = 16;
  // example: "050765098"
  repeated ssn.type.Candidate ocr_line_se_payment_id = 17;
  // example: "2654507"
  repeated ssn.type.Candidate ocr_line_se_bankgiro_creditor_id = 18;
  // example: "5000872"
  repeated ssn.type.Candidate ocr_line_se_plusgiro_creditor_id = 19;
  // example: "12345678903"
  repeated ssn.type.Candidate ocr_line_no_payment_id = 20;
  // example: "0817937867870002"
  repeated ssn.type.Candidate ocr_line_fi_payment_id = 21;
  // example: "00000159220010146012"
  repeated ssn.type.Candidate ocr_line_nl_payment_id = 22;
  //
  repeated ssn.type.Candidate ocr_line_be_payment_id = 40;
  // Return a string containing the text from the document
  string text = 23;
  // Feedback ID is used to correct made predictions through the
  // Feedback API.
  string feedback_id = 24;
  // The first two letters are a country code. The next two digits are
  // check digits for the ISO 7064 Mod 97, 10 checksum
  // example: "DK50 0040 0440 1162 43", "NO8330001234567"
  repeated ssn.type.Candidate iban = 25;
  // Invoice lines represented in a form of text, amount and page reference
  // to state on which page the line was found
  repeated ssn.type.LineCandidate lines = 26;
  // Base64 encoded PNG image  of the first page of PDF document sent in request
  string preview = 27;
  // Country specific bank account number
  repeated ssn.type.Candidate bank_account_number = 28;
  // Country specific bank registration number
  repeated ssn.type.Candidate bank_registration_number = 29;
  // Returns business identifier code
  repeated ssn.type.Candidate bic = 30;
  // Represents identifier of the document
  repeated ssn.type.Candidate document_number = 31;
  // Returns document date
  repeated ssn.type.Candidate document_date = 32;
  // Represents the identifier that supplier assigned to the order
  repeated ssn.type.Candidate order_number = 33;
  // Returns supplier name
  repeated ssn.type.Candidate supplier_name = 34;
  // [EXPERIMENTAL]
  // Returns supplier VAT number
  repeated ssn.type.Candidate supplier_vat_number = 35;
  // [EXPERIMENTAL]
  // Returns the business ID or organisation number of the supplier
  repeated ssn.type.Candidate supplier_organisation_number = 36;
  // [EXPERIMENTAL]
  // Returns supplier address
  repeated ssn.type.Candidate supplier_address = 37;
  // [EXPERIMENTAL]
  // Returns customer identifier/number
  repeated ssn.type.Candidate customer_number = 38;
  // Equivalent of order number for receiver
  repeated ssn.type.Candidate receiver_order_number = 39;
  // Equivalent of address for receiver
  repeated ssn.type.Candidate receiver_address = 41;
  // Equivalent of country code for receiver
  repeated ssn.type.Candidate receiver_country_code = 42;
  // Equivalent of supplier name for receiver
  repeated ssn.type.Candidate receiver_name = 43;
  // Equivalent of VAT number for receiver
  repeated ssn.type.Candidate receiver_vat_number = 44;
  // Purchase lines for the document. This is a list of candidates, where each
  // candidate is a single purchase lines. Each purchase line may have page number,
  // code, description, quantity, item number, unit, total discount, percentage discount,
  // total incl vat, total excl vat, total vat, percentage vat, unit price incl vat,
  // unit price excl vat
  repeated ssn.type.PurchaseLineCandidate purchase_lines = 45;
  // Answer Candidates for the questions asked in th request about the document
  // Each Answer is question and answer pair with page number and confidence
  repeated ssn.type.AnswerCandidate answers = 46;
  // The page texts of the document
  repeated ssn.type.PageText page_texts = 47;
}

message Document {
  // Document content, represented as a stream of bytes.
  // Note: As with all `bytes` fields, protobuffers use a pure binary
  // representation, whereas JSON representations use base64.
  bytes content = 1;
  // Google Cloud Storage image location, or publicly-accessible image
  // URL. If both `content` and `source` are provided for a document, `content`
  // takes precedence and is used to perform the scan request.
  DocumentSource source = 2;
}

message DocumentSource {
  // The URI of the source document. Can be either:
  //
  // 1. A publicly-accessible image HTTP/HTTPS URL. When fetching images from
  //    HTTP/HTTPS URLs, We cannot guarantee that the request will be
  //    completed. Your request may fail if the specified host denies the
  //    request (e.g. due to request throttling or DOS prevention).
  //
  string http_uri = 1;
}

message DocumentQuestionRequest {
  Document document = 1;
  repeated string questions = 2;
}

message DocumentQuestionResponse {
  reserved 1;
  repeated ssn.type.AnswerCandidate answers = 2;
}
