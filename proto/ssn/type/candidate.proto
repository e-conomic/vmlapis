syntax = "proto3";

package ssn.type;

import "google/protobuf/wrappers.proto";
import "ssn/type/geometry.proto";

option go_package = "github.com/e-conomic/vmlapis/gen/go/ssn/type;ssntype";

message Confidence {
  enum Level {
    UNKNOWN = 0;
    VERY_LOW = 1;
    LOW = 2;
    MID = 3;
    HIGH = 4;
    VERY_HIGH = 5;
  }
  // A bucketized representation of confidence, which is intended to give clients
  // highly stable results across model upgrades.
  Level level = 1;
  // The confidence value
  google.protobuf.FloatValue value = 2;
}

message Candidate {
  enum Type {
    UNKNOWN = 0;
    FIELD = 1;
    DOCUMENT = 2;
  }
  // Normalized value 01-01-2019
  string value = 1;
  // The text as found on the document "1. Jan"
  // useful for overlays
  string text = 2;
  // Confidence
  Confidence confidence = 3;
  // The bounding box for the block.
  // The vertices are in the order of top-left, top-right, bottom-right,
  // bottom-left. When a rotation of the bounding box is detected the rotation
  // is represented as around the top-left corner as defined when the text is
  // read in the 'natural' orientation.
  // For example:
  //
  // * when the text is horizontal it might look like:
  //
  //         0----1
  //         |    |
  //         3----2
  //
  // * when it's rotated 180 degrees around the top-left corner it becomes:
  //
  //         2----3
  //         |    |
  //         1----0
  //
  //   and the vertex order will still be (0, 1, 2, 3).
  ssn.type.BoundingPoly bounding_box = 4;
  // Indicate the type of the candidate
  Type type = 5;
  // A reference to the page where the candidate was found.
  // page_ref start from 1.
  uint32 page_ref = 6;
  // Model spec of the TensorFlow Serving model that predicted this candidate
  ModelSpec model_metadata = 7;
}

message ModelSpec {
  // The name of the TensorFlow Serving model
  string model_name = 1;
  // The version number of the TensorFlow Serving model
  google.protobuf.Int64Value model_ver = 2;
}

message LineCandidate {
  // Text of the line without the amount
  // Example: "3 Dark and Stormy"
  string text = 1;
  // Normalized amount (price) of the line
  // Example: 300.0
  double amount = 2;
  // A reference to the page where the line was found.
  // page_ref start from 1.
  uint32 page_ref = 6;
}

message PurchaseLineCandidate {
  reserved 15, 16;
  // A reference to the page where the line was found.
  // page_ref start from 1.
  uint32 page_ref = 1;
  // Code is an ID that supplier uses to identify the item
  string code = 2;
  // Description is a piece of text that describes the item
  string description = 3;
  // Quantity is the number of items
  string quantity = 4;
  // ItemNumber is the number of the item
  string item_number = 5;
  // Unit is the unit of the item
  string unit = 6;
  // Total discount is the total discount of the line
  string total_discount = 7;
  // Percentage discount is the percentage discount of the line
  string percentage_discount = 8;
  // Total incl vat is the total price of the line including vat
  string total_incl_vat = 9;
  // Total excl vat is the total price of the line excluding vat
  string total_excl_vat = 10;
  // Total vat is the total vat of the line
  string total_vat = 11;
  // Percentage vat is the percentage vat of the line
  string percentage_vat = 12;
  // Unit price incl vat is the unit price of the line including vat
  string unit_price_incl_vat = 13;
  // Unit price excl vat is the unit price of the line excluding vat
  string unit_price_excl_vat = 14;
  // Total is the total price of the line (with/without vat)
  string total = 17;
  // Unit price is the unit price of the line (with/without vat)
  string unit_price = 18;
}
message AnswerCandidate {
  // A reference to the page where the candidate was found.
  uint32 page_ref = 1;
  // Question asked in the request
  string question = 2;
  // Model prediction for the question
  string answer = 3;
  // Confidence of the prediction
  Confidence confidence = 4;
  // Model metadata
  ModelSpec model_metadata = 5;
}

message PageText {
  // A reference to the page where the text was found.
  uint32 page_ref = 1;
  // The text content of the page
  string text = 2;
}
