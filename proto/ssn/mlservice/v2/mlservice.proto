syntax = "proto3";

package ssn.mlservice.v2;

option go_package = "github.com/e-conomic/vmlapis/gen/go/ssn/mlservice/v2;mlservice";

import "google/type/date.proto";
import "ssn/type/candidate.proto";
import "ssn/type/text_annotation.proto";
import "tensorflow/core/example/example.proto";

// Feature Generation Service
service MlService {
  rpc FeatureGen(FeatureGenRequest) returns (FeatureGenResponse);
  rpc Predict(PredictRequest) returns (PredictResponse);
  // Convinienve method
  rpc FeatureGenPredict(FeatureGenPredictRequest) returns (PredictResponse);
}

message FeatureGenRequest {
  message TruthLabels {
    double total_incl_vat = 1;
    double total_vat = 2;
    double total_excl_vat = 3;
    google.type.Date order_date = 4;
    google.type.Date payment_due_date = 5;
    string document_type = 6;
    string currency = 7;
    string credit_card_number = 8;
    string payment_method = 9;
    string ocr_line_dk_type = 10;
    string ocr_line_dk_payment_id = 11;
    string ocr_line_dk_creditor_id = 12;
    string ocr_line_se_payment_id = 13;
    string ocr_line_se_bankgiro_creditor_id = 14;
    string ocr_line_se_plusgiro_creditor_id = 15;
    string ocr_line_no_payment_id = 16;
    string ocr_line_fi_payment_id = 17;
    string ocr_line_nl_payment_id = 18;
    string supplier_corporate_id = 19;
    string supplier_country_code = 20;
    string invoice_number = 21;
  }
  TruthLabels truth_labels = 1;
  ssn.type.TextAnnotation text_annotation = 2;
  string id = 3;
}

message FeatureGenResponse {
  tensorflow.Example example = 1;
}

message PredictRequest {
  tensorflow.Example example = 1;
  uint32 top_n_most_confident = 2;
}

// maps to FieldsPrediction
message PredictResponse {
  repeated ssn.type.Candidate order_date = 1;
  repeated ssn.type.Candidate payment_due_date = 2;
  repeated ssn.type.Candidate currency = 3;
  repeated ssn.type.Candidate total_vat = 4;
  repeated ssn.type.Candidate total_incl_vat = 5;
  repeated ssn.type.Candidate total_excl_vat = 6;
  repeated ssn.type.Candidate supplier_corporate_id = 7;
  repeated ssn.type.Candidate supplier_country_code = 8;
  repeated ssn.type.Candidate document_type = 9;
  repeated ssn.type.Candidate payment_method = 10;
  repeated ssn.type.Candidate credit_card_number = 11;
  repeated ssn.type.Candidate invoice_number = 12;
  repeated ssn.type.Candidate ocr_line_dk_type = 13;
  repeated ssn.type.Candidate ocr_line_dk_payment_id = 14;
  repeated ssn.type.Candidate ocr_line_dk_creditor_id = 15;
  repeated ssn.type.Candidate ocr_line_se_payment_id = 16;
  repeated ssn.type.Candidate ocr_line_se_bankgiro_creditor_id = 17;
  repeated ssn.type.Candidate ocr_line_se_plusgiro_creditor_id = 18;
  repeated ssn.type.Candidate ocr_line_no_payment_id = 19;
  repeated ssn.type.Candidate ocr_line_fi_payment_id = 20;
  repeated ssn.type.Candidate ocr_line_nl_payment_id = 21;
  repeated ssn.type.Candidate iban = 22;
  repeated ssn.type.LineCandidate lines = 23;
}

message FeatureGenPredictRequest {
  FeatureGenRequest feature_gen_request = 1;
  PredictRequest predict_request = 2;
}
