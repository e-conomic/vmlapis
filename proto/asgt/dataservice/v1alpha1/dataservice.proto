syntax = "proto3";

package asgt.dataservice.v1alpha1;

option go_package = "dataservice";

import "gen_bq_schema/bq_field.proto";
import "gen_bq_schema/bq_table.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "asgt/jester/v1alpha1/jester.proto";

service DataService {
  rpc PrepareScannedInvoiceFeedback(PrepareScannedInvoiceFeedbackRequest) returns (google.protobuf.Empty);
  rpc ScannedInvoiceAddData(AddDataRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1alpha1/data:scannedinvoice"
      body: "*"
    };
  }
  rpc PrepareElectronicInvoicLineFeedback(PrepareScannedInvoiceFeedbackRequest) returns (google.protobuf.Empty);
  rpc ElectronicInvoicLineAddData(AddDataRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1alpha1/data:electronicinvoiceline"
      body: "*"
    };
  }
  rpc PrepareBankFeedback(PrepareScannedInvoiceFeedbackRequest) returns (google.protobuf.Empty);
  rpc BankAddData(AddDataRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1alpha1/data:bank"
      body: "*"
    };
  }
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1alpha1/data:delete"
      body: "*"
    };
  }
}

// Common Data types
message DataTuple {
  string target = 1;
  string value = 2;
}

message PredictedTuple {
  string target = 1;
  repeated string predictions = 2;
}

message AddDataRequest {
  message RetentionPolicy {
    oneof policy {
      int32 max_days = 1;
      int32 max_records = 2;
    }
  }
  string id = 1;
  string dataset = 2;
  repeated string tags = 3;
  repeated DataTuple true_values = 4;
  RetentionPolicy retention_policy = 5;
}

message DeleteRequest {
  string model_type = 1;
  string dataset = 2;
  repeated string tags = 3;
}

// Scanned Invoice
message ScannedInvoiceEntry {
  option (gen_bq_schema.bigquery_opts).table_name = "scanned_invoice_data";
  string id = 1 [
    (gen_bq_schema.bigquery).description = "Feedback ID, same as Envoy request id",
    (gen_bq_schema.bigquery).require = true
  ];
  string consumer = 2 [(gen_bq_schema.bigquery).require = true];
  string dataset = 3 [(gen_bq_schema.bigquery).require = true];
  repeated string tags = 4 [(gen_bq_schema.bigquery).description = "Tags defined by consumer, enriched by service if valetkey is used"];
  asgt.jester.v1alpha1.ScannedInvoiceRequest.Data input = 5;
  repeated DataTuple true_values = 6;
  repeated PredictedTuple pred_values = 7;
  uint64 feedback_time = 8 [
    (gen_bq_schema.bigquery) = {
      require: true,
      type_override: 'TIMESTAMP'
    }
  ];
}

message PrepareScannedInvoiceFeedbackRequest {
  string id = 1;
  string dataset = 2;
  asgt.jester.v1alpha1.ScannedInvoiceRequest.Data input = 3;
  repeated asgt.jester.v1alpha1.Prediction predictions = 4;
  repeated string tags = 5;
}

// Electronic Invoice Line
message ElectronicInvoiceLineEntry {
  option (gen_bq_schema.bigquery_opts).table_name = "electronic_invoice_line_data";
  string id = 1 [
    (gen_bq_schema.bigquery).description = "Feedback ID, same as Envoy request id",
    (gen_bq_schema.bigquery).require = true
  ];
  string consumer = 2 [(gen_bq_schema.bigquery).require = true];
  string dataset = 3 [(gen_bq_schema.bigquery).require = true];
  repeated string tags = 4 [(gen_bq_schema.bigquery).description = "Tags defined by consumer, enriched by service if valetkey is used"];
  asgt.jester.v1alpha1.ElectronicInvoiceLineRequest.Data input = 5;
  repeated DataTuple true_values = 6;
  repeated PredictedTuple pred_values = 7;
  uint64 feedback_time = 8 [
    (gen_bq_schema.bigquery) = {
      require: true,
      type_override: 'TIMESTAMP'
    }
  ];
}

message PrepareElectronicInvoiceLineFeedbackRequest {
  string id = 1;
  string dataset = 2;
  asgt.jester.v1alpha1.ElectronicInvoiceLineRequest.Data input = 3;
  repeated asgt.jester.v1alpha1.Prediction predictions = 4;
  repeated string tags = 5;
}

// Bank
message BankEntry {
  option (gen_bq_schema.bigquery_opts).table_name = "bank_data";
  string id = 1 [
    (gen_bq_schema.bigquery).description = "Feedback ID, same as Envoy request id",
    (gen_bq_schema.bigquery).require = true
  ];
  string consumer = 2 [(gen_bq_schema.bigquery).require = true];
  string dataset = 3 [(gen_bq_schema.bigquery).require = true];
  repeated string tags = 4 [(gen_bq_schema.bigquery).description = "Tags defined by consumer, enriched by service if valetkey is used"];
  asgt.jester.v1alpha1.BankRequest.Data input = 5;
  repeated DataTuple true_values = 6;
  repeated PredictedTuple pred_values = 7;
  uint64 feedback_time = 8 [
    (gen_bq_schema.bigquery) = {
      require: true,
      type_override: 'TIMESTAMP'
    }
  ];
}

message PrepareBankFeedbackRequest {
  string id = 1;
  string dataset = 2;
  asgt.jester.v1alpha1.BankRequest.Data input = 3;
  repeated asgt.jester.v1alpha1.Prediction predictions = 4;
  repeated string tags = 5;
}
