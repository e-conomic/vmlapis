/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.ssn.type.TextAnnotation');
goog.provide('proto.ssn.type.TextAnnotation.DetectedBreak');
goog.provide('proto.ssn.type.TextAnnotation.DetectedBreak.BreakType');
goog.provide('proto.ssn.type.TextAnnotation.DetectedLanguage');
goog.provide('proto.ssn.type.TextAnnotation.TextProperty');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.ssn.type.Page');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ssn.type.TextAnnotation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ssn.type.TextAnnotation.repeatedFields_, null);
};
goog.inherits(proto.ssn.type.TextAnnotation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ssn.type.TextAnnotation.displayName = 'proto.ssn.type.TextAnnotation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ssn.type.TextAnnotation.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ssn.type.TextAnnotation.prototype.toObject = function(opt_includeInstance) {
  return proto.ssn.type.TextAnnotation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ssn.type.TextAnnotation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.TextAnnotation.toObject = function(includeInstance, msg) {
  var f, obj = {
    pagesList: jspb.Message.toObjectList(msg.getPagesList(),
    proto.ssn.type.Page.toObject, includeInstance),
    text: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ssn.type.TextAnnotation}
 */
proto.ssn.type.TextAnnotation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ssn.type.TextAnnotation;
  return proto.ssn.type.TextAnnotation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ssn.type.TextAnnotation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ssn.type.TextAnnotation}
 */
proto.ssn.type.TextAnnotation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ssn.type.Page;
      reader.readMessage(value,proto.ssn.type.Page.deserializeBinaryFromReader);
      msg.addPages(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ssn.type.TextAnnotation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ssn.type.TextAnnotation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ssn.type.TextAnnotation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.TextAnnotation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ssn.type.Page.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ssn.type.TextAnnotation.DetectedLanguage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ssn.type.TextAnnotation.DetectedLanguage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ssn.type.TextAnnotation.DetectedLanguage.displayName = 'proto.ssn.type.TextAnnotation.DetectedLanguage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.prototype.toObject = function(opt_includeInstance) {
  return proto.ssn.type.TextAnnotation.DetectedLanguage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ssn.type.TextAnnotation.DetectedLanguage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.toObject = function(includeInstance, msg) {
  var f, obj = {
    languageCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    confidence: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ssn.type.TextAnnotation.DetectedLanguage}
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ssn.type.TextAnnotation.DetectedLanguage;
  return proto.ssn.type.TextAnnotation.DetectedLanguage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ssn.type.TextAnnotation.DetectedLanguage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ssn.type.TextAnnotation.DetectedLanguage}
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ssn.type.TextAnnotation.DetectedLanguage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ssn.type.TextAnnotation.DetectedLanguage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguageCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional string language_code = 1;
 * @return {string}
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.prototype.getLanguageCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ssn.type.TextAnnotation.DetectedLanguage.prototype.setLanguageCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float confidence = 2;
 * @return {number}
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.prototype.getConfidence = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.ssn.type.TextAnnotation.DetectedLanguage.prototype.setConfidence = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ssn.type.TextAnnotation.DetectedBreak = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ssn.type.TextAnnotation.DetectedBreak, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ssn.type.TextAnnotation.DetectedBreak.displayName = 'proto.ssn.type.TextAnnotation.DetectedBreak';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ssn.type.TextAnnotation.DetectedBreak.prototype.toObject = function(opt_includeInstance) {
  return proto.ssn.type.TextAnnotation.DetectedBreak.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ssn.type.TextAnnotation.DetectedBreak} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.TextAnnotation.DetectedBreak.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isPrefix: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ssn.type.TextAnnotation.DetectedBreak}
 */
proto.ssn.type.TextAnnotation.DetectedBreak.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ssn.type.TextAnnotation.DetectedBreak;
  return proto.ssn.type.TextAnnotation.DetectedBreak.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ssn.type.TextAnnotation.DetectedBreak} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ssn.type.TextAnnotation.DetectedBreak}
 */
proto.ssn.type.TextAnnotation.DetectedBreak.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ssn.type.TextAnnotation.DetectedBreak.BreakType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ssn.type.TextAnnotation.DetectedBreak.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ssn.type.TextAnnotation.DetectedBreak.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ssn.type.TextAnnotation.DetectedBreak} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.TextAnnotation.DetectedBreak.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIsPrefix();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ssn.type.TextAnnotation.DetectedBreak.BreakType = {
  UNKNOWN: 0,
  SPACE: 1,
  SURE_SPACE: 2,
  EOL_SURE_SPACE: 3,
  HYPHEN: 4,
  LINE_BREAK: 5
};

/**
 * optional BreakType type = 1;
 * @return {!proto.ssn.type.TextAnnotation.DetectedBreak.BreakType}
 */
proto.ssn.type.TextAnnotation.DetectedBreak.prototype.getType = function() {
  return /** @type {!proto.ssn.type.TextAnnotation.DetectedBreak.BreakType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ssn.type.TextAnnotation.DetectedBreak.BreakType} value */
proto.ssn.type.TextAnnotation.DetectedBreak.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool is_prefix = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ssn.type.TextAnnotation.DetectedBreak.prototype.getIsPrefix = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.ssn.type.TextAnnotation.DetectedBreak.prototype.setIsPrefix = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ssn.type.TextAnnotation.TextProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ssn.type.TextAnnotation.TextProperty.repeatedFields_, null);
};
goog.inherits(proto.ssn.type.TextAnnotation.TextProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ssn.type.TextAnnotation.TextProperty.displayName = 'proto.ssn.type.TextAnnotation.TextProperty';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ssn.type.TextAnnotation.TextProperty.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ssn.type.TextAnnotation.TextProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.ssn.type.TextAnnotation.TextProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ssn.type.TextAnnotation.TextProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.TextAnnotation.TextProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
    detectedLanguagesList: jspb.Message.toObjectList(msg.getDetectedLanguagesList(),
    proto.ssn.type.TextAnnotation.DetectedLanguage.toObject, includeInstance),
    detectedBreak: (f = msg.getDetectedBreak()) && proto.ssn.type.TextAnnotation.DetectedBreak.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ssn.type.TextAnnotation.TextProperty}
 */
proto.ssn.type.TextAnnotation.TextProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ssn.type.TextAnnotation.TextProperty;
  return proto.ssn.type.TextAnnotation.TextProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ssn.type.TextAnnotation.TextProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ssn.type.TextAnnotation.TextProperty}
 */
proto.ssn.type.TextAnnotation.TextProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ssn.type.TextAnnotation.DetectedLanguage;
      reader.readMessage(value,proto.ssn.type.TextAnnotation.DetectedLanguage.deserializeBinaryFromReader);
      msg.addDetectedLanguages(value);
      break;
    case 2:
      var value = new proto.ssn.type.TextAnnotation.DetectedBreak;
      reader.readMessage(value,proto.ssn.type.TextAnnotation.DetectedBreak.deserializeBinaryFromReader);
      msg.setDetectedBreak(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ssn.type.TextAnnotation.TextProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ssn.type.TextAnnotation.TextProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ssn.type.TextAnnotation.TextProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.TextAnnotation.TextProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDetectedLanguagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ssn.type.TextAnnotation.DetectedLanguage.serializeBinaryToWriter
    );
  }
  f = message.getDetectedBreak();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ssn.type.TextAnnotation.DetectedBreak.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DetectedLanguage detected_languages = 1;
 * @return {!Array<!proto.ssn.type.TextAnnotation.DetectedLanguage>}
 */
proto.ssn.type.TextAnnotation.TextProperty.prototype.getDetectedLanguagesList = function() {
  return /** @type{!Array<!proto.ssn.type.TextAnnotation.DetectedLanguage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ssn.type.TextAnnotation.DetectedLanguage, 1));
};


/** @param {!Array<!proto.ssn.type.TextAnnotation.DetectedLanguage>} value */
proto.ssn.type.TextAnnotation.TextProperty.prototype.setDetectedLanguagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ssn.type.TextAnnotation.DetectedLanguage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ssn.type.TextAnnotation.DetectedLanguage}
 */
proto.ssn.type.TextAnnotation.TextProperty.prototype.addDetectedLanguages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ssn.type.TextAnnotation.DetectedLanguage, opt_index);
};


proto.ssn.type.TextAnnotation.TextProperty.prototype.clearDetectedLanguagesList = function() {
  this.setDetectedLanguagesList([]);
};


/**
 * optional DetectedBreak detected_break = 2;
 * @return {?proto.ssn.type.TextAnnotation.DetectedBreak}
 */
proto.ssn.type.TextAnnotation.TextProperty.prototype.getDetectedBreak = function() {
  return /** @type{?proto.ssn.type.TextAnnotation.DetectedBreak} */ (
    jspb.Message.getWrapperField(this, proto.ssn.type.TextAnnotation.DetectedBreak, 2));
};


/** @param {?proto.ssn.type.TextAnnotation.DetectedBreak|undefined} value */
proto.ssn.type.TextAnnotation.TextProperty.prototype.setDetectedBreak = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ssn.type.TextAnnotation.TextProperty.prototype.clearDetectedBreak = function() {
  this.setDetectedBreak(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ssn.type.TextAnnotation.TextProperty.prototype.hasDetectedBreak = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Page pages = 1;
 * @return {!Array<!proto.ssn.type.Page>}
 */
proto.ssn.type.TextAnnotation.prototype.getPagesList = function() {
  return /** @type{!Array<!proto.ssn.type.Page>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ssn.type.Page, 1));
};


/** @param {!Array<!proto.ssn.type.Page>} value */
proto.ssn.type.TextAnnotation.prototype.setPagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ssn.type.Page=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ssn.type.Page}
 */
proto.ssn.type.TextAnnotation.prototype.addPages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ssn.type.Page, opt_index);
};


proto.ssn.type.TextAnnotation.prototype.clearPagesList = function() {
  this.setPagesList([]);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.ssn.type.TextAnnotation.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ssn.type.TextAnnotation.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


