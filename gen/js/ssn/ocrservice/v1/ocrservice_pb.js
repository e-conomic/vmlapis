/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
var ssn_annotator_v1_annotator_pb = require('../../../ssn/annotator/v1/annotator_pb.js');
var ssn_type_text_annotation_pb = require('../../../ssn/type/text_annotation_pb.js');
goog.exportSymbol('proto.ssn.ocrservice.v1.GetTextAnnotationRequest', null, global);
goog.exportSymbol('proto.ssn.ocrservice.v1.GetTextAnnotationResponse', null, global);
goog.exportSymbol('proto.ssn.ocrservice.v1.OcrScanImageRequest', null, global);
goog.exportSymbol('proto.ssn.ocrservice.v1.OcrScanImageResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ssn.ocrservice.v1.GetTextAnnotationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ssn.ocrservice.v1.GetTextAnnotationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ssn.ocrservice.v1.GetTextAnnotationRequest.displayName = 'proto.ssn.ocrservice.v1.GetTextAnnotationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ssn.ocrservice.v1.GetTextAnnotationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ssn.ocrservice.v1.GetTextAnnotationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ssn.ocrservice.v1.GetTextAnnotationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.ocrservice.v1.GetTextAnnotationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    document: (f = msg.getDocument()) && ssn_annotator_v1_annotator_pb.Document.toObject(includeInstance, f),
    preview: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ssn.ocrservice.v1.GetTextAnnotationRequest}
 */
proto.ssn.ocrservice.v1.GetTextAnnotationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ssn.ocrservice.v1.GetTextAnnotationRequest;
  return proto.ssn.ocrservice.v1.GetTextAnnotationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ssn.ocrservice.v1.GetTextAnnotationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ssn.ocrservice.v1.GetTextAnnotationRequest}
 */
proto.ssn.ocrservice.v1.GetTextAnnotationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new ssn_annotator_v1_annotator_pb.Document;
      reader.readMessage(value,ssn_annotator_v1_annotator_pb.Document.deserializeBinaryFromReader);
      msg.setDocument(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPreview(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ssn.ocrservice.v1.GetTextAnnotationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ssn.ocrservice.v1.GetTextAnnotationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ssn.ocrservice.v1.GetTextAnnotationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.ocrservice.v1.GetTextAnnotationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocument();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ssn_annotator_v1_annotator_pb.Document.serializeBinaryToWriter
    );
  }
  f = message.getPreview();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional ssn.annotator.v1.Document document = 2;
 * @return {?proto.ssn.annotator.v1.Document}
 */
proto.ssn.ocrservice.v1.GetTextAnnotationRequest.prototype.getDocument = function() {
  return /** @type{?proto.ssn.annotator.v1.Document} */ (
    jspb.Message.getWrapperField(this, ssn_annotator_v1_annotator_pb.Document, 2));
};


/** @param {?proto.ssn.annotator.v1.Document|undefined} value */
proto.ssn.ocrservice.v1.GetTextAnnotationRequest.prototype.setDocument = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ssn.ocrservice.v1.GetTextAnnotationRequest.prototype.clearDocument = function() {
  this.setDocument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ssn.ocrservice.v1.GetTextAnnotationRequest.prototype.hasDocument = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool preview = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ssn.ocrservice.v1.GetTextAnnotationRequest.prototype.getPreview = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.ssn.ocrservice.v1.GetTextAnnotationRequest.prototype.setPreview = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ssn.ocrservice.v1.GetTextAnnotationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ssn.ocrservice.v1.GetTextAnnotationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ssn.ocrservice.v1.GetTextAnnotationResponse.displayName = 'proto.ssn.ocrservice.v1.GetTextAnnotationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ssn.ocrservice.v1.GetTextAnnotationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ssn.ocrservice.v1.GetTextAnnotationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ssn.ocrservice.v1.GetTextAnnotationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.ocrservice.v1.GetTextAnnotationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    textAnnotation: (f = msg.getTextAnnotation()) && ssn_type_text_annotation_pb.TextAnnotation.toObject(includeInstance, f),
    image: (f = msg.getImage()) && google_protobuf_wrappers_pb.BytesValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ssn.ocrservice.v1.GetTextAnnotationResponse}
 */
proto.ssn.ocrservice.v1.GetTextAnnotationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ssn.ocrservice.v1.GetTextAnnotationResponse;
  return proto.ssn.ocrservice.v1.GetTextAnnotationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ssn.ocrservice.v1.GetTextAnnotationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ssn.ocrservice.v1.GetTextAnnotationResponse}
 */
proto.ssn.ocrservice.v1.GetTextAnnotationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new ssn_type_text_annotation_pb.TextAnnotation;
      reader.readMessage(value,ssn_type_text_annotation_pb.TextAnnotation.deserializeBinaryFromReader);
      msg.setTextAnnotation(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.BytesValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.BytesValue.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ssn.ocrservice.v1.GetTextAnnotationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ssn.ocrservice.v1.GetTextAnnotationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ssn.ocrservice.v1.GetTextAnnotationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.ocrservice.v1.GetTextAnnotationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTextAnnotation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ssn_type_text_annotation_pb.TextAnnotation.serializeBinaryToWriter
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.BytesValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional ssn.type.TextAnnotation text_annotation = 2;
 * @return {?proto.ssn.type.TextAnnotation}
 */
proto.ssn.ocrservice.v1.GetTextAnnotationResponse.prototype.getTextAnnotation = function() {
  return /** @type{?proto.ssn.type.TextAnnotation} */ (
    jspb.Message.getWrapperField(this, ssn_type_text_annotation_pb.TextAnnotation, 2));
};


/** @param {?proto.ssn.type.TextAnnotation|undefined} value */
proto.ssn.ocrservice.v1.GetTextAnnotationResponse.prototype.setTextAnnotation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ssn.ocrservice.v1.GetTextAnnotationResponse.prototype.clearTextAnnotation = function() {
  this.setTextAnnotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ssn.ocrservice.v1.GetTextAnnotationResponse.prototype.hasTextAnnotation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.BytesValue image = 3;
 * @return {?proto.google.protobuf.BytesValue}
 */
proto.ssn.ocrservice.v1.GetTextAnnotationResponse.prototype.getImage = function() {
  return /** @type{?proto.google.protobuf.BytesValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.BytesValue, 3));
};


/** @param {?proto.google.protobuf.BytesValue|undefined} value */
proto.ssn.ocrservice.v1.GetTextAnnotationResponse.prototype.setImage = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ssn.ocrservice.v1.GetTextAnnotationResponse.prototype.clearImage = function() {
  this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ssn.ocrservice.v1.GetTextAnnotationResponse.prototype.hasImage = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ssn.ocrservice.v1.OcrScanImageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ssn.ocrservice.v1.OcrScanImageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ssn.ocrservice.v1.OcrScanImageRequest.displayName = 'proto.ssn.ocrservice.v1.OcrScanImageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ssn.ocrservice.v1.OcrScanImageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ssn.ocrservice.v1.OcrScanImageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ssn.ocrservice.v1.OcrScanImageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.ocrservice.v1.OcrScanImageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ssn.ocrservice.v1.OcrScanImageRequest}
 */
proto.ssn.ocrservice.v1.OcrScanImageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ssn.ocrservice.v1.OcrScanImageRequest;
  return proto.ssn.ocrservice.v1.OcrScanImageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ssn.ocrservice.v1.OcrScanImageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ssn.ocrservice.v1.OcrScanImageRequest}
 */
proto.ssn.ocrservice.v1.OcrScanImageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ssn.ocrservice.v1.OcrScanImageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ssn.ocrservice.v1.OcrScanImageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ssn.ocrservice.v1.OcrScanImageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.ocrservice.v1.OcrScanImageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {string}
 */
proto.ssn.ocrservice.v1.OcrScanImageRequest.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ssn.ocrservice.v1.OcrScanImageRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ssn.ocrservice.v1.OcrScanImageRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.ssn.ocrservice.v1.OcrScanImageRequest.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ssn.ocrservice.v1.OcrScanImageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ssn.ocrservice.v1.OcrScanImageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ssn.ocrservice.v1.OcrScanImageResponse.displayName = 'proto.ssn.ocrservice.v1.OcrScanImageResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ssn.ocrservice.v1.OcrScanImageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ssn.ocrservice.v1.OcrScanImageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ssn.ocrservice.v1.OcrScanImageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.ocrservice.v1.OcrScanImageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tessHocr: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ssn.ocrservice.v1.OcrScanImageResponse}
 */
proto.ssn.ocrservice.v1.OcrScanImageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ssn.ocrservice.v1.OcrScanImageResponse;
  return proto.ssn.ocrservice.v1.OcrScanImageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ssn.ocrservice.v1.OcrScanImageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ssn.ocrservice.v1.OcrScanImageResponse}
 */
proto.ssn.ocrservice.v1.OcrScanImageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTessHocr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ssn.ocrservice.v1.OcrScanImageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ssn.ocrservice.v1.OcrScanImageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ssn.ocrservice.v1.OcrScanImageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.ocrservice.v1.OcrScanImageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTessHocr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tess_hocr = 1;
 * @return {string}
 */
proto.ssn.ocrservice.v1.OcrScanImageResponse.prototype.getTessHocr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ssn.ocrservice.v1.OcrScanImageResponse.prototype.setTessHocr = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.ssn.ocrservice.v1);
