/**
 * @fileoverview gRPC-Web generated client stub for inference
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v0.0.0
// source: ssn/triton/grpc_service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var ssn_triton_model_config_pb = require('../../ssn/triton/model_config_pb.js')
const proto = {};
proto.inference = require('./grpc_service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.inference.GRPCInferenceServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.inference.GRPCInferenceServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.ServerLiveRequest,
 *   !proto.inference.ServerLiveResponse>}
 */
const methodDescriptor_GRPCInferenceService_ServerLive = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/ServerLive',
  grpc.web.MethodType.UNARY,
  proto.inference.ServerLiveRequest,
  proto.inference.ServerLiveResponse,
  /**
   * @param {!proto.inference.ServerLiveRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.ServerLiveResponse.deserializeBinary
);


/**
 * @param {!proto.inference.ServerLiveRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.ServerLiveResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.ServerLiveResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.serverLive =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/ServerLive',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_ServerLive,
      callback);
};


/**
 * @param {!proto.inference.ServerLiveRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.ServerLiveResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.serverLive =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/ServerLive',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_ServerLive);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.ServerReadyRequest,
 *   !proto.inference.ServerReadyResponse>}
 */
const methodDescriptor_GRPCInferenceService_ServerReady = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/ServerReady',
  grpc.web.MethodType.UNARY,
  proto.inference.ServerReadyRequest,
  proto.inference.ServerReadyResponse,
  /**
   * @param {!proto.inference.ServerReadyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.ServerReadyResponse.deserializeBinary
);


/**
 * @param {!proto.inference.ServerReadyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.ServerReadyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.ServerReadyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.serverReady =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/ServerReady',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_ServerReady,
      callback);
};


/**
 * @param {!proto.inference.ServerReadyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.ServerReadyResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.serverReady =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/ServerReady',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_ServerReady);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.ModelReadyRequest,
 *   !proto.inference.ModelReadyResponse>}
 */
const methodDescriptor_GRPCInferenceService_ModelReady = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/ModelReady',
  grpc.web.MethodType.UNARY,
  proto.inference.ModelReadyRequest,
  proto.inference.ModelReadyResponse,
  /**
   * @param {!proto.inference.ModelReadyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.ModelReadyResponse.deserializeBinary
);


/**
 * @param {!proto.inference.ModelReadyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.ModelReadyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.ModelReadyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.modelReady =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/ModelReady',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_ModelReady,
      callback);
};


/**
 * @param {!proto.inference.ModelReadyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.ModelReadyResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.modelReady =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/ModelReady',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_ModelReady);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.ServerMetadataRequest,
 *   !proto.inference.ServerMetadataResponse>}
 */
const methodDescriptor_GRPCInferenceService_ServerMetadata = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/ServerMetadata',
  grpc.web.MethodType.UNARY,
  proto.inference.ServerMetadataRequest,
  proto.inference.ServerMetadataResponse,
  /**
   * @param {!proto.inference.ServerMetadataRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.ServerMetadataResponse.deserializeBinary
);


/**
 * @param {!proto.inference.ServerMetadataRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.ServerMetadataResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.ServerMetadataResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.serverMetadata =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/ServerMetadata',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_ServerMetadata,
      callback);
};


/**
 * @param {!proto.inference.ServerMetadataRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.ServerMetadataResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.serverMetadata =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/ServerMetadata',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_ServerMetadata);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.ModelMetadataRequest,
 *   !proto.inference.ModelMetadataResponse>}
 */
const methodDescriptor_GRPCInferenceService_ModelMetadata = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/ModelMetadata',
  grpc.web.MethodType.UNARY,
  proto.inference.ModelMetadataRequest,
  proto.inference.ModelMetadataResponse,
  /**
   * @param {!proto.inference.ModelMetadataRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.ModelMetadataResponse.deserializeBinary
);


/**
 * @param {!proto.inference.ModelMetadataRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.ModelMetadataResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.ModelMetadataResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.modelMetadata =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/ModelMetadata',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_ModelMetadata,
      callback);
};


/**
 * @param {!proto.inference.ModelMetadataRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.ModelMetadataResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.modelMetadata =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/ModelMetadata',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_ModelMetadata);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.ModelInferRequest,
 *   !proto.inference.ModelInferResponse>}
 */
const methodDescriptor_GRPCInferenceService_ModelInfer = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/ModelInfer',
  grpc.web.MethodType.UNARY,
  proto.inference.ModelInferRequest,
  proto.inference.ModelInferResponse,
  /**
   * @param {!proto.inference.ModelInferRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.ModelInferResponse.deserializeBinary
);


/**
 * @param {!proto.inference.ModelInferRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.ModelInferResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.ModelInferResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.modelInfer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/ModelInfer',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_ModelInfer,
      callback);
};


/**
 * @param {!proto.inference.ModelInferRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.ModelInferResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.modelInfer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/ModelInfer',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_ModelInfer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.ModelConfigRequest,
 *   !proto.inference.ModelConfigResponse>}
 */
const methodDescriptor_GRPCInferenceService_ModelConfig = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/ModelConfig',
  grpc.web.MethodType.UNARY,
  proto.inference.ModelConfigRequest,
  proto.inference.ModelConfigResponse,
  /**
   * @param {!proto.inference.ModelConfigRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.ModelConfigResponse.deserializeBinary
);


/**
 * @param {!proto.inference.ModelConfigRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.ModelConfigResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.ModelConfigResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.modelConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/ModelConfig',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_ModelConfig,
      callback);
};


/**
 * @param {!proto.inference.ModelConfigRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.ModelConfigResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.modelConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/ModelConfig',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_ModelConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.ModelStatisticsRequest,
 *   !proto.inference.ModelStatisticsResponse>}
 */
const methodDescriptor_GRPCInferenceService_ModelStatistics = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/ModelStatistics',
  grpc.web.MethodType.UNARY,
  proto.inference.ModelStatisticsRequest,
  proto.inference.ModelStatisticsResponse,
  /**
   * @param {!proto.inference.ModelStatisticsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.ModelStatisticsResponse.deserializeBinary
);


/**
 * @param {!proto.inference.ModelStatisticsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.ModelStatisticsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.ModelStatisticsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.modelStatistics =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/ModelStatistics',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_ModelStatistics,
      callback);
};


/**
 * @param {!proto.inference.ModelStatisticsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.ModelStatisticsResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.modelStatistics =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/ModelStatistics',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_ModelStatistics);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.RepositoryIndexRequest,
 *   !proto.inference.RepositoryIndexResponse>}
 */
const methodDescriptor_GRPCInferenceService_RepositoryIndex = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/RepositoryIndex',
  grpc.web.MethodType.UNARY,
  proto.inference.RepositoryIndexRequest,
  proto.inference.RepositoryIndexResponse,
  /**
   * @param {!proto.inference.RepositoryIndexRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.RepositoryIndexResponse.deserializeBinary
);


/**
 * @param {!proto.inference.RepositoryIndexRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.RepositoryIndexResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.RepositoryIndexResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.repositoryIndex =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/RepositoryIndex',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_RepositoryIndex,
      callback);
};


/**
 * @param {!proto.inference.RepositoryIndexRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.RepositoryIndexResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.repositoryIndex =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/RepositoryIndex',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_RepositoryIndex);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.RepositoryModelLoadRequest,
 *   !proto.inference.RepositoryModelLoadResponse>}
 */
const methodDescriptor_GRPCInferenceService_RepositoryModelLoad = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/RepositoryModelLoad',
  grpc.web.MethodType.UNARY,
  proto.inference.RepositoryModelLoadRequest,
  proto.inference.RepositoryModelLoadResponse,
  /**
   * @param {!proto.inference.RepositoryModelLoadRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.RepositoryModelLoadResponse.deserializeBinary
);


/**
 * @param {!proto.inference.RepositoryModelLoadRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.RepositoryModelLoadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.RepositoryModelLoadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.repositoryModelLoad =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/RepositoryModelLoad',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_RepositoryModelLoad,
      callback);
};


/**
 * @param {!proto.inference.RepositoryModelLoadRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.RepositoryModelLoadResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.repositoryModelLoad =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/RepositoryModelLoad',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_RepositoryModelLoad);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.RepositoryModelUnloadRequest,
 *   !proto.inference.RepositoryModelUnloadResponse>}
 */
const methodDescriptor_GRPCInferenceService_RepositoryModelUnload = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/RepositoryModelUnload',
  grpc.web.MethodType.UNARY,
  proto.inference.RepositoryModelUnloadRequest,
  proto.inference.RepositoryModelUnloadResponse,
  /**
   * @param {!proto.inference.RepositoryModelUnloadRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.RepositoryModelUnloadResponse.deserializeBinary
);


/**
 * @param {!proto.inference.RepositoryModelUnloadRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.RepositoryModelUnloadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.RepositoryModelUnloadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.repositoryModelUnload =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/RepositoryModelUnload',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_RepositoryModelUnload,
      callback);
};


/**
 * @param {!proto.inference.RepositoryModelUnloadRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.RepositoryModelUnloadResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.repositoryModelUnload =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/RepositoryModelUnload',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_RepositoryModelUnload);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.SystemSharedMemoryStatusRequest,
 *   !proto.inference.SystemSharedMemoryStatusResponse>}
 */
const methodDescriptor_GRPCInferenceService_SystemSharedMemoryStatus = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/SystemSharedMemoryStatus',
  grpc.web.MethodType.UNARY,
  proto.inference.SystemSharedMemoryStatusRequest,
  proto.inference.SystemSharedMemoryStatusResponse,
  /**
   * @param {!proto.inference.SystemSharedMemoryStatusRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.SystemSharedMemoryStatusResponse.deserializeBinary
);


/**
 * @param {!proto.inference.SystemSharedMemoryStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.SystemSharedMemoryStatusResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.SystemSharedMemoryStatusResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.systemSharedMemoryStatus =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/SystemSharedMemoryStatus',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_SystemSharedMemoryStatus,
      callback);
};


/**
 * @param {!proto.inference.SystemSharedMemoryStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.SystemSharedMemoryStatusResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.systemSharedMemoryStatus =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/SystemSharedMemoryStatus',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_SystemSharedMemoryStatus);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.SystemSharedMemoryRegisterRequest,
 *   !proto.inference.SystemSharedMemoryRegisterResponse>}
 */
const methodDescriptor_GRPCInferenceService_SystemSharedMemoryRegister = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/SystemSharedMemoryRegister',
  grpc.web.MethodType.UNARY,
  proto.inference.SystemSharedMemoryRegisterRequest,
  proto.inference.SystemSharedMemoryRegisterResponse,
  /**
   * @param {!proto.inference.SystemSharedMemoryRegisterRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.SystemSharedMemoryRegisterResponse.deserializeBinary
);


/**
 * @param {!proto.inference.SystemSharedMemoryRegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.SystemSharedMemoryRegisterResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.SystemSharedMemoryRegisterResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.systemSharedMemoryRegister =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/SystemSharedMemoryRegister',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_SystemSharedMemoryRegister,
      callback);
};


/**
 * @param {!proto.inference.SystemSharedMemoryRegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.SystemSharedMemoryRegisterResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.systemSharedMemoryRegister =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/SystemSharedMemoryRegister',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_SystemSharedMemoryRegister);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.SystemSharedMemoryUnregisterRequest,
 *   !proto.inference.SystemSharedMemoryUnregisterResponse>}
 */
const methodDescriptor_GRPCInferenceService_SystemSharedMemoryUnregister = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/SystemSharedMemoryUnregister',
  grpc.web.MethodType.UNARY,
  proto.inference.SystemSharedMemoryUnregisterRequest,
  proto.inference.SystemSharedMemoryUnregisterResponse,
  /**
   * @param {!proto.inference.SystemSharedMemoryUnregisterRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.SystemSharedMemoryUnregisterResponse.deserializeBinary
);


/**
 * @param {!proto.inference.SystemSharedMemoryUnregisterRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.SystemSharedMemoryUnregisterResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.SystemSharedMemoryUnregisterResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.systemSharedMemoryUnregister =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/SystemSharedMemoryUnregister',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_SystemSharedMemoryUnregister,
      callback);
};


/**
 * @param {!proto.inference.SystemSharedMemoryUnregisterRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.SystemSharedMemoryUnregisterResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.systemSharedMemoryUnregister =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/SystemSharedMemoryUnregister',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_SystemSharedMemoryUnregister);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.CudaSharedMemoryStatusRequest,
 *   !proto.inference.CudaSharedMemoryStatusResponse>}
 */
const methodDescriptor_GRPCInferenceService_CudaSharedMemoryStatus = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/CudaSharedMemoryStatus',
  grpc.web.MethodType.UNARY,
  proto.inference.CudaSharedMemoryStatusRequest,
  proto.inference.CudaSharedMemoryStatusResponse,
  /**
   * @param {!proto.inference.CudaSharedMemoryStatusRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.CudaSharedMemoryStatusResponse.deserializeBinary
);


/**
 * @param {!proto.inference.CudaSharedMemoryStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.CudaSharedMemoryStatusResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.CudaSharedMemoryStatusResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.cudaSharedMemoryStatus =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/CudaSharedMemoryStatus',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_CudaSharedMemoryStatus,
      callback);
};


/**
 * @param {!proto.inference.CudaSharedMemoryStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.CudaSharedMemoryStatusResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.cudaSharedMemoryStatus =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/CudaSharedMemoryStatus',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_CudaSharedMemoryStatus);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.CudaSharedMemoryRegisterRequest,
 *   !proto.inference.CudaSharedMemoryRegisterResponse>}
 */
const methodDescriptor_GRPCInferenceService_CudaSharedMemoryRegister = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/CudaSharedMemoryRegister',
  grpc.web.MethodType.UNARY,
  proto.inference.CudaSharedMemoryRegisterRequest,
  proto.inference.CudaSharedMemoryRegisterResponse,
  /**
   * @param {!proto.inference.CudaSharedMemoryRegisterRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.CudaSharedMemoryRegisterResponse.deserializeBinary
);


/**
 * @param {!proto.inference.CudaSharedMemoryRegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.CudaSharedMemoryRegisterResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.CudaSharedMemoryRegisterResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.cudaSharedMemoryRegister =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/CudaSharedMemoryRegister',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_CudaSharedMemoryRegister,
      callback);
};


/**
 * @param {!proto.inference.CudaSharedMemoryRegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.CudaSharedMemoryRegisterResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.cudaSharedMemoryRegister =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/CudaSharedMemoryRegister',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_CudaSharedMemoryRegister);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.CudaSharedMemoryUnregisterRequest,
 *   !proto.inference.CudaSharedMemoryUnregisterResponse>}
 */
const methodDescriptor_GRPCInferenceService_CudaSharedMemoryUnregister = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/CudaSharedMemoryUnregister',
  grpc.web.MethodType.UNARY,
  proto.inference.CudaSharedMemoryUnregisterRequest,
  proto.inference.CudaSharedMemoryUnregisterResponse,
  /**
   * @param {!proto.inference.CudaSharedMemoryUnregisterRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.CudaSharedMemoryUnregisterResponse.deserializeBinary
);


/**
 * @param {!proto.inference.CudaSharedMemoryUnregisterRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.CudaSharedMemoryUnregisterResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.CudaSharedMemoryUnregisterResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.cudaSharedMemoryUnregister =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/CudaSharedMemoryUnregister',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_CudaSharedMemoryUnregister,
      callback);
};


/**
 * @param {!proto.inference.CudaSharedMemoryUnregisterRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.CudaSharedMemoryUnregisterResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.cudaSharedMemoryUnregister =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/CudaSharedMemoryUnregister',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_CudaSharedMemoryUnregister);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.TraceSettingRequest,
 *   !proto.inference.TraceSettingResponse>}
 */
const methodDescriptor_GRPCInferenceService_TraceSetting = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/TraceSetting',
  grpc.web.MethodType.UNARY,
  proto.inference.TraceSettingRequest,
  proto.inference.TraceSettingResponse,
  /**
   * @param {!proto.inference.TraceSettingRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.TraceSettingResponse.deserializeBinary
);


/**
 * @param {!proto.inference.TraceSettingRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.TraceSettingResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.TraceSettingResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.traceSetting =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/TraceSetting',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_TraceSetting,
      callback);
};


/**
 * @param {!proto.inference.TraceSettingRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.TraceSettingResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.traceSetting =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/TraceSetting',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_TraceSetting);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inference.LogSettingsRequest,
 *   !proto.inference.LogSettingsResponse>}
 */
const methodDescriptor_GRPCInferenceService_LogSettings = new grpc.web.MethodDescriptor(
  '/inference.GRPCInferenceService/LogSettings',
  grpc.web.MethodType.UNARY,
  proto.inference.LogSettingsRequest,
  proto.inference.LogSettingsResponse,
  /**
   * @param {!proto.inference.LogSettingsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inference.LogSettingsResponse.deserializeBinary
);


/**
 * @param {!proto.inference.LogSettingsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inference.LogSettingsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inference.LogSettingsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inference.GRPCInferenceServiceClient.prototype.logSettings =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inference.GRPCInferenceService/LogSettings',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_LogSettings,
      callback);
};


/**
 * @param {!proto.inference.LogSettingsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inference.LogSettingsResponse>}
 *     Promise that resolves to the response
 */
proto.inference.GRPCInferenceServicePromiseClient.prototype.logSettings =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inference.GRPCInferenceService/LogSettings',
      request,
      metadata || {},
      methodDescriptor_GRPCInferenceService_LogSettings);
};


module.exports = proto.inference;

