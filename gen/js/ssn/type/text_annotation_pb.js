// source: ssn/type/text_annotation.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var ssn_type_geometry_pb = require('../../ssn/type/geometry_pb.js');
goog.object.extend(proto, ssn_type_geometry_pb);
goog.exportSymbol('proto.ssn.type.Block', null, global);
goog.exportSymbol('proto.ssn.type.Block.BlockType', null, global);
goog.exportSymbol('proto.ssn.type.Page', null, global);
goog.exportSymbol('proto.ssn.type.Paragraph', null, global);
goog.exportSymbol('proto.ssn.type.Symbol', null, global);
goog.exportSymbol('proto.ssn.type.TextAnnotation', null, global);
goog.exportSymbol('proto.ssn.type.TextAnnotation.DetectedBreak', null, global);
goog.exportSymbol('proto.ssn.type.TextAnnotation.DetectedBreak.BreakType', null, global);
goog.exportSymbol('proto.ssn.type.TextAnnotation.DetectedLanguage', null, global);
goog.exportSymbol('proto.ssn.type.TextAnnotation.TextProperty', null, global);
goog.exportSymbol('proto.ssn.type.Word', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ssn.type.TextAnnotation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ssn.type.TextAnnotation.repeatedFields_, null);
};
goog.inherits(proto.ssn.type.TextAnnotation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ssn.type.TextAnnotation.displayName = 'proto.ssn.type.TextAnnotation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ssn.type.TextAnnotation.DetectedLanguage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ssn.type.TextAnnotation.DetectedLanguage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ssn.type.TextAnnotation.DetectedLanguage.displayName = 'proto.ssn.type.TextAnnotation.DetectedLanguage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ssn.type.TextAnnotation.DetectedBreak = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ssn.type.TextAnnotation.DetectedBreak, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ssn.type.TextAnnotation.DetectedBreak.displayName = 'proto.ssn.type.TextAnnotation.DetectedBreak';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ssn.type.TextAnnotation.TextProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ssn.type.TextAnnotation.TextProperty.repeatedFields_, null);
};
goog.inherits(proto.ssn.type.TextAnnotation.TextProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ssn.type.TextAnnotation.TextProperty.displayName = 'proto.ssn.type.TextAnnotation.TextProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ssn.type.Page = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ssn.type.Page.repeatedFields_, null);
};
goog.inherits(proto.ssn.type.Page, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ssn.type.Page.displayName = 'proto.ssn.type.Page';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ssn.type.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ssn.type.Block.repeatedFields_, null);
};
goog.inherits(proto.ssn.type.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ssn.type.Block.displayName = 'proto.ssn.type.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ssn.type.Paragraph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ssn.type.Paragraph.repeatedFields_, null);
};
goog.inherits(proto.ssn.type.Paragraph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ssn.type.Paragraph.displayName = 'proto.ssn.type.Paragraph';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ssn.type.Word = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ssn.type.Word.repeatedFields_, null);
};
goog.inherits(proto.ssn.type.Word, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ssn.type.Word.displayName = 'proto.ssn.type.Word';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ssn.type.Symbol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ssn.type.Symbol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ssn.type.Symbol.displayName = 'proto.ssn.type.Symbol';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ssn.type.TextAnnotation.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ssn.type.TextAnnotation.prototype.toObject = function(opt_includeInstance) {
  return proto.ssn.type.TextAnnotation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ssn.type.TextAnnotation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.TextAnnotation.toObject = function(includeInstance, msg) {
  var f, obj = {
    pagesList: jspb.Message.toObjectList(msg.getPagesList(),
    proto.ssn.type.Page.toObject, includeInstance),
    text: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ssn.type.TextAnnotation}
 */
proto.ssn.type.TextAnnotation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ssn.type.TextAnnotation;
  return proto.ssn.type.TextAnnotation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ssn.type.TextAnnotation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ssn.type.TextAnnotation}
 */
proto.ssn.type.TextAnnotation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ssn.type.Page;
      reader.readMessage(value,proto.ssn.type.Page.deserializeBinaryFromReader);
      msg.addPages(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ssn.type.TextAnnotation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ssn.type.TextAnnotation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ssn.type.TextAnnotation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.TextAnnotation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ssn.type.Page.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.prototype.toObject = function(opt_includeInstance) {
  return proto.ssn.type.TextAnnotation.DetectedLanguage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ssn.type.TextAnnotation.DetectedLanguage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.toObject = function(includeInstance, msg) {
  var f, obj = {
    languageCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ssn.type.TextAnnotation.DetectedLanguage}
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ssn.type.TextAnnotation.DetectedLanguage;
  return proto.ssn.type.TextAnnotation.DetectedLanguage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ssn.type.TextAnnotation.DetectedLanguage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ssn.type.TextAnnotation.DetectedLanguage}
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ssn.type.TextAnnotation.DetectedLanguage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ssn.type.TextAnnotation.DetectedLanguage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguageCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional string language_code = 1;
 * @return {string}
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.prototype.getLanguageCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ssn.type.TextAnnotation.DetectedLanguage} returns this
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.prototype.setLanguageCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float confidence = 2;
 * @return {number}
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ssn.type.TextAnnotation.DetectedLanguage} returns this
 */
proto.ssn.type.TextAnnotation.DetectedLanguage.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ssn.type.TextAnnotation.DetectedBreak.prototype.toObject = function(opt_includeInstance) {
  return proto.ssn.type.TextAnnotation.DetectedBreak.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ssn.type.TextAnnotation.DetectedBreak} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.TextAnnotation.DetectedBreak.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isPrefix: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ssn.type.TextAnnotation.DetectedBreak}
 */
proto.ssn.type.TextAnnotation.DetectedBreak.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ssn.type.TextAnnotation.DetectedBreak;
  return proto.ssn.type.TextAnnotation.DetectedBreak.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ssn.type.TextAnnotation.DetectedBreak} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ssn.type.TextAnnotation.DetectedBreak}
 */
proto.ssn.type.TextAnnotation.DetectedBreak.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ssn.type.TextAnnotation.DetectedBreak.BreakType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ssn.type.TextAnnotation.DetectedBreak.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ssn.type.TextAnnotation.DetectedBreak.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ssn.type.TextAnnotation.DetectedBreak} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.TextAnnotation.DetectedBreak.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIsPrefix();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ssn.type.TextAnnotation.DetectedBreak.BreakType = {
  UNKNOWN: 0,
  SPACE: 1,
  SURE_SPACE: 2,
  EOL_SURE_SPACE: 3,
  HYPHEN: 4,
  LINE_BREAK: 5
};

/**
 * optional BreakType type = 1;
 * @return {!proto.ssn.type.TextAnnotation.DetectedBreak.BreakType}
 */
proto.ssn.type.TextAnnotation.DetectedBreak.prototype.getType = function() {
  return /** @type {!proto.ssn.type.TextAnnotation.DetectedBreak.BreakType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ssn.type.TextAnnotation.DetectedBreak.BreakType} value
 * @return {!proto.ssn.type.TextAnnotation.DetectedBreak} returns this
 */
proto.ssn.type.TextAnnotation.DetectedBreak.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool is_prefix = 2;
 * @return {boolean}
 */
proto.ssn.type.TextAnnotation.DetectedBreak.prototype.getIsPrefix = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ssn.type.TextAnnotation.DetectedBreak} returns this
 */
proto.ssn.type.TextAnnotation.DetectedBreak.prototype.setIsPrefix = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ssn.type.TextAnnotation.TextProperty.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ssn.type.TextAnnotation.TextProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.ssn.type.TextAnnotation.TextProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ssn.type.TextAnnotation.TextProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.TextAnnotation.TextProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
    detectedLanguagesList: jspb.Message.toObjectList(msg.getDetectedLanguagesList(),
    proto.ssn.type.TextAnnotation.DetectedLanguage.toObject, includeInstance),
    detectedBreak: (f = msg.getDetectedBreak()) && proto.ssn.type.TextAnnotation.DetectedBreak.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ssn.type.TextAnnotation.TextProperty}
 */
proto.ssn.type.TextAnnotation.TextProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ssn.type.TextAnnotation.TextProperty;
  return proto.ssn.type.TextAnnotation.TextProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ssn.type.TextAnnotation.TextProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ssn.type.TextAnnotation.TextProperty}
 */
proto.ssn.type.TextAnnotation.TextProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ssn.type.TextAnnotation.DetectedLanguage;
      reader.readMessage(value,proto.ssn.type.TextAnnotation.DetectedLanguage.deserializeBinaryFromReader);
      msg.addDetectedLanguages(value);
      break;
    case 2:
      var value = new proto.ssn.type.TextAnnotation.DetectedBreak;
      reader.readMessage(value,proto.ssn.type.TextAnnotation.DetectedBreak.deserializeBinaryFromReader);
      msg.setDetectedBreak(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ssn.type.TextAnnotation.TextProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ssn.type.TextAnnotation.TextProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ssn.type.TextAnnotation.TextProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.TextAnnotation.TextProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDetectedLanguagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ssn.type.TextAnnotation.DetectedLanguage.serializeBinaryToWriter
    );
  }
  f = message.getDetectedBreak();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ssn.type.TextAnnotation.DetectedBreak.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DetectedLanguage detected_languages = 1;
 * @return {!Array<!proto.ssn.type.TextAnnotation.DetectedLanguage>}
 */
proto.ssn.type.TextAnnotation.TextProperty.prototype.getDetectedLanguagesList = function() {
  return /** @type{!Array<!proto.ssn.type.TextAnnotation.DetectedLanguage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ssn.type.TextAnnotation.DetectedLanguage, 1));
};


/**
 * @param {!Array<!proto.ssn.type.TextAnnotation.DetectedLanguage>} value
 * @return {!proto.ssn.type.TextAnnotation.TextProperty} returns this
*/
proto.ssn.type.TextAnnotation.TextProperty.prototype.setDetectedLanguagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ssn.type.TextAnnotation.DetectedLanguage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ssn.type.TextAnnotation.DetectedLanguage}
 */
proto.ssn.type.TextAnnotation.TextProperty.prototype.addDetectedLanguages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ssn.type.TextAnnotation.DetectedLanguage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ssn.type.TextAnnotation.TextProperty} returns this
 */
proto.ssn.type.TextAnnotation.TextProperty.prototype.clearDetectedLanguagesList = function() {
  return this.setDetectedLanguagesList([]);
};


/**
 * optional DetectedBreak detected_break = 2;
 * @return {?proto.ssn.type.TextAnnotation.DetectedBreak}
 */
proto.ssn.type.TextAnnotation.TextProperty.prototype.getDetectedBreak = function() {
  return /** @type{?proto.ssn.type.TextAnnotation.DetectedBreak} */ (
    jspb.Message.getWrapperField(this, proto.ssn.type.TextAnnotation.DetectedBreak, 2));
};


/**
 * @param {?proto.ssn.type.TextAnnotation.DetectedBreak|undefined} value
 * @return {!proto.ssn.type.TextAnnotation.TextProperty} returns this
*/
proto.ssn.type.TextAnnotation.TextProperty.prototype.setDetectedBreak = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ssn.type.TextAnnotation.TextProperty} returns this
 */
proto.ssn.type.TextAnnotation.TextProperty.prototype.clearDetectedBreak = function() {
  return this.setDetectedBreak(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ssn.type.TextAnnotation.TextProperty.prototype.hasDetectedBreak = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Page pages = 1;
 * @return {!Array<!proto.ssn.type.Page>}
 */
proto.ssn.type.TextAnnotation.prototype.getPagesList = function() {
  return /** @type{!Array<!proto.ssn.type.Page>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ssn.type.Page, 1));
};


/**
 * @param {!Array<!proto.ssn.type.Page>} value
 * @return {!proto.ssn.type.TextAnnotation} returns this
*/
proto.ssn.type.TextAnnotation.prototype.setPagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ssn.type.Page=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ssn.type.Page}
 */
proto.ssn.type.TextAnnotation.prototype.addPages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ssn.type.Page, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ssn.type.TextAnnotation} returns this
 */
proto.ssn.type.TextAnnotation.prototype.clearPagesList = function() {
  return this.setPagesList([]);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.ssn.type.TextAnnotation.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ssn.type.TextAnnotation} returns this
 */
proto.ssn.type.TextAnnotation.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ssn.type.Page.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ssn.type.Page.prototype.toObject = function(opt_includeInstance) {
  return proto.ssn.type.Page.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ssn.type.Page} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.Page.toObject = function(includeInstance, msg) {
  var f, obj = {
    property: (f = msg.getProperty()) && proto.ssn.type.TextAnnotation.TextProperty.toObject(includeInstance, f),
    width: jspb.Message.getFieldWithDefault(msg, 2, 0),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    proto.ssn.type.Block.toObject, includeInstance),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ssn.type.Page}
 */
proto.ssn.type.Page.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ssn.type.Page;
  return proto.ssn.type.Page.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ssn.type.Page} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ssn.type.Page}
 */
proto.ssn.type.Page.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ssn.type.TextAnnotation.TextProperty;
      reader.readMessage(value,proto.ssn.type.TextAnnotation.TextProperty.deserializeBinaryFromReader);
      msg.setProperty(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 4:
      var value = new proto.ssn.type.Block;
      reader.readMessage(value,proto.ssn.type.Block.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ssn.type.Page.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ssn.type.Page.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ssn.type.Page} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.Page.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProperty();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ssn.type.TextAnnotation.TextProperty.serializeBinaryToWriter
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ssn.type.Block.serializeBinaryToWriter
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional TextAnnotation.TextProperty property = 1;
 * @return {?proto.ssn.type.TextAnnotation.TextProperty}
 */
proto.ssn.type.Page.prototype.getProperty = function() {
  return /** @type{?proto.ssn.type.TextAnnotation.TextProperty} */ (
    jspb.Message.getWrapperField(this, proto.ssn.type.TextAnnotation.TextProperty, 1));
};


/**
 * @param {?proto.ssn.type.TextAnnotation.TextProperty|undefined} value
 * @return {!proto.ssn.type.Page} returns this
*/
proto.ssn.type.Page.prototype.setProperty = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ssn.type.Page} returns this
 */
proto.ssn.type.Page.prototype.clearProperty = function() {
  return this.setProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ssn.type.Page.prototype.hasProperty = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 width = 2;
 * @return {number}
 */
proto.ssn.type.Page.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ssn.type.Page} returns this
 */
proto.ssn.type.Page.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 height = 3;
 * @return {number}
 */
proto.ssn.type.Page.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ssn.type.Page} returns this
 */
proto.ssn.type.Page.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated Block blocks = 4;
 * @return {!Array<!proto.ssn.type.Block>}
 */
proto.ssn.type.Page.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.ssn.type.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ssn.type.Block, 4));
};


/**
 * @param {!Array<!proto.ssn.type.Block>} value
 * @return {!proto.ssn.type.Page} returns this
*/
proto.ssn.type.Page.prototype.setBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ssn.type.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ssn.type.Block}
 */
proto.ssn.type.Page.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ssn.type.Block, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ssn.type.Page} returns this
 */
proto.ssn.type.Page.prototype.clearBlocksList = function() {
  return this.setBlocksList([]);
};


/**
 * optional float confidence = 5;
 * @return {number}
 */
proto.ssn.type.Page.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ssn.type.Page} returns this
 */
proto.ssn.type.Page.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ssn.type.Block.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ssn.type.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.ssn.type.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ssn.type.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    property: (f = msg.getProperty()) && proto.ssn.type.TextAnnotation.TextProperty.toObject(includeInstance, f),
    boundingBox: (f = msg.getBoundingBox()) && ssn_type_geometry_pb.BoundingPoly.toObject(includeInstance, f),
    paragraphsList: jspb.Message.toObjectList(msg.getParagraphsList(),
    proto.ssn.type.Paragraph.toObject, includeInstance),
    blockType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ssn.type.Block}
 */
proto.ssn.type.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ssn.type.Block;
  return proto.ssn.type.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ssn.type.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ssn.type.Block}
 */
proto.ssn.type.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ssn.type.TextAnnotation.TextProperty;
      reader.readMessage(value,proto.ssn.type.TextAnnotation.TextProperty.deserializeBinaryFromReader);
      msg.setProperty(value);
      break;
    case 2:
      var value = new ssn_type_geometry_pb.BoundingPoly;
      reader.readMessage(value,ssn_type_geometry_pb.BoundingPoly.deserializeBinaryFromReader);
      msg.setBoundingBox(value);
      break;
    case 3:
      var value = new proto.ssn.type.Paragraph;
      reader.readMessage(value,proto.ssn.type.Paragraph.deserializeBinaryFromReader);
      msg.addParagraphs(value);
      break;
    case 4:
      var value = /** @type {!proto.ssn.type.Block.BlockType} */ (reader.readEnum());
      msg.setBlockType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ssn.type.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ssn.type.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ssn.type.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProperty();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ssn.type.TextAnnotation.TextProperty.serializeBinaryToWriter
    );
  }
  f = message.getBoundingBox();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ssn_type_geometry_pb.BoundingPoly.serializeBinaryToWriter
    );
  }
  f = message.getParagraphsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ssn.type.Paragraph.serializeBinaryToWriter
    );
  }
  f = message.getBlockType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ssn.type.Block.BlockType = {
  UNKNOWN: 0,
  TEXT: 1,
  TABLE: 2,
  PICTURE: 3,
  RULER: 4,
  BARCODE: 5
};

/**
 * optional TextAnnotation.TextProperty property = 1;
 * @return {?proto.ssn.type.TextAnnotation.TextProperty}
 */
proto.ssn.type.Block.prototype.getProperty = function() {
  return /** @type{?proto.ssn.type.TextAnnotation.TextProperty} */ (
    jspb.Message.getWrapperField(this, proto.ssn.type.TextAnnotation.TextProperty, 1));
};


/**
 * @param {?proto.ssn.type.TextAnnotation.TextProperty|undefined} value
 * @return {!proto.ssn.type.Block} returns this
*/
proto.ssn.type.Block.prototype.setProperty = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ssn.type.Block} returns this
 */
proto.ssn.type.Block.prototype.clearProperty = function() {
  return this.setProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ssn.type.Block.prototype.hasProperty = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BoundingPoly bounding_box = 2;
 * @return {?proto.ssn.type.BoundingPoly}
 */
proto.ssn.type.Block.prototype.getBoundingBox = function() {
  return /** @type{?proto.ssn.type.BoundingPoly} */ (
    jspb.Message.getWrapperField(this, ssn_type_geometry_pb.BoundingPoly, 2));
};


/**
 * @param {?proto.ssn.type.BoundingPoly|undefined} value
 * @return {!proto.ssn.type.Block} returns this
*/
proto.ssn.type.Block.prototype.setBoundingBox = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ssn.type.Block} returns this
 */
proto.ssn.type.Block.prototype.clearBoundingBox = function() {
  return this.setBoundingBox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ssn.type.Block.prototype.hasBoundingBox = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Paragraph paragraphs = 3;
 * @return {!Array<!proto.ssn.type.Paragraph>}
 */
proto.ssn.type.Block.prototype.getParagraphsList = function() {
  return /** @type{!Array<!proto.ssn.type.Paragraph>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ssn.type.Paragraph, 3));
};


/**
 * @param {!Array<!proto.ssn.type.Paragraph>} value
 * @return {!proto.ssn.type.Block} returns this
*/
proto.ssn.type.Block.prototype.setParagraphsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ssn.type.Paragraph=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ssn.type.Paragraph}
 */
proto.ssn.type.Block.prototype.addParagraphs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ssn.type.Paragraph, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ssn.type.Block} returns this
 */
proto.ssn.type.Block.prototype.clearParagraphsList = function() {
  return this.setParagraphsList([]);
};


/**
 * optional BlockType block_type = 4;
 * @return {!proto.ssn.type.Block.BlockType}
 */
proto.ssn.type.Block.prototype.getBlockType = function() {
  return /** @type {!proto.ssn.type.Block.BlockType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.ssn.type.Block.BlockType} value
 * @return {!proto.ssn.type.Block} returns this
 */
proto.ssn.type.Block.prototype.setBlockType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional float confidence = 5;
 * @return {number}
 */
proto.ssn.type.Block.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ssn.type.Block} returns this
 */
proto.ssn.type.Block.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ssn.type.Paragraph.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ssn.type.Paragraph.prototype.toObject = function(opt_includeInstance) {
  return proto.ssn.type.Paragraph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ssn.type.Paragraph} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.Paragraph.toObject = function(includeInstance, msg) {
  var f, obj = {
    property: (f = msg.getProperty()) && proto.ssn.type.TextAnnotation.TextProperty.toObject(includeInstance, f),
    boundingBox: (f = msg.getBoundingBox()) && ssn_type_geometry_pb.BoundingPoly.toObject(includeInstance, f),
    wordsList: jspb.Message.toObjectList(msg.getWordsList(),
    proto.ssn.type.Word.toObject, includeInstance),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ssn.type.Paragraph}
 */
proto.ssn.type.Paragraph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ssn.type.Paragraph;
  return proto.ssn.type.Paragraph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ssn.type.Paragraph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ssn.type.Paragraph}
 */
proto.ssn.type.Paragraph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ssn.type.TextAnnotation.TextProperty;
      reader.readMessage(value,proto.ssn.type.TextAnnotation.TextProperty.deserializeBinaryFromReader);
      msg.setProperty(value);
      break;
    case 2:
      var value = new ssn_type_geometry_pb.BoundingPoly;
      reader.readMessage(value,ssn_type_geometry_pb.BoundingPoly.deserializeBinaryFromReader);
      msg.setBoundingBox(value);
      break;
    case 3:
      var value = new proto.ssn.type.Word;
      reader.readMessage(value,proto.ssn.type.Word.deserializeBinaryFromReader);
      msg.addWords(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ssn.type.Paragraph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ssn.type.Paragraph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ssn.type.Paragraph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.Paragraph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProperty();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ssn.type.TextAnnotation.TextProperty.serializeBinaryToWriter
    );
  }
  f = message.getBoundingBox();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ssn_type_geometry_pb.BoundingPoly.serializeBinaryToWriter
    );
  }
  f = message.getWordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ssn.type.Word.serializeBinaryToWriter
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional TextAnnotation.TextProperty property = 1;
 * @return {?proto.ssn.type.TextAnnotation.TextProperty}
 */
proto.ssn.type.Paragraph.prototype.getProperty = function() {
  return /** @type{?proto.ssn.type.TextAnnotation.TextProperty} */ (
    jspb.Message.getWrapperField(this, proto.ssn.type.TextAnnotation.TextProperty, 1));
};


/**
 * @param {?proto.ssn.type.TextAnnotation.TextProperty|undefined} value
 * @return {!proto.ssn.type.Paragraph} returns this
*/
proto.ssn.type.Paragraph.prototype.setProperty = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ssn.type.Paragraph} returns this
 */
proto.ssn.type.Paragraph.prototype.clearProperty = function() {
  return this.setProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ssn.type.Paragraph.prototype.hasProperty = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BoundingPoly bounding_box = 2;
 * @return {?proto.ssn.type.BoundingPoly}
 */
proto.ssn.type.Paragraph.prototype.getBoundingBox = function() {
  return /** @type{?proto.ssn.type.BoundingPoly} */ (
    jspb.Message.getWrapperField(this, ssn_type_geometry_pb.BoundingPoly, 2));
};


/**
 * @param {?proto.ssn.type.BoundingPoly|undefined} value
 * @return {!proto.ssn.type.Paragraph} returns this
*/
proto.ssn.type.Paragraph.prototype.setBoundingBox = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ssn.type.Paragraph} returns this
 */
proto.ssn.type.Paragraph.prototype.clearBoundingBox = function() {
  return this.setBoundingBox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ssn.type.Paragraph.prototype.hasBoundingBox = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Word words = 3;
 * @return {!Array<!proto.ssn.type.Word>}
 */
proto.ssn.type.Paragraph.prototype.getWordsList = function() {
  return /** @type{!Array<!proto.ssn.type.Word>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ssn.type.Word, 3));
};


/**
 * @param {!Array<!proto.ssn.type.Word>} value
 * @return {!proto.ssn.type.Paragraph} returns this
*/
proto.ssn.type.Paragraph.prototype.setWordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ssn.type.Word=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ssn.type.Word}
 */
proto.ssn.type.Paragraph.prototype.addWords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ssn.type.Word, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ssn.type.Paragraph} returns this
 */
proto.ssn.type.Paragraph.prototype.clearWordsList = function() {
  return this.setWordsList([]);
};


/**
 * optional float confidence = 4;
 * @return {number}
 */
proto.ssn.type.Paragraph.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ssn.type.Paragraph} returns this
 */
proto.ssn.type.Paragraph.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ssn.type.Word.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ssn.type.Word.prototype.toObject = function(opt_includeInstance) {
  return proto.ssn.type.Word.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ssn.type.Word} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.Word.toObject = function(includeInstance, msg) {
  var f, obj = {
    property: (f = msg.getProperty()) && proto.ssn.type.TextAnnotation.TextProperty.toObject(includeInstance, f),
    boundingBox: (f = msg.getBoundingBox()) && ssn_type_geometry_pb.BoundingPoly.toObject(includeInstance, f),
    symbolsList: jspb.Message.toObjectList(msg.getSymbolsList(),
    proto.ssn.type.Symbol.toObject, includeInstance),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ssn.type.Word}
 */
proto.ssn.type.Word.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ssn.type.Word;
  return proto.ssn.type.Word.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ssn.type.Word} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ssn.type.Word}
 */
proto.ssn.type.Word.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ssn.type.TextAnnotation.TextProperty;
      reader.readMessage(value,proto.ssn.type.TextAnnotation.TextProperty.deserializeBinaryFromReader);
      msg.setProperty(value);
      break;
    case 2:
      var value = new ssn_type_geometry_pb.BoundingPoly;
      reader.readMessage(value,ssn_type_geometry_pb.BoundingPoly.deserializeBinaryFromReader);
      msg.setBoundingBox(value);
      break;
    case 3:
      var value = new proto.ssn.type.Symbol;
      reader.readMessage(value,proto.ssn.type.Symbol.deserializeBinaryFromReader);
      msg.addSymbols(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ssn.type.Word.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ssn.type.Word.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ssn.type.Word} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.Word.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProperty();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ssn.type.TextAnnotation.TextProperty.serializeBinaryToWriter
    );
  }
  f = message.getBoundingBox();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ssn_type_geometry_pb.BoundingPoly.serializeBinaryToWriter
    );
  }
  f = message.getSymbolsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ssn.type.Symbol.serializeBinaryToWriter
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional TextAnnotation.TextProperty property = 1;
 * @return {?proto.ssn.type.TextAnnotation.TextProperty}
 */
proto.ssn.type.Word.prototype.getProperty = function() {
  return /** @type{?proto.ssn.type.TextAnnotation.TextProperty} */ (
    jspb.Message.getWrapperField(this, proto.ssn.type.TextAnnotation.TextProperty, 1));
};


/**
 * @param {?proto.ssn.type.TextAnnotation.TextProperty|undefined} value
 * @return {!proto.ssn.type.Word} returns this
*/
proto.ssn.type.Word.prototype.setProperty = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ssn.type.Word} returns this
 */
proto.ssn.type.Word.prototype.clearProperty = function() {
  return this.setProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ssn.type.Word.prototype.hasProperty = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BoundingPoly bounding_box = 2;
 * @return {?proto.ssn.type.BoundingPoly}
 */
proto.ssn.type.Word.prototype.getBoundingBox = function() {
  return /** @type{?proto.ssn.type.BoundingPoly} */ (
    jspb.Message.getWrapperField(this, ssn_type_geometry_pb.BoundingPoly, 2));
};


/**
 * @param {?proto.ssn.type.BoundingPoly|undefined} value
 * @return {!proto.ssn.type.Word} returns this
*/
proto.ssn.type.Word.prototype.setBoundingBox = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ssn.type.Word} returns this
 */
proto.ssn.type.Word.prototype.clearBoundingBox = function() {
  return this.setBoundingBox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ssn.type.Word.prototype.hasBoundingBox = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Symbol symbols = 3;
 * @return {!Array<!proto.ssn.type.Symbol>}
 */
proto.ssn.type.Word.prototype.getSymbolsList = function() {
  return /** @type{!Array<!proto.ssn.type.Symbol>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ssn.type.Symbol, 3));
};


/**
 * @param {!Array<!proto.ssn.type.Symbol>} value
 * @return {!proto.ssn.type.Word} returns this
*/
proto.ssn.type.Word.prototype.setSymbolsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ssn.type.Symbol=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ssn.type.Symbol}
 */
proto.ssn.type.Word.prototype.addSymbols = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ssn.type.Symbol, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ssn.type.Word} returns this
 */
proto.ssn.type.Word.prototype.clearSymbolsList = function() {
  return this.setSymbolsList([]);
};


/**
 * optional float confidence = 4;
 * @return {number}
 */
proto.ssn.type.Word.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ssn.type.Word} returns this
 */
proto.ssn.type.Word.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ssn.type.Symbol.prototype.toObject = function(opt_includeInstance) {
  return proto.ssn.type.Symbol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ssn.type.Symbol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.Symbol.toObject = function(includeInstance, msg) {
  var f, obj = {
    property: (f = msg.getProperty()) && proto.ssn.type.TextAnnotation.TextProperty.toObject(includeInstance, f),
    boundingBox: (f = msg.getBoundingBox()) && ssn_type_geometry_pb.BoundingPoly.toObject(includeInstance, f),
    text: jspb.Message.getFieldWithDefault(msg, 3, ""),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ssn.type.Symbol}
 */
proto.ssn.type.Symbol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ssn.type.Symbol;
  return proto.ssn.type.Symbol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ssn.type.Symbol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ssn.type.Symbol}
 */
proto.ssn.type.Symbol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ssn.type.TextAnnotation.TextProperty;
      reader.readMessage(value,proto.ssn.type.TextAnnotation.TextProperty.deserializeBinaryFromReader);
      msg.setProperty(value);
      break;
    case 2:
      var value = new ssn_type_geometry_pb.BoundingPoly;
      reader.readMessage(value,ssn_type_geometry_pb.BoundingPoly.deserializeBinaryFromReader);
      msg.setBoundingBox(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ssn.type.Symbol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ssn.type.Symbol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ssn.type.Symbol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ssn.type.Symbol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProperty();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ssn.type.TextAnnotation.TextProperty.serializeBinaryToWriter
    );
  }
  f = message.getBoundingBox();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ssn_type_geometry_pb.BoundingPoly.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional TextAnnotation.TextProperty property = 1;
 * @return {?proto.ssn.type.TextAnnotation.TextProperty}
 */
proto.ssn.type.Symbol.prototype.getProperty = function() {
  return /** @type{?proto.ssn.type.TextAnnotation.TextProperty} */ (
    jspb.Message.getWrapperField(this, proto.ssn.type.TextAnnotation.TextProperty, 1));
};


/**
 * @param {?proto.ssn.type.TextAnnotation.TextProperty|undefined} value
 * @return {!proto.ssn.type.Symbol} returns this
*/
proto.ssn.type.Symbol.prototype.setProperty = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ssn.type.Symbol} returns this
 */
proto.ssn.type.Symbol.prototype.clearProperty = function() {
  return this.setProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ssn.type.Symbol.prototype.hasProperty = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BoundingPoly bounding_box = 2;
 * @return {?proto.ssn.type.BoundingPoly}
 */
proto.ssn.type.Symbol.prototype.getBoundingBox = function() {
  return /** @type{?proto.ssn.type.BoundingPoly} */ (
    jspb.Message.getWrapperField(this, ssn_type_geometry_pb.BoundingPoly, 2));
};


/**
 * @param {?proto.ssn.type.BoundingPoly|undefined} value
 * @return {!proto.ssn.type.Symbol} returns this
*/
proto.ssn.type.Symbol.prototype.setBoundingBox = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ssn.type.Symbol} returns this
 */
proto.ssn.type.Symbol.prototype.clearBoundingBox = function() {
  return this.setBoundingBox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ssn.type.Symbol.prototype.hasBoundingBox = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string text = 3;
 * @return {string}
 */
proto.ssn.type.Symbol.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ssn.type.Symbol} returns this
 */
proto.ssn.type.Symbol.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional float confidence = 4;
 * @return {number}
 */
proto.ssn.type.Symbol.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ssn.type.Symbol} returns this
 */
proto.ssn.type.Symbol.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


goog.object.extend(exports, proto.ssn.type);
