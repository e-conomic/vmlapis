/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.asgt.type.Confidence', null, global);
goog.exportSymbol('proto.asgt.type.Confidence.Level', null, global);
goog.exportSymbol('proto.asgt.type.Prediction', null, global);
goog.exportSymbol('proto.asgt.type.Prediction.Target', null, global);
goog.exportSymbol('proto.asgt.type.Prediction.Target.Candidate', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asgt.type.Confidence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asgt.type.Confidence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asgt.type.Confidence.displayName = 'proto.asgt.type.Confidence';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asgt.type.Confidence.prototype.toObject = function(opt_includeInstance) {
  return proto.asgt.type.Confidence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asgt.type.Confidence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asgt.type.Confidence.toObject = function(includeInstance, msg) {
  var f, obj = {
    level: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asgt.type.Confidence}
 */
proto.asgt.type.Confidence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asgt.type.Confidence;
  return proto.asgt.type.Confidence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asgt.type.Confidence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asgt.type.Confidence}
 */
proto.asgt.type.Confidence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.asgt.type.Confidence.Level} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asgt.type.Confidence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asgt.type.Confidence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asgt.type.Confidence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asgt.type.Confidence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.asgt.type.Confidence.Level = {
  UNKNOWN: 0,
  VERY_LOW: 1,
  LOW: 2,
  MID: 3,
  HIGH: 4,
  VERY_HIGH: 5
};

/**
 * optional Level level = 1;
 * @return {!proto.asgt.type.Confidence.Level}
 */
proto.asgt.type.Confidence.prototype.getLevel = function() {
  return /** @type {!proto.asgt.type.Confidence.Level} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.asgt.type.Confidence.Level} value */
proto.asgt.type.Confidence.prototype.setLevel = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional float value = 2;
 * @return {number}
 */
proto.asgt.type.Confidence.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.asgt.type.Confidence.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asgt.type.Prediction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.asgt.type.Prediction.repeatedFields_, null);
};
goog.inherits(proto.asgt.type.Prediction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asgt.type.Prediction.displayName = 'proto.asgt.type.Prediction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.asgt.type.Prediction.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asgt.type.Prediction.prototype.toObject = function(opt_includeInstance) {
  return proto.asgt.type.Prediction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asgt.type.Prediction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asgt.type.Prediction.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetsList: jspb.Message.toObjectList(msg.getTargetsList(),
    proto.asgt.type.Prediction.Target.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asgt.type.Prediction}
 */
proto.asgt.type.Prediction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asgt.type.Prediction;
  return proto.asgt.type.Prediction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asgt.type.Prediction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asgt.type.Prediction}
 */
proto.asgt.type.Prediction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.asgt.type.Prediction.Target;
      reader.readMessage(value,proto.asgt.type.Prediction.Target.deserializeBinaryFromReader);
      msg.addTargets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asgt.type.Prediction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asgt.type.Prediction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asgt.type.Prediction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asgt.type.Prediction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.asgt.type.Prediction.Target.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asgt.type.Prediction.Target = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.asgt.type.Prediction.Target.repeatedFields_, null);
};
goog.inherits(proto.asgt.type.Prediction.Target, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asgt.type.Prediction.Target.displayName = 'proto.asgt.type.Prediction.Target';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.asgt.type.Prediction.Target.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asgt.type.Prediction.Target.prototype.toObject = function(opt_includeInstance) {
  return proto.asgt.type.Prediction.Target.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asgt.type.Prediction.Target} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asgt.type.Prediction.Target.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, ""),
    candidatesList: jspb.Message.toObjectList(msg.getCandidatesList(),
    proto.asgt.type.Prediction.Target.Candidate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asgt.type.Prediction.Target}
 */
proto.asgt.type.Prediction.Target.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asgt.type.Prediction.Target;
  return proto.asgt.type.Prediction.Target.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asgt.type.Prediction.Target} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asgt.type.Prediction.Target}
 */
proto.asgt.type.Prediction.Target.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 2:
      var value = new proto.asgt.type.Prediction.Target.Candidate;
      reader.readMessage(value,proto.asgt.type.Prediction.Target.Candidate.deserializeBinaryFromReader);
      msg.addCandidates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asgt.type.Prediction.Target.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asgt.type.Prediction.Target.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asgt.type.Prediction.Target} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asgt.type.Prediction.Target.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCandidatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.asgt.type.Prediction.Target.Candidate.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asgt.type.Prediction.Target.Candidate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asgt.type.Prediction.Target.Candidate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asgt.type.Prediction.Target.Candidate.displayName = 'proto.asgt.type.Prediction.Target.Candidate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asgt.type.Prediction.Target.Candidate.prototype.toObject = function(opt_includeInstance) {
  return proto.asgt.type.Prediction.Target.Candidate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asgt.type.Prediction.Target.Candidate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asgt.type.Prediction.Target.Candidate.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    confidence: (f = msg.getConfidence()) && proto.asgt.type.Confidence.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asgt.type.Prediction.Target.Candidate}
 */
proto.asgt.type.Prediction.Target.Candidate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asgt.type.Prediction.Target.Candidate;
  return proto.asgt.type.Prediction.Target.Candidate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asgt.type.Prediction.Target.Candidate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asgt.type.Prediction.Target.Candidate}
 */
proto.asgt.type.Prediction.Target.Candidate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = new proto.asgt.type.Confidence;
      reader.readMessage(value,proto.asgt.type.Confidence.deserializeBinaryFromReader);
      msg.setConfidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asgt.type.Prediction.Target.Candidate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asgt.type.Prediction.Target.Candidate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asgt.type.Prediction.Target.Candidate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asgt.type.Prediction.Target.Candidate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfidence();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.asgt.type.Confidence.serializeBinaryToWriter
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.asgt.type.Prediction.Target.Candidate.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asgt.type.Prediction.Target.Candidate.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Confidence confidence = 2;
 * @return {?proto.asgt.type.Confidence}
 */
proto.asgt.type.Prediction.Target.Candidate.prototype.getConfidence = function() {
  return /** @type{?proto.asgt.type.Confidence} */ (
    jspb.Message.getWrapperField(this, proto.asgt.type.Confidence, 2));
};


/** @param {?proto.asgt.type.Confidence|undefined} value */
proto.asgt.type.Prediction.Target.Candidate.prototype.setConfidence = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.asgt.type.Prediction.Target.Candidate.prototype.clearConfidence = function() {
  this.setConfidence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.asgt.type.Prediction.Target.Candidate.prototype.hasConfidence = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string target = 1;
 * @return {string}
 */
proto.asgt.type.Prediction.Target.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asgt.type.Prediction.Target.prototype.setTarget = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Candidate candidates = 2;
 * @return {!Array<!proto.asgt.type.Prediction.Target.Candidate>}
 */
proto.asgt.type.Prediction.Target.prototype.getCandidatesList = function() {
  return /** @type{!Array<!proto.asgt.type.Prediction.Target.Candidate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.asgt.type.Prediction.Target.Candidate, 2));
};


/** @param {!Array<!proto.asgt.type.Prediction.Target.Candidate>} value */
proto.asgt.type.Prediction.Target.prototype.setCandidatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.asgt.type.Prediction.Target.Candidate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.asgt.type.Prediction.Target.Candidate}
 */
proto.asgt.type.Prediction.Target.prototype.addCandidates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.asgt.type.Prediction.Target.Candidate, opt_index);
};


proto.asgt.type.Prediction.Target.prototype.clearCandidatesList = function() {
  this.setCandidatesList([]);
};


/**
 * repeated Target targets = 1;
 * @return {!Array<!proto.asgt.type.Prediction.Target>}
 */
proto.asgt.type.Prediction.prototype.getTargetsList = function() {
  return /** @type{!Array<!proto.asgt.type.Prediction.Target>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.asgt.type.Prediction.Target, 1));
};


/** @param {!Array<!proto.asgt.type.Prediction.Target>} value */
proto.asgt.type.Prediction.prototype.setTargetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.asgt.type.Prediction.Target=} opt_value
 * @param {number=} opt_index
 * @return {!proto.asgt.type.Prediction.Target}
 */
proto.asgt.type.Prediction.prototype.addTargets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.asgt.type.Prediction.Target, opt_index);
};


proto.asgt.type.Prediction.prototype.clearTargetsList = function() {
  this.setTargetsList([]);
};


goog.object.extend(exports, proto.asgt.type);
