// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Serving {

  /// <summary>Holder for reflection information generated from tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto</summary>
  public static partial class FileSystemStoragePathSourceReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FileSystemStoragePathSourceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ck10ZW5zb3JmbG93X3NlcnZpbmcvc291cmNlcy9zdG9yYWdlX3BhdGgvZmls",
            "ZV9zeXN0ZW1fc3RvcmFnZV9wYXRoX3NvdXJjZS5wcm90bxISdGVuc29yZmxv",
            "dy5zZXJ2aW5nIoQHCiFGaWxlU3lzdGVtU3RvcmFnZVBhdGhTb3VyY2VDb25m",
            "aWcSWgoJc2VydmFibGVzGAUgAygLMkcudGVuc29yZmxvdy5zZXJ2aW5nLkZp",
            "bGVTeXN0ZW1TdG9yYWdlUGF0aFNvdXJjZUNvbmZpZy5TZXJ2YWJsZVRvTW9u",
            "aXRvchIZCg1zZXJ2YWJsZV9uYW1lGAEgASgJQgIYARIVCgliYXNlX3BhdGgY",
            "AiABKAlCAhgBEiUKHWZpbGVfc3lzdGVtX3BvbGxfd2FpdF9zZWNvbmRzGAMg",
            "ASgDEiwKIGZhaWxfaWZfemVyb192ZXJzaW9uc19hdF9zdGFydHVwGAQgASgI",
            "QgIYARIoCiBzZXJ2YWJsZV92ZXJzaW9uc19hbHdheXNfcHJlc2VudBgGIAEo",
            "CBqdAwoVU2VydmFibGVWZXJzaW9uUG9saWN5EmQKBmxhdGVzdBhkIAEoCzJS",
            "LnRlbnNvcmZsb3cuc2VydmluZy5GaWxlU3lzdGVtU3RvcmFnZVBhdGhTb3Vy",
            "Y2VDb25maWcuU2VydmFibGVWZXJzaW9uUG9saWN5LkxhdGVzdEgAEl4KA2Fs",
            "bBhlIAEoCzJPLnRlbnNvcmZsb3cuc2VydmluZy5GaWxlU3lzdGVtU3RvcmFn",
            "ZVBhdGhTb3VyY2VDb25maWcuU2VydmFibGVWZXJzaW9uUG9saWN5LkFsbEgA",
            "EmgKCHNwZWNpZmljGGYgASgLMlQudGVuc29yZmxvdy5zZXJ2aW5nLkZpbGVT",
            "eXN0ZW1TdG9yYWdlUGF0aFNvdXJjZUNvbmZpZy5TZXJ2YWJsZVZlcnNpb25Q",
            "b2xpY3kuU3BlY2lmaWNIABoeCgZMYXRlc3QSFAoMbnVtX3ZlcnNpb25zGAEg",
            "ASgNGgUKA0FsbBocCghTcGVjaWZpYxIQCgh2ZXJzaW9ucxgBIAMoA0IPCg1w",
            "b2xpY3lfY2hvaWNlGrEBChFTZXJ2YWJsZVRvTW9uaXRvchIVCg1zZXJ2YWJs",
            "ZV9uYW1lGAEgASgJEhEKCWJhc2VfcGF0aBgCIAEoCRJsChdzZXJ2YWJsZV92",
            "ZXJzaW9uX3BvbGljeRgEIAEoCzJLLnRlbnNvcmZsb3cuc2VydmluZy5GaWxl",
            "U3lzdGVtU3RvcmFnZVBhdGhTb3VyY2VDb25maWcuU2VydmFibGVWZXJzaW9u",
            "UG9saWN5SgQIAxAEYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Serving.FileSystemStoragePathSourceConfig), global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Parser, new[]{ "Servables", "ServableName", "BasePath", "FileSystemPollWaitSeconds", "FailIfZeroVersionsAtStartup", "ServableVersionsAlwaysPresent" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy), global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Parser, new[]{ "Latest", "All", "Specific" }, new[]{ "PolicyChoice" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.Latest), global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.Latest.Parser, new[]{ "NumVersions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.All), global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.All.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.Specific), global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.Specific.Parser, new[]{ "Versions" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableToMonitor), global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableToMonitor.Parser, new[]{ "ServableName", "BasePath", "ServableVersionPolicy" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Config proto for FileSystemStoragePathSource.
  /// </summary>
  public sealed partial class FileSystemStoragePathSourceConfig : pb::IMessage<FileSystemStoragePathSourceConfig> {
    private static readonly pb::MessageParser<FileSystemStoragePathSourceConfig> _parser = new pb::MessageParser<FileSystemStoragePathSourceConfig>(() => new FileSystemStoragePathSourceConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileSystemStoragePathSourceConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Serving.FileSystemStoragePathSourceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileSystemStoragePathSourceConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileSystemStoragePathSourceConfig(FileSystemStoragePathSourceConfig other) : this() {
      servables_ = other.servables_.Clone();
      servableName_ = other.servableName_;
      basePath_ = other.basePath_;
      fileSystemPollWaitSeconds_ = other.fileSystemPollWaitSeconds_;
      failIfZeroVersionsAtStartup_ = other.failIfZeroVersionsAtStartup_;
      servableVersionsAlwaysPresent_ = other.servableVersionsAlwaysPresent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileSystemStoragePathSourceConfig Clone() {
      return new FileSystemStoragePathSourceConfig(this);
    }

    /// <summary>Field number for the "servables" field.</summary>
    public const int ServablesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableToMonitor> _repeated_servables_codec
        = pb::FieldCodec.ForMessage(42, global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableToMonitor.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableToMonitor> servables_ = new pbc::RepeatedField<global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableToMonitor>();
    /// <summary>
    /// The servables to monitor for new versions, and aspire.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableToMonitor> Servables {
      get { return servables_; }
    }

    /// <summary>Field number for the "servable_name" field.</summary>
    public const int ServableNameFieldNumber = 1;
    private string servableName_ = "";
    /// <summary>
    /// A single servable name/base_path pair to monitor.
    /// DEPRECATED: Use 'servables' instead.
    /// TODO(b/30898016): Stop using these fields, and ultimately remove them here.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServableName {
      get { return servableName_; }
      set {
        servableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "base_path" field.</summary>
    public const int BasePathFieldNumber = 2;
    private string basePath_ = "";
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasePath {
      get { return basePath_; }
      set {
        basePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_system_poll_wait_seconds" field.</summary>
    public const int FileSystemPollWaitSecondsFieldNumber = 3;
    private long fileSystemPollWaitSeconds_;
    /// <summary>
    /// How long to wait between file-system polling to look for children of
    /// 'base_path', in seconds.
    ///
    /// If set to zero, filesystem will be polled exactly once. If set to a
    /// negative value (for testing use only), polling will be entirely disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FileSystemPollWaitSeconds {
      get { return fileSystemPollWaitSeconds_; }
      set {
        fileSystemPollWaitSeconds_ = value;
      }
    }

    /// <summary>Field number for the "fail_if_zero_versions_at_startup" field.</summary>
    public const int FailIfZeroVersionsAtStartupFieldNumber = 4;
    private bool failIfZeroVersionsAtStartup_;
    /// <summary>
    /// If true, then FileSystemStoragePathSource::Create() and ::UpdateConfig()
    /// fail if, for any configured servables, the file system doesn't currently
    /// contain at least one version under the base path.
    /// (Otherwise, it will emit a warning and keep pinging the file system to
    /// check for a version to appear later.)
    /// DEPRECATED: Use 'servable_versions_always_present' instead, which includes
    /// this behavior.
    /// TODO(b/30898016): Remove 2019-10-31 or later.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FailIfZeroVersionsAtStartup {
      get { return failIfZeroVersionsAtStartup_; }
      set {
        failIfZeroVersionsAtStartup_ = value;
      }
    }

    /// <summary>Field number for the "servable_versions_always_present" field.</summary>
    public const int ServableVersionsAlwaysPresentFieldNumber = 6;
    private bool servableVersionsAlwaysPresent_;
    /// <summary>
    /// If true, the servable is always expected to exist on the underlying
    /// filesystem. FileSystemStoragePathSource::Create() and ::UpdateConfig() will
    /// fail if, for any configured servables, the file system doesn't currently
    /// contain at least one version under the base path. In addition, if a polling
    /// loop find the base path empty, it will not unload existing servables.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ServableVersionsAlwaysPresent {
      get { return servableVersionsAlwaysPresent_; }
      set {
        servableVersionsAlwaysPresent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileSystemStoragePathSourceConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileSystemStoragePathSourceConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!servables_.Equals(other.servables_)) return false;
      if (ServableName != other.ServableName) return false;
      if (BasePath != other.BasePath) return false;
      if (FileSystemPollWaitSeconds != other.FileSystemPollWaitSeconds) return false;
      if (FailIfZeroVersionsAtStartup != other.FailIfZeroVersionsAtStartup) return false;
      if (ServableVersionsAlwaysPresent != other.ServableVersionsAlwaysPresent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= servables_.GetHashCode();
      if (ServableName.Length != 0) hash ^= ServableName.GetHashCode();
      if (BasePath.Length != 0) hash ^= BasePath.GetHashCode();
      if (FileSystemPollWaitSeconds != 0L) hash ^= FileSystemPollWaitSeconds.GetHashCode();
      if (FailIfZeroVersionsAtStartup != false) hash ^= FailIfZeroVersionsAtStartup.GetHashCode();
      if (ServableVersionsAlwaysPresent != false) hash ^= ServableVersionsAlwaysPresent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServableName);
      }
      if (BasePath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BasePath);
      }
      if (FileSystemPollWaitSeconds != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FileSystemPollWaitSeconds);
      }
      if (FailIfZeroVersionsAtStartup != false) {
        output.WriteRawTag(32);
        output.WriteBool(FailIfZeroVersionsAtStartup);
      }
      servables_.WriteTo(output, _repeated_servables_codec);
      if (ServableVersionsAlwaysPresent != false) {
        output.WriteRawTag(48);
        output.WriteBool(ServableVersionsAlwaysPresent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += servables_.CalculateSize(_repeated_servables_codec);
      if (ServableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServableName);
      }
      if (BasePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasePath);
      }
      if (FileSystemPollWaitSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FileSystemPollWaitSeconds);
      }
      if (FailIfZeroVersionsAtStartup != false) {
        size += 1 + 1;
      }
      if (ServableVersionsAlwaysPresent != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileSystemStoragePathSourceConfig other) {
      if (other == null) {
        return;
      }
      servables_.Add(other.servables_);
      if (other.ServableName.Length != 0) {
        ServableName = other.ServableName;
      }
      if (other.BasePath.Length != 0) {
        BasePath = other.BasePath;
      }
      if (other.FileSystemPollWaitSeconds != 0L) {
        FileSystemPollWaitSeconds = other.FileSystemPollWaitSeconds;
      }
      if (other.FailIfZeroVersionsAtStartup != false) {
        FailIfZeroVersionsAtStartup = other.FailIfZeroVersionsAtStartup;
      }
      if (other.ServableVersionsAlwaysPresent != false) {
        ServableVersionsAlwaysPresent = other.ServableVersionsAlwaysPresent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServableName = input.ReadString();
            break;
          }
          case 18: {
            BasePath = input.ReadString();
            break;
          }
          case 24: {
            FileSystemPollWaitSeconds = input.ReadInt64();
            break;
          }
          case 32: {
            FailIfZeroVersionsAtStartup = input.ReadBool();
            break;
          }
          case 42: {
            servables_.AddEntriesFrom(input, _repeated_servables_codec);
            break;
          }
          case 48: {
            ServableVersionsAlwaysPresent = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FileSystemStoragePathSourceConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A policy that dictates which version(s) of a servable should be served.
      /// </summary>
      public sealed partial class ServableVersionPolicy : pb::IMessage<ServableVersionPolicy> {
        private static readonly pb::MessageParser<ServableVersionPolicy> _parser = new pb::MessageParser<ServableVersionPolicy>(() => new ServableVersionPolicy());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ServableVersionPolicy> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServableVersionPolicy() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServableVersionPolicy(ServableVersionPolicy other) : this() {
          switch (other.PolicyChoiceCase) {
            case PolicyChoiceOneofCase.Latest:
              Latest = other.Latest.Clone();
              break;
            case PolicyChoiceOneofCase.All:
              All = other.All.Clone();
              break;
            case PolicyChoiceOneofCase.Specific:
              Specific = other.Specific.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServableVersionPolicy Clone() {
          return new ServableVersionPolicy(this);
        }

        /// <summary>Field number for the "latest" field.</summary>
        public const int LatestFieldNumber = 100;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.Latest Latest {
          get { return policyChoiceCase_ == PolicyChoiceOneofCase.Latest ? (global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.Latest) policyChoice_ : null; }
          set {
            policyChoice_ = value;
            policyChoiceCase_ = value == null ? PolicyChoiceOneofCase.None : PolicyChoiceOneofCase.Latest;
          }
        }

        /// <summary>Field number for the "all" field.</summary>
        public const int AllFieldNumber = 101;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.All All {
          get { return policyChoiceCase_ == PolicyChoiceOneofCase.All ? (global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.All) policyChoice_ : null; }
          set {
            policyChoice_ = value;
            policyChoiceCase_ = value == null ? PolicyChoiceOneofCase.None : PolicyChoiceOneofCase.All;
          }
        }

        /// <summary>Field number for the "specific" field.</summary>
        public const int SpecificFieldNumber = 102;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.Specific Specific {
          get { return policyChoiceCase_ == PolicyChoiceOneofCase.Specific ? (global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.Specific) policyChoice_ : null; }
          set {
            policyChoice_ = value;
            policyChoiceCase_ = value == null ? PolicyChoiceOneofCase.None : PolicyChoiceOneofCase.Specific;
          }
        }

        private object policyChoice_;
        /// <summary>Enum of possible cases for the "policy_choice" oneof.</summary>
        public enum PolicyChoiceOneofCase {
          None = 0,
          Latest = 100,
          All = 101,
          Specific = 102,
        }
        private PolicyChoiceOneofCase policyChoiceCase_ = PolicyChoiceOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PolicyChoiceOneofCase PolicyChoiceCase {
          get { return policyChoiceCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPolicyChoice() {
          policyChoiceCase_ = PolicyChoiceOneofCase.None;
          policyChoice_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ServableVersionPolicy);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ServableVersionPolicy other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Latest, other.Latest)) return false;
          if (!object.Equals(All, other.All)) return false;
          if (!object.Equals(Specific, other.Specific)) return false;
          if (PolicyChoiceCase != other.PolicyChoiceCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (policyChoiceCase_ == PolicyChoiceOneofCase.Latest) hash ^= Latest.GetHashCode();
          if (policyChoiceCase_ == PolicyChoiceOneofCase.All) hash ^= All.GetHashCode();
          if (policyChoiceCase_ == PolicyChoiceOneofCase.Specific) hash ^= Specific.GetHashCode();
          hash ^= (int) policyChoiceCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (policyChoiceCase_ == PolicyChoiceOneofCase.Latest) {
            output.WriteRawTag(162, 6);
            output.WriteMessage(Latest);
          }
          if (policyChoiceCase_ == PolicyChoiceOneofCase.All) {
            output.WriteRawTag(170, 6);
            output.WriteMessage(All);
          }
          if (policyChoiceCase_ == PolicyChoiceOneofCase.Specific) {
            output.WriteRawTag(178, 6);
            output.WriteMessage(Specific);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (policyChoiceCase_ == PolicyChoiceOneofCase.Latest) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Latest);
          }
          if (policyChoiceCase_ == PolicyChoiceOneofCase.All) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(All);
          }
          if (policyChoiceCase_ == PolicyChoiceOneofCase.Specific) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Specific);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ServableVersionPolicy other) {
          if (other == null) {
            return;
          }
          switch (other.PolicyChoiceCase) {
            case PolicyChoiceOneofCase.Latest:
              if (Latest == null) {
                Latest = new global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.Latest();
              }
              Latest.MergeFrom(other.Latest);
              break;
            case PolicyChoiceOneofCase.All:
              if (All == null) {
                All = new global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.All();
              }
              All.MergeFrom(other.All);
              break;
            case PolicyChoiceOneofCase.Specific:
              if (Specific == null) {
                Specific = new global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.Specific();
              }
              Specific.MergeFrom(other.Specific);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 802: {
                global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.Latest subBuilder = new global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.Latest();
                if (policyChoiceCase_ == PolicyChoiceOneofCase.Latest) {
                  subBuilder.MergeFrom(Latest);
                }
                input.ReadMessage(subBuilder);
                Latest = subBuilder;
                break;
              }
              case 810: {
                global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.All subBuilder = new global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.All();
                if (policyChoiceCase_ == PolicyChoiceOneofCase.All) {
                  subBuilder.MergeFrom(All);
                }
                input.ReadMessage(subBuilder);
                All = subBuilder;
                break;
              }
              case 818: {
                global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.Specific subBuilder = new global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Types.Specific();
                if (policyChoiceCase_ == PolicyChoiceOneofCase.Specific) {
                  subBuilder.MergeFrom(Specific);
                }
                input.ReadMessage(subBuilder);
                Specific = subBuilder;
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ServableVersionPolicy message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Serve the latest versions (i.e. the ones with the highest version
          /// numbers), among those found on disk.
          ///
          /// This is the default policy, with the default number of versions as 1.
          /// </summary>
          public sealed partial class Latest : pb::IMessage<Latest> {
            private static readonly pb::MessageParser<Latest> _parser = new pb::MessageParser<Latest>(() => new Latest());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Latest> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Latest() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Latest(Latest other) : this() {
              numVersions_ = other.numVersions_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Latest Clone() {
              return new Latest(this);
            }

            /// <summary>Field number for the "num_versions" field.</summary>
            public const int NumVersionsFieldNumber = 1;
            private uint numVersions_;
            /// <summary>
            /// Number of latest versions to serve. (The default is 1.)
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint NumVersions {
              get { return numVersions_; }
              set {
                numVersions_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Latest);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Latest other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (NumVersions != other.NumVersions) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (NumVersions != 0) hash ^= NumVersions.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (NumVersions != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(NumVersions);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (NumVersions != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumVersions);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Latest other) {
              if (other == null) {
                return;
              }
              if (other.NumVersions != 0) {
                NumVersions = other.NumVersions;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    NumVersions = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

          /// <summary>
          /// Serve all versions found on disk.
          /// </summary>
          public sealed partial class All : pb::IMessage<All> {
            private static readonly pb::MessageParser<All> _parser = new pb::MessageParser<All>(() => new All());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<All> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public All() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public All(All other) : this() {
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public All Clone() {
              return new All(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as All);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(All other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(All other) {
              if (other == null) {
                return;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                }
              }
            }

          }

          /// <summary>
          /// Serve a specific version (or set of versions).
          ///
          /// This policy is useful for rolling back to a specific version, or for
          /// canarying a specific version while still serving a separate stable
          /// version.
          /// </summary>
          public sealed partial class Specific : pb::IMessage<Specific> {
            private static readonly pb::MessageParser<Specific> _parser = new pb::MessageParser<Specific>(() => new Specific());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Specific> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Specific() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Specific(Specific other) : this() {
              versions_ = other.versions_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Specific Clone() {
              return new Specific(this);
            }

            /// <summary>Field number for the "versions" field.</summary>
            public const int VersionsFieldNumber = 1;
            private static readonly pb::FieldCodec<long> _repeated_versions_codec
                = pb::FieldCodec.ForInt64(10);
            private readonly pbc::RepeatedField<long> versions_ = new pbc::RepeatedField<long>();
            /// <summary>
            /// The version numbers to serve.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<long> Versions {
              get { return versions_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Specific);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Specific other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!versions_.Equals(other.versions_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= versions_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              versions_.WriteTo(output, _repeated_versions_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += versions_.CalculateSize(_repeated_versions_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Specific other) {
              if (other == null) {
                return;
              }
              versions_.Add(other.versions_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 8: {
                    versions_.AddEntriesFrom(input, _repeated_versions_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      /// A servable name and base path to look for versions of the servable.
      /// </summary>
      public sealed partial class ServableToMonitor : pb::IMessage<ServableToMonitor> {
        private static readonly pb::MessageParser<ServableToMonitor> _parser = new pb::MessageParser<ServableToMonitor>(() => new ServableToMonitor());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ServableToMonitor> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServableToMonitor() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServableToMonitor(ServableToMonitor other) : this() {
          servableName_ = other.servableName_;
          basePath_ = other.basePath_;
          servableVersionPolicy_ = other.servableVersionPolicy_ != null ? other.servableVersionPolicy_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServableToMonitor Clone() {
          return new ServableToMonitor(this);
        }

        /// <summary>Field number for the "servable_name" field.</summary>
        public const int ServableNameFieldNumber = 1;
        private string servableName_ = "";
        /// <summary>
        /// The servable name to supply in aspired-versions callback calls. Child
        /// paths of 'base_path' are considered to be versions of this servable.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ServableName {
          get { return servableName_; }
          set {
            servableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "base_path" field.</summary>
        public const int BasePathFieldNumber = 2;
        private string basePath_ = "";
        /// <summary>
        /// The path to monitor, i.e. look for child paths of the form base_path/123.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BasePath {
          get { return basePath_; }
          set {
            basePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "servable_version_policy" field.</summary>
        public const int ServableVersionPolicyFieldNumber = 4;
        private global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy servableVersionPolicy_;
        /// <summary>
        /// The policy to determines the number of versions of the servable to be
        /// served at the same time.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy ServableVersionPolicy {
          get { return servableVersionPolicy_; }
          set {
            servableVersionPolicy_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ServableToMonitor);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ServableToMonitor other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ServableName != other.ServableName) return false;
          if (BasePath != other.BasePath) return false;
          if (!object.Equals(ServableVersionPolicy, other.ServableVersionPolicy)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ServableName.Length != 0) hash ^= ServableName.GetHashCode();
          if (BasePath.Length != 0) hash ^= BasePath.GetHashCode();
          if (servableVersionPolicy_ != null) hash ^= ServableVersionPolicy.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ServableName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ServableName);
          }
          if (BasePath.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(BasePath);
          }
          if (servableVersionPolicy_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(ServableVersionPolicy);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ServableName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ServableName);
          }
          if (BasePath.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(BasePath);
          }
          if (servableVersionPolicy_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServableVersionPolicy);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ServableToMonitor other) {
          if (other == null) {
            return;
          }
          if (other.ServableName.Length != 0) {
            ServableName = other.ServableName;
          }
          if (other.BasePath.Length != 0) {
            BasePath = other.BasePath;
          }
          if (other.servableVersionPolicy_ != null) {
            if (servableVersionPolicy_ == null) {
              servableVersionPolicy_ = new global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy();
            }
            ServableVersionPolicy.MergeFrom(other.ServableVersionPolicy);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ServableName = input.ReadString();
                break;
              }
              case 18: {
                BasePath = input.ReadString();
                break;
              }
              case 34: {
                if (servableVersionPolicy_ == null) {
                  servableVersionPolicy_ = new global::Tensorflow.Serving.FileSystemStoragePathSourceConfig.Types.ServableVersionPolicy();
                }
                input.ReadMessage(servableVersionPolicy_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
