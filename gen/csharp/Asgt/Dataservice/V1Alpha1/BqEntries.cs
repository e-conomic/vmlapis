// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: asgt/dataservice/v1alpha1/bq_entries.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Asgt.Dataservice.V1Alpha1 {

  /// <summary>Holder for reflection information generated from asgt/dataservice/v1alpha1/bq_entries.proto</summary>
  public static partial class BqEntriesReflection {

    #region Descriptor
    /// <summary>File descriptor for asgt/dataservice/v1alpha1/bq_entries.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BqEntriesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ciphc2d0L2RhdGFzZXJ2aWNlL3YxYWxwaGExL2JxX2VudHJpZXMucHJvdG8S",
            "GWFzZ3QuZGF0YXNlcnZpY2UudjFhbHBoYTEaIGFzZ3QvdHlwZS9iYW5rX3Ry",
            "YW5zYWN0aW9uLnByb3RvGhxhc2d0L3R5cGUvaW52b2ljZV9saW5lLnByb3Rv",
            "GhVhc2d0L3R5cGUvbW9kZWwucHJvdG8aGmFzZ3QvdHlwZS9wcmVkaWN0aW9u",
            "LnByb3RvGh9hc2d0L3R5cGUvc2Nhbm5lZF9pbnZvaWNlLnByb3RvGhxhc2d0",
            "L3R5cGUvdGFyZ2V0X3ZhbHVlLnByb3RvGhxnZW5fYnFfc2NoZW1hL2JxX2Zp",
            "ZWxkLnByb3RvGhxnZW5fYnFfc2NoZW1hL2JxX3RhYmxlLnByb3RvGhxnb29n",
            "bGUvYXBpL2Fubm90YXRpb25zLnByb3RvIrkDCglCYW5rRW50cnkSPgoCaWQY",
            "ASABKAlCMuo/LyItSUQsIG1hdGNoZXMgRW52b3kgcmVxdWVzdCBpZCBpZiBm",
            "ZWVkYmFjayBkYXRhEhcKCGNvbnN1bWVyGAIgASgJQgXqPwIIARIbCgxkYXRh",
            "c2V0X25hbWUYAyABKAlCBeo/AggBElQKBHRhZ3MYBCADKAlCRuo/QyJBVGFn",
            "cyBkZWZpbmVkIGJ5IGNvbnN1bWVyLCBlbnJpY2hlZCBieSBzZXJ2aWNlIGlm",
            "IHZhbGV0a2V5IGlzIHVzZWQSKAoEZGF0YRgFIAEoCzIaLmFzZ3QudHlwZS5C",
            "YW5rVHJhbnNhY3Rpb24SLQoNdGFyZ2V0X3ZhbHVlcxgGIAMoCzIWLmFzZ3Qu",
            "dHlwZS5UYXJnZXRWYWx1ZRIfCgVtb2RlbBgJIAEoCzIQLmFzZ3QudHlwZS5N",
            "b2RlbBIwCgpwcmVkaWN0aW9uGAogAygLMhwuYXNndC50eXBlLlByZWRpY3Rp",
            "b24uVGFyZ2V0EiQKCnRpbWVfYWRkZWQYCCABKARCEOo/DQgBEglUSU1FU1RB",
            "TVA6Duo/CwoJYmFua19kYXRhItkDChpFbGVjdHJvbmljSW52b2ljZUxpbmVF",
            "bnRyeRI+CgJpZBgBIAEoCUIy6j8vIi1JRCwgbWF0Y2hlcyBFbnZveSByZXF1",
            "ZXN0IGlkIGlmIGZlZWRiYWNrIGRhdGESFwoIY29uc3VtZXIYAiABKAlCBeo/",
            "AggBEhsKDGRhdGFzZXRfbmFtZRgDIAEoCUIF6j8CCAESVAoEdGFncxgEIAMo",
            "CUJG6j9DIkFUYWdzIGRlZmluZWQgYnkgY29uc3VtZXIsIGVucmljaGVkIGJ5",
            "IHNlcnZpY2UgaWYgdmFsZXRrZXkgaXMgdXNlZBIkCgRkYXRhGAUgASgLMhYu",
            "YXNndC50eXBlLkludm9pY2VMaW5lEi0KDXRhcmdldF92YWx1ZXMYBiADKAsy",
            "Fi5hc2d0LnR5cGUuVGFyZ2V0VmFsdWUSHwoFbW9kZWwYCSABKAsyEC5hc2d0",
            "LnR5cGUuTW9kZWwSMAoKcHJlZGljdGlvbhgKIAMoCzIcLmFzZ3QudHlwZS5Q",
            "cmVkaWN0aW9uLlRhcmdldBIkCgp0aW1lX2FkZGVkGAggASgEQhDqPw0IARIJ",
            "VElNRVNUQU1QOiHqPx4KHGVsZWN0cm9uaWNfaW52b2ljZV9saW5lX2RhdGEi",
            "zQMKE1NjYW5uZWRJbnZvaWNlRW50cnkSPgoCaWQYASABKAlCMuo/LyItSUQs",
            "IG1hdGNoZXMgRW52b3kgcmVxdWVzdCBpZCBpZiBmZWVkYmFjayBkYXRhEhcK",
            "CGNvbnN1bWVyGAIgASgJQgXqPwIIARIbCgxkYXRhc2V0X25hbWUYAyABKAlC",
            "Beo/AggBElQKBHRhZ3MYBCADKAlCRuo/QyJBVGFncyBkZWZpbmVkIGJ5IGNv",
            "bnN1bWVyLCBlbnJpY2hlZCBieSBzZXJ2aWNlIGlmIHZhbGV0a2V5IGlzIHVz",
            "ZWQSJwoEZGF0YRgFIAEoCzIZLmFzZ3QudHlwZS5TY2FubmVkSW52b2ljZRIt",
            "Cg10YXJnZXRfdmFsdWVzGAYgAygLMhYuYXNndC50eXBlLlRhcmdldFZhbHVl",
            "Eh8KBW1vZGVsGAkgASgLMhAuYXNndC50eXBlLk1vZGVsEjAKCnByZWRpY3Rp",
            "b24YCiADKAsyHC5hc2d0LnR5cGUuUHJlZGljdGlvbi5UYXJnZXQSJAoKdGlt",
            "ZV9hZGRlZBgIIAEoBEIQ6j8NCAESCVRJTUVTVEFNUDoZ6j8WChRzY2FubmVk",
            "X2ludm9pY2VfZGF0YUINWgtkYXRhc2VydmljZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Asgt.Type.BankTransactionReflection.Descriptor, global::Asgt.Type.InvoiceLineReflection.Descriptor, global::Asgt.Type.ModelReflection.Descriptor, global::Asgt.Type.PredictionReflection.Descriptor, global::Asgt.Type.ScannedInvoiceReflection.Descriptor, global::Asgt.Type.TargetValueReflection.Descriptor, global::GenBqSchema.BqFieldReflection.Descriptor, global::GenBqSchema.BqTableReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Asgt.Dataservice.V1Alpha1.BankEntry), global::Asgt.Dataservice.V1Alpha1.BankEntry.Parser, new[]{ "Id", "Consumer", "DatasetName", "Tags", "Data", "TargetValues", "Model", "Prediction", "TimeAdded" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Asgt.Dataservice.V1Alpha1.ElectronicInvoiceLineEntry), global::Asgt.Dataservice.V1Alpha1.ElectronicInvoiceLineEntry.Parser, new[]{ "Id", "Consumer", "DatasetName", "Tags", "Data", "TargetValues", "Model", "Prediction", "TimeAdded" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Asgt.Dataservice.V1Alpha1.ScannedInvoiceEntry), global::Asgt.Dataservice.V1Alpha1.ScannedInvoiceEntry.Parser, new[]{ "Id", "Consumer", "DatasetName", "Tags", "Data", "TargetValues", "Model", "Prediction", "TimeAdded" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Bank BQ schema gen - could be used for adding direct developer data endpoints
  /// </summary>
  public sealed partial class BankEntry : pb::IMessage<BankEntry> {
    private static readonly pb::MessageParser<BankEntry> _parser = new pb::MessageParser<BankEntry>(() => new BankEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BankEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Asgt.Dataservice.V1Alpha1.BqEntriesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BankEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BankEntry(BankEntry other) : this() {
      id_ = other.id_;
      consumer_ = other.consumer_;
      datasetName_ = other.datasetName_;
      tags_ = other.tags_.Clone();
      data_ = other.data_ != null ? other.data_.Clone() : null;
      targetValues_ = other.targetValues_.Clone();
      model_ = other.model_ != null ? other.model_.Clone() : null;
      prediction_ = other.prediction_.Clone();
      timeAdded_ = other.timeAdded_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BankEntry Clone() {
      return new BankEntry(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "consumer" field.</summary>
    public const int ConsumerFieldNumber = 2;
    private string consumer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Consumer {
      get { return consumer_; }
      set {
        consumer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataset_name" field.</summary>
    public const int DatasetNameFieldNumber = 3;
    private string datasetName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetName {
      get { return datasetName_; }
      set {
        datasetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private global::Asgt.Type.BankTransaction data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Asgt.Type.BankTransaction Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "target_values" field.</summary>
    public const int TargetValuesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Asgt.Type.TargetValue> _repeated_targetValues_codec
        = pb::FieldCodec.ForMessage(50, global::Asgt.Type.TargetValue.Parser);
    private readonly pbc::RepeatedField<global::Asgt.Type.TargetValue> targetValues_ = new pbc::RepeatedField<global::Asgt.Type.TargetValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Asgt.Type.TargetValue> TargetValues {
      get { return targetValues_; }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 9;
    private global::Asgt.Type.Model model_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Asgt.Type.Model Model {
      get { return model_; }
      set {
        model_ = value;
      }
    }

    /// <summary>Field number for the "prediction" field.</summary>
    public const int PredictionFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Asgt.Type.Prediction.Types.Target> _repeated_prediction_codec
        = pb::FieldCodec.ForMessage(82, global::Asgt.Type.Prediction.Types.Target.Parser);
    private readonly pbc::RepeatedField<global::Asgt.Type.Prediction.Types.Target> prediction_ = new pbc::RepeatedField<global::Asgt.Type.Prediction.Types.Target>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Asgt.Type.Prediction.Types.Target> Prediction {
      get { return prediction_; }
    }

    /// <summary>Field number for the "time_added" field.</summary>
    public const int TimeAddedFieldNumber = 8;
    private ulong timeAdded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeAdded {
      get { return timeAdded_; }
      set {
        timeAdded_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BankEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BankEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Consumer != other.Consumer) return false;
      if (DatasetName != other.DatasetName) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if(!targetValues_.Equals(other.targetValues_)) return false;
      if (!object.Equals(Model, other.Model)) return false;
      if(!prediction_.Equals(other.prediction_)) return false;
      if (TimeAdded != other.TimeAdded) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Consumer.Length != 0) hash ^= Consumer.GetHashCode();
      if (DatasetName.Length != 0) hash ^= DatasetName.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      hash ^= targetValues_.GetHashCode();
      if (model_ != null) hash ^= Model.GetHashCode();
      hash ^= prediction_.GetHashCode();
      if (TimeAdded != 0UL) hash ^= TimeAdded.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Consumer.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Consumer);
      }
      if (DatasetName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DatasetName);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (data_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Data);
      }
      targetValues_.WriteTo(output, _repeated_targetValues_codec);
      if (TimeAdded != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(TimeAdded);
      }
      if (model_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Model);
      }
      prediction_.WriteTo(output, _repeated_prediction_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Consumer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Consumer);
      }
      if (DatasetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetName);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += targetValues_.CalculateSize(_repeated_targetValues_codec);
      if (model_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Model);
      }
      size += prediction_.CalculateSize(_repeated_prediction_codec);
      if (TimeAdded != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeAdded);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BankEntry other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Consumer.Length != 0) {
        Consumer = other.Consumer;
      }
      if (other.DatasetName.Length != 0) {
        DatasetName = other.DatasetName;
      }
      tags_.Add(other.tags_);
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Asgt.Type.BankTransaction();
        }
        Data.MergeFrom(other.Data);
      }
      targetValues_.Add(other.targetValues_);
      if (other.model_ != null) {
        if (model_ == null) {
          model_ = new global::Asgt.Type.Model();
        }
        Model.MergeFrom(other.Model);
      }
      prediction_.Add(other.prediction_);
      if (other.TimeAdded != 0UL) {
        TimeAdded = other.TimeAdded;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Consumer = input.ReadString();
            break;
          }
          case 26: {
            DatasetName = input.ReadString();
            break;
          }
          case 34: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 42: {
            if (data_ == null) {
              data_ = new global::Asgt.Type.BankTransaction();
            }
            input.ReadMessage(data_);
            break;
          }
          case 50: {
            targetValues_.AddEntriesFrom(input, _repeated_targetValues_codec);
            break;
          }
          case 64: {
            TimeAdded = input.ReadUInt64();
            break;
          }
          case 74: {
            if (model_ == null) {
              model_ = new global::Asgt.Type.Model();
            }
            input.ReadMessage(model_);
            break;
          }
          case 82: {
            prediction_.AddEntriesFrom(input, _repeated_prediction_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Electronic Invoice Line BQ schema gen - could be used for adding direct developer data endpoints
  /// </summary>
  public sealed partial class ElectronicInvoiceLineEntry : pb::IMessage<ElectronicInvoiceLineEntry> {
    private static readonly pb::MessageParser<ElectronicInvoiceLineEntry> _parser = new pb::MessageParser<ElectronicInvoiceLineEntry>(() => new ElectronicInvoiceLineEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElectronicInvoiceLineEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Asgt.Dataservice.V1Alpha1.BqEntriesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectronicInvoiceLineEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectronicInvoiceLineEntry(ElectronicInvoiceLineEntry other) : this() {
      id_ = other.id_;
      consumer_ = other.consumer_;
      datasetName_ = other.datasetName_;
      tags_ = other.tags_.Clone();
      data_ = other.data_ != null ? other.data_.Clone() : null;
      targetValues_ = other.targetValues_.Clone();
      model_ = other.model_ != null ? other.model_.Clone() : null;
      prediction_ = other.prediction_.Clone();
      timeAdded_ = other.timeAdded_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectronicInvoiceLineEntry Clone() {
      return new ElectronicInvoiceLineEntry(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "consumer" field.</summary>
    public const int ConsumerFieldNumber = 2;
    private string consumer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Consumer {
      get { return consumer_; }
      set {
        consumer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataset_name" field.</summary>
    public const int DatasetNameFieldNumber = 3;
    private string datasetName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetName {
      get { return datasetName_; }
      set {
        datasetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private global::Asgt.Type.InvoiceLine data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Asgt.Type.InvoiceLine Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "target_values" field.</summary>
    public const int TargetValuesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Asgt.Type.TargetValue> _repeated_targetValues_codec
        = pb::FieldCodec.ForMessage(50, global::Asgt.Type.TargetValue.Parser);
    private readonly pbc::RepeatedField<global::Asgt.Type.TargetValue> targetValues_ = new pbc::RepeatedField<global::Asgt.Type.TargetValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Asgt.Type.TargetValue> TargetValues {
      get { return targetValues_; }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 9;
    private global::Asgt.Type.Model model_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Asgt.Type.Model Model {
      get { return model_; }
      set {
        model_ = value;
      }
    }

    /// <summary>Field number for the "prediction" field.</summary>
    public const int PredictionFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Asgt.Type.Prediction.Types.Target> _repeated_prediction_codec
        = pb::FieldCodec.ForMessage(82, global::Asgt.Type.Prediction.Types.Target.Parser);
    private readonly pbc::RepeatedField<global::Asgt.Type.Prediction.Types.Target> prediction_ = new pbc::RepeatedField<global::Asgt.Type.Prediction.Types.Target>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Asgt.Type.Prediction.Types.Target> Prediction {
      get { return prediction_; }
    }

    /// <summary>Field number for the "time_added" field.</summary>
    public const int TimeAddedFieldNumber = 8;
    private ulong timeAdded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeAdded {
      get { return timeAdded_; }
      set {
        timeAdded_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElectronicInvoiceLineEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElectronicInvoiceLineEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Consumer != other.Consumer) return false;
      if (DatasetName != other.DatasetName) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if(!targetValues_.Equals(other.targetValues_)) return false;
      if (!object.Equals(Model, other.Model)) return false;
      if(!prediction_.Equals(other.prediction_)) return false;
      if (TimeAdded != other.TimeAdded) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Consumer.Length != 0) hash ^= Consumer.GetHashCode();
      if (DatasetName.Length != 0) hash ^= DatasetName.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      hash ^= targetValues_.GetHashCode();
      if (model_ != null) hash ^= Model.GetHashCode();
      hash ^= prediction_.GetHashCode();
      if (TimeAdded != 0UL) hash ^= TimeAdded.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Consumer.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Consumer);
      }
      if (DatasetName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DatasetName);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (data_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Data);
      }
      targetValues_.WriteTo(output, _repeated_targetValues_codec);
      if (TimeAdded != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(TimeAdded);
      }
      if (model_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Model);
      }
      prediction_.WriteTo(output, _repeated_prediction_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Consumer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Consumer);
      }
      if (DatasetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetName);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += targetValues_.CalculateSize(_repeated_targetValues_codec);
      if (model_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Model);
      }
      size += prediction_.CalculateSize(_repeated_prediction_codec);
      if (TimeAdded != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeAdded);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElectronicInvoiceLineEntry other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Consumer.Length != 0) {
        Consumer = other.Consumer;
      }
      if (other.DatasetName.Length != 0) {
        DatasetName = other.DatasetName;
      }
      tags_.Add(other.tags_);
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Asgt.Type.InvoiceLine();
        }
        Data.MergeFrom(other.Data);
      }
      targetValues_.Add(other.targetValues_);
      if (other.model_ != null) {
        if (model_ == null) {
          model_ = new global::Asgt.Type.Model();
        }
        Model.MergeFrom(other.Model);
      }
      prediction_.Add(other.prediction_);
      if (other.TimeAdded != 0UL) {
        TimeAdded = other.TimeAdded;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Consumer = input.ReadString();
            break;
          }
          case 26: {
            DatasetName = input.ReadString();
            break;
          }
          case 34: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 42: {
            if (data_ == null) {
              data_ = new global::Asgt.Type.InvoiceLine();
            }
            input.ReadMessage(data_);
            break;
          }
          case 50: {
            targetValues_.AddEntriesFrom(input, _repeated_targetValues_codec);
            break;
          }
          case 64: {
            TimeAdded = input.ReadUInt64();
            break;
          }
          case 74: {
            if (model_ == null) {
              model_ = new global::Asgt.Type.Model();
            }
            input.ReadMessage(model_);
            break;
          }
          case 82: {
            prediction_.AddEntriesFrom(input, _repeated_prediction_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Scanned Invoice BQ schema gen - could be used for adding direct developer data endpoints
  /// </summary>
  public sealed partial class ScannedInvoiceEntry : pb::IMessage<ScannedInvoiceEntry> {
    private static readonly pb::MessageParser<ScannedInvoiceEntry> _parser = new pb::MessageParser<ScannedInvoiceEntry>(() => new ScannedInvoiceEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScannedInvoiceEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Asgt.Dataservice.V1Alpha1.BqEntriesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScannedInvoiceEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScannedInvoiceEntry(ScannedInvoiceEntry other) : this() {
      id_ = other.id_;
      consumer_ = other.consumer_;
      datasetName_ = other.datasetName_;
      tags_ = other.tags_.Clone();
      data_ = other.data_ != null ? other.data_.Clone() : null;
      targetValues_ = other.targetValues_.Clone();
      model_ = other.model_ != null ? other.model_.Clone() : null;
      prediction_ = other.prediction_.Clone();
      timeAdded_ = other.timeAdded_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScannedInvoiceEntry Clone() {
      return new ScannedInvoiceEntry(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "consumer" field.</summary>
    public const int ConsumerFieldNumber = 2;
    private string consumer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Consumer {
      get { return consumer_; }
      set {
        consumer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataset_name" field.</summary>
    public const int DatasetNameFieldNumber = 3;
    private string datasetName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetName {
      get { return datasetName_; }
      set {
        datasetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private global::Asgt.Type.ScannedInvoice data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Asgt.Type.ScannedInvoice Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "target_values" field.</summary>
    public const int TargetValuesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Asgt.Type.TargetValue> _repeated_targetValues_codec
        = pb::FieldCodec.ForMessage(50, global::Asgt.Type.TargetValue.Parser);
    private readonly pbc::RepeatedField<global::Asgt.Type.TargetValue> targetValues_ = new pbc::RepeatedField<global::Asgt.Type.TargetValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Asgt.Type.TargetValue> TargetValues {
      get { return targetValues_; }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 9;
    private global::Asgt.Type.Model model_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Asgt.Type.Model Model {
      get { return model_; }
      set {
        model_ = value;
      }
    }

    /// <summary>Field number for the "prediction" field.</summary>
    public const int PredictionFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Asgt.Type.Prediction.Types.Target> _repeated_prediction_codec
        = pb::FieldCodec.ForMessage(82, global::Asgt.Type.Prediction.Types.Target.Parser);
    private readonly pbc::RepeatedField<global::Asgt.Type.Prediction.Types.Target> prediction_ = new pbc::RepeatedField<global::Asgt.Type.Prediction.Types.Target>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Asgt.Type.Prediction.Types.Target> Prediction {
      get { return prediction_; }
    }

    /// <summary>Field number for the "time_added" field.</summary>
    public const int TimeAddedFieldNumber = 8;
    private ulong timeAdded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeAdded {
      get { return timeAdded_; }
      set {
        timeAdded_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScannedInvoiceEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScannedInvoiceEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Consumer != other.Consumer) return false;
      if (DatasetName != other.DatasetName) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if(!targetValues_.Equals(other.targetValues_)) return false;
      if (!object.Equals(Model, other.Model)) return false;
      if(!prediction_.Equals(other.prediction_)) return false;
      if (TimeAdded != other.TimeAdded) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Consumer.Length != 0) hash ^= Consumer.GetHashCode();
      if (DatasetName.Length != 0) hash ^= DatasetName.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      hash ^= targetValues_.GetHashCode();
      if (model_ != null) hash ^= Model.GetHashCode();
      hash ^= prediction_.GetHashCode();
      if (TimeAdded != 0UL) hash ^= TimeAdded.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Consumer.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Consumer);
      }
      if (DatasetName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DatasetName);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (data_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Data);
      }
      targetValues_.WriteTo(output, _repeated_targetValues_codec);
      if (TimeAdded != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(TimeAdded);
      }
      if (model_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Model);
      }
      prediction_.WriteTo(output, _repeated_prediction_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Consumer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Consumer);
      }
      if (DatasetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetName);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += targetValues_.CalculateSize(_repeated_targetValues_codec);
      if (model_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Model);
      }
      size += prediction_.CalculateSize(_repeated_prediction_codec);
      if (TimeAdded != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeAdded);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScannedInvoiceEntry other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Consumer.Length != 0) {
        Consumer = other.Consumer;
      }
      if (other.DatasetName.Length != 0) {
        DatasetName = other.DatasetName;
      }
      tags_.Add(other.tags_);
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Asgt.Type.ScannedInvoice();
        }
        Data.MergeFrom(other.Data);
      }
      targetValues_.Add(other.targetValues_);
      if (other.model_ != null) {
        if (model_ == null) {
          model_ = new global::Asgt.Type.Model();
        }
        Model.MergeFrom(other.Model);
      }
      prediction_.Add(other.prediction_);
      if (other.TimeAdded != 0UL) {
        TimeAdded = other.TimeAdded;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Consumer = input.ReadString();
            break;
          }
          case 26: {
            DatasetName = input.ReadString();
            break;
          }
          case 34: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 42: {
            if (data_ == null) {
              data_ = new global::Asgt.Type.ScannedInvoice();
            }
            input.ReadMessage(data_);
            break;
          }
          case 50: {
            targetValues_.AddEntriesFrom(input, _repeated_targetValues_codec);
            break;
          }
          case 64: {
            TimeAdded = input.ReadUInt64();
            break;
          }
          case 74: {
            if (model_ == null) {
              model_ = new global::Asgt.Type.Model();
            }
            input.ReadMessage(model_);
            break;
          }
          case 82: {
            prediction_.AddEntriesFrom(input, _repeated_prediction_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
