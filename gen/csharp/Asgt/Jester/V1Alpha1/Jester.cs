// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: asgt/jester/v1alpha1/jester.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Asgt.Jester.V1Alpha1 {

  /// <summary>Holder for reflection information generated from asgt/jester/v1alpha1/jester.proto</summary>
  public static partial class JesterReflection {

    #region Descriptor
    /// <summary>File descriptor for asgt/jester/v1alpha1/jester.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static JesterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFhc2d0L2plc3Rlci92MWFscGhhMS9qZXN0ZXIucHJvdG8SFGFzZ3QuamVz",
            "dGVyLnYxYWxwaGExGhphc2d0L3R5cGUvcHJlZGljdGlvbi5wcm90bxocZ29v",
            "Z2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3Rp",
            "bWVzdGFtcC5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3Rv",
            "IkEKE1N1Z2dlc3Rpb25zUmVzcG9uc2USKgoLcHJlZGljdGlvbnMYASADKAsy",
            "FS5hc2d0LnR5cGUuUHJlZGljdGlvbiJiChFTdWdnZXN0aW9uT3B0aW9ucxIY",
            "ChBzdWdnZXN0aW9uX2xpbWl0GAEgASgFEjMKDm1pbl9jb25maWRlbmNlGAIg",
            "ASgOMhsuYXNndC50eXBlLkNvbmZpZGVuY2UuTGV2ZWwixgEKFVNjYW5uZWRJ",
            "bnZvaWNlUmVxdWVzdBJACgZpbnB1dHMYASADKAsyMC5hc2d0Lmplc3Rlci52",
            "MWFscGhhMS5TY2FubmVkSW52b2ljZVJlcXVlc3QuRGF0YRIUCgxkYXRhc2V0",
            "X25hbWUYAiABKAkSOAoHb3B0aW9ucxgDIAEoCzInLmFzZ3QuamVzdGVyLnYx",
            "YWxwaGExLlN1Z2dlc3Rpb25PcHRpb25zGhsKBERhdGESEwoLZGVzY3JpcHRp",
            "b24YASABKAki5AQKHEVsZWN0cm9uaWNJbnZvaWNlTGluZVJlcXVlc3QSRwoG",
            "aW5wdXRzGAEgAygLMjcuYXNndC5qZXN0ZXIudjFhbHBoYTEuRWxlY3Ryb25p",
            "Y0ludm9pY2VMaW5lUmVxdWVzdC5EYXRhEhQKDGRhdGFzZXRfbmFtZRgCIAEo",
            "CRI4CgdvcHRpb25zGAMgASgLMicuYXNndC5qZXN0ZXIudjFhbHBoYTEuU3Vn",
            "Z2VzdGlvbk9wdGlvbnMaqgMKBERhdGESLgoKaXNzdWVfZGF0ZRgBIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoIY3VycmVuY3kYAiABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSEwoLc3VwcGxpZXJfaWQY",
            "AyABKAkSMwoNc3VwcGxpZXJfbmFtZRgEIAEoCzIcLmdvb2dsZS5wcm90b2J1",
            "Zi5TdHJpbmdWYWx1ZRI4ChJzdXBwbGllcl9nbG9iYWxfaWQYBSABKAsyHC5n",
            "b29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSMgoMY3VzdG9tZXJfcmVmGAYg",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEioKBXRvdGFsGAcg",
            "ASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFsdWUSLwoJbGluZV90ZXh0",
            "GAggASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEi0KB2xpbmVf",
            "aWQYCSABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUitgIKC0Jh",
            "bmtSZXF1ZXN0EjYKBmlucHV0cxgBIAMoCzImLmFzZ3QuamVzdGVyLnYxYWxw",
            "aGExLkJhbmtSZXF1ZXN0LkRhdGESFAoMZGF0YXNldF9uYW1lGAIgASgJEjgK",
            "B29wdGlvbnMYAyABKAsyJy5hc2d0Lmplc3Rlci52MWFscGhhMS5TdWdnZXN0",
            "aW9uT3B0aW9ucxqeAQoERGF0YRIWCg5hY2NvdW50X251bWJlchgBIAEoBRIs",
            "CgZhbW91bnQYAiABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUS",
            "EgoKZW50cnlfdHlwZRgDIAEoBRIMCgR0ZXh0GAQgASgJEi4KCnRpbWVfc3Rh",
            "bXAYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wMugDCgZKZXN0",
            "ZXISoAEKGVNjYW5uZWRJbnZvaWNlU3VnZ2VzdGlvbnMSKy5hc2d0Lmplc3Rl",
            "ci52MWFscGhhMS5TY2FubmVkSW52b2ljZVJlcXVlc3QaKS5hc2d0Lmplc3Rl",
            "ci52MWFscGhhMS5TdWdnZXN0aW9uc1Jlc3BvbnNlIiuC0+STAiUiIC92MWFs",
            "cGhhMS9zY2FubmVkaW52b2ljZTpzdWdnZXN0OgEqErUBCiBFbGVjdHJvbmlj",
            "SW52b2ljZUxpbmVTdWdnZXN0aW9ucxIyLmFzZ3QuamVzdGVyLnYxYWxwaGEx",
            "LkVsZWN0cm9uaWNJbnZvaWNlTGluZVJlcXVlc3QaKS5hc2d0Lmplc3Rlci52",
            "MWFscGhhMS5TdWdnZXN0aW9uc1Jlc3BvbnNlIjKC0+STAiwiJy92MWFscGhh",
            "MS9lbGVjdHJvbmljaW52b2ljZWxpbmU6c3VnZ2VzdDoBKhKCAQoPQmFua1N1",
            "Z2dlc3Rpb25zEiEuYXNndC5qZXN0ZXIudjFhbHBoYTEuQmFua1JlcXVlc3Qa",
            "KS5hc2d0Lmplc3Rlci52MWFscGhhMS5TdWdnZXN0aW9uc1Jlc3BvbnNlIiGC",
            "0+STAhsiFi92MWFscGhhMS9iYW5rOnN1Z2dlc3Q6ASpCCFoGamVzdGVyYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Asgt.Type.PredictionReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Asgt.Jester.V1Alpha1.SuggestionsResponse), global::Asgt.Jester.V1Alpha1.SuggestionsResponse.Parser, new[]{ "Predictions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Asgt.Jester.V1Alpha1.SuggestionOptions), global::Asgt.Jester.V1Alpha1.SuggestionOptions.Parser, new[]{ "SuggestionLimit", "MinConfidence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Asgt.Jester.V1Alpha1.ScannedInvoiceRequest), global::Asgt.Jester.V1Alpha1.ScannedInvoiceRequest.Parser, new[]{ "Inputs", "DatasetName", "Options" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Asgt.Jester.V1Alpha1.ScannedInvoiceRequest.Types.Data), global::Asgt.Jester.V1Alpha1.ScannedInvoiceRequest.Types.Data.Parser, new[]{ "Description" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Asgt.Jester.V1Alpha1.ElectronicInvoiceLineRequest), global::Asgt.Jester.V1Alpha1.ElectronicInvoiceLineRequest.Parser, new[]{ "Inputs", "DatasetName", "Options" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Asgt.Jester.V1Alpha1.ElectronicInvoiceLineRequest.Types.Data), global::Asgt.Jester.V1Alpha1.ElectronicInvoiceLineRequest.Types.Data.Parser, new[]{ "IssueDate", "Currency", "SupplierId", "SupplierName", "SupplierGlobalId", "CustomerRef", "Total", "LineText", "LineId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Asgt.Jester.V1Alpha1.BankRequest), global::Asgt.Jester.V1Alpha1.BankRequest.Parser, new[]{ "Inputs", "DatasetName", "Options" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Asgt.Jester.V1Alpha1.BankRequest.Types.Data), global::Asgt.Jester.V1Alpha1.BankRequest.Types.Data.Parser, new[]{ "AccountNumber", "Amount", "EntryType", "Text", "TimeStamp" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// AutoSuggest
  /// </summary>
  public sealed partial class SuggestionsResponse : pb::IMessage<SuggestionsResponse> {
    private static readonly pb::MessageParser<SuggestionsResponse> _parser = new pb::MessageParser<SuggestionsResponse>(() => new SuggestionsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SuggestionsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Asgt.Jester.V1Alpha1.JesterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuggestionsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuggestionsResponse(SuggestionsResponse other) : this() {
      predictions_ = other.predictions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuggestionsResponse Clone() {
      return new SuggestionsResponse(this);
    }

    /// <summary>Field number for the "predictions" field.</summary>
    public const int PredictionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Asgt.Type.Prediction> _repeated_predictions_codec
        = pb::FieldCodec.ForMessage(10, global::Asgt.Type.Prediction.Parser);
    private readonly pbc::RepeatedField<global::Asgt.Type.Prediction> predictions_ = new pbc::RepeatedField<global::Asgt.Type.Prediction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Asgt.Type.Prediction> Predictions {
      get { return predictions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SuggestionsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SuggestionsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!predictions_.Equals(other.predictions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= predictions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      predictions_.WriteTo(output, _repeated_predictions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += predictions_.CalculateSize(_repeated_predictions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SuggestionsResponse other) {
      if (other == null) {
        return;
      }
      predictions_.Add(other.predictions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            predictions_.AddEntriesFrom(input, _repeated_predictions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SuggestionOptions : pb::IMessage<SuggestionOptions> {
    private static readonly pb::MessageParser<SuggestionOptions> _parser = new pb::MessageParser<SuggestionOptions>(() => new SuggestionOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SuggestionOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Asgt.Jester.V1Alpha1.JesterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuggestionOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuggestionOptions(SuggestionOptions other) : this() {
      suggestionLimit_ = other.suggestionLimit_;
      minConfidence_ = other.minConfidence_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuggestionOptions Clone() {
      return new SuggestionOptions(this);
    }

    /// <summary>Field number for the "suggestion_limit" field.</summary>
    public const int SuggestionLimitFieldNumber = 1;
    private int suggestionLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SuggestionLimit {
      get { return suggestionLimit_; }
      set {
        suggestionLimit_ = value;
      }
    }

    /// <summary>Field number for the "min_confidence" field.</summary>
    public const int MinConfidenceFieldNumber = 2;
    private global::Asgt.Type.Confidence.Types.Level minConfidence_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Asgt.Type.Confidence.Types.Level MinConfidence {
      get { return minConfidence_; }
      set {
        minConfidence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SuggestionOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SuggestionOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SuggestionLimit != other.SuggestionLimit) return false;
      if (MinConfidence != other.MinConfidence) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SuggestionLimit != 0) hash ^= SuggestionLimit.GetHashCode();
      if (MinConfidence != 0) hash ^= MinConfidence.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SuggestionLimit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SuggestionLimit);
      }
      if (MinConfidence != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MinConfidence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SuggestionLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuggestionLimit);
      }
      if (MinConfidence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MinConfidence);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SuggestionOptions other) {
      if (other == null) {
        return;
      }
      if (other.SuggestionLimit != 0) {
        SuggestionLimit = other.SuggestionLimit;
      }
      if (other.MinConfidence != 0) {
        MinConfidence = other.MinConfidence;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SuggestionLimit = input.ReadInt32();
            break;
          }
          case 16: {
            minConfidence_ = (global::Asgt.Type.Confidence.Types.Level) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Scanned Invoice
  /// </summary>
  public sealed partial class ScannedInvoiceRequest : pb::IMessage<ScannedInvoiceRequest> {
    private static readonly pb::MessageParser<ScannedInvoiceRequest> _parser = new pb::MessageParser<ScannedInvoiceRequest>(() => new ScannedInvoiceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScannedInvoiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Asgt.Jester.V1Alpha1.JesterReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScannedInvoiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScannedInvoiceRequest(ScannedInvoiceRequest other) : this() {
      inputs_ = other.inputs_.Clone();
      datasetName_ = other.datasetName_;
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScannedInvoiceRequest Clone() {
      return new ScannedInvoiceRequest(this);
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Asgt.Jester.V1Alpha1.ScannedInvoiceRequest.Types.Data> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(10, global::Asgt.Jester.V1Alpha1.ScannedInvoiceRequest.Types.Data.Parser);
    private readonly pbc::RepeatedField<global::Asgt.Jester.V1Alpha1.ScannedInvoiceRequest.Types.Data> inputs_ = new pbc::RepeatedField<global::Asgt.Jester.V1Alpha1.ScannedInvoiceRequest.Types.Data>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Asgt.Jester.V1Alpha1.ScannedInvoiceRequest.Types.Data> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "dataset_name" field.</summary>
    public const int DatasetNameFieldNumber = 2;
    private string datasetName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetName {
      get { return datasetName_; }
      set {
        datasetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::Asgt.Jester.V1Alpha1.SuggestionOptions options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Asgt.Jester.V1Alpha1.SuggestionOptions Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScannedInvoiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScannedInvoiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!inputs_.Equals(other.inputs_)) return false;
      if (DatasetName != other.DatasetName) return false;
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= inputs_.GetHashCode();
      if (DatasetName.Length != 0) hash ^= DatasetName.GetHashCode();
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      inputs_.WriteTo(output, _repeated_inputs_codec);
      if (DatasetName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatasetName);
      }
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      if (DatasetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetName);
      }
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScannedInvoiceRequest other) {
      if (other == null) {
        return;
      }
      inputs_.Add(other.inputs_);
      if (other.DatasetName.Length != 0) {
        DatasetName = other.DatasetName;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          options_ = new global::Asgt.Jester.V1Alpha1.SuggestionOptions();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
          case 18: {
            DatasetName = input.ReadString();
            break;
          }
          case 26: {
            if (options_ == null) {
              options_ = new global::Asgt.Jester.V1Alpha1.SuggestionOptions();
            }
            input.ReadMessage(options_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ScannedInvoiceRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Data : pb::IMessage<Data> {
        private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Data> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Asgt.Jester.V1Alpha1.ScannedInvoiceRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Data() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Data(Data other) : this() {
          description_ = other.description_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Data Clone() {
          return new Data(this);
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 1;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Data);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Data other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Description != other.Description) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Description.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Description);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Data other) {
          if (other == null) {
            return;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Description = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Electronic Invoice Line
  /// </summary>
  public sealed partial class ElectronicInvoiceLineRequest : pb::IMessage<ElectronicInvoiceLineRequest> {
    private static readonly pb::MessageParser<ElectronicInvoiceLineRequest> _parser = new pb::MessageParser<ElectronicInvoiceLineRequest>(() => new ElectronicInvoiceLineRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElectronicInvoiceLineRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Asgt.Jester.V1Alpha1.JesterReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectronicInvoiceLineRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectronicInvoiceLineRequest(ElectronicInvoiceLineRequest other) : this() {
      inputs_ = other.inputs_.Clone();
      datasetName_ = other.datasetName_;
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectronicInvoiceLineRequest Clone() {
      return new ElectronicInvoiceLineRequest(this);
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Asgt.Jester.V1Alpha1.ElectronicInvoiceLineRequest.Types.Data> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(10, global::Asgt.Jester.V1Alpha1.ElectronicInvoiceLineRequest.Types.Data.Parser);
    private readonly pbc::RepeatedField<global::Asgt.Jester.V1Alpha1.ElectronicInvoiceLineRequest.Types.Data> inputs_ = new pbc::RepeatedField<global::Asgt.Jester.V1Alpha1.ElectronicInvoiceLineRequest.Types.Data>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Asgt.Jester.V1Alpha1.ElectronicInvoiceLineRequest.Types.Data> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "dataset_name" field.</summary>
    public const int DatasetNameFieldNumber = 2;
    private string datasetName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetName {
      get { return datasetName_; }
      set {
        datasetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::Asgt.Jester.V1Alpha1.SuggestionOptions options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Asgt.Jester.V1Alpha1.SuggestionOptions Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElectronicInvoiceLineRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElectronicInvoiceLineRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!inputs_.Equals(other.inputs_)) return false;
      if (DatasetName != other.DatasetName) return false;
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= inputs_.GetHashCode();
      if (DatasetName.Length != 0) hash ^= DatasetName.GetHashCode();
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      inputs_.WriteTo(output, _repeated_inputs_codec);
      if (DatasetName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatasetName);
      }
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      if (DatasetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetName);
      }
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElectronicInvoiceLineRequest other) {
      if (other == null) {
        return;
      }
      inputs_.Add(other.inputs_);
      if (other.DatasetName.Length != 0) {
        DatasetName = other.DatasetName;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          options_ = new global::Asgt.Jester.V1Alpha1.SuggestionOptions();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
          case 18: {
            DatasetName = input.ReadString();
            break;
          }
          case 26: {
            if (options_ == null) {
              options_ = new global::Asgt.Jester.V1Alpha1.SuggestionOptions();
            }
            input.ReadMessage(options_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ElectronicInvoiceLineRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Data : pb::IMessage<Data> {
        private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Data> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Asgt.Jester.V1Alpha1.ElectronicInvoiceLineRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Data() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Data(Data other) : this() {
          issueDate_ = other.issueDate_ != null ? other.issueDate_.Clone() : null;
          Currency = other.Currency;
          supplierId_ = other.supplierId_;
          SupplierName = other.SupplierName;
          SupplierGlobalId = other.SupplierGlobalId;
          CustomerRef = other.CustomerRef;
          Total = other.Total;
          LineText = other.LineText;
          LineId = other.LineId;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Data Clone() {
          return new Data(this);
        }

        /// <summary>Field number for the "issue_date" field.</summary>
        public const int IssueDateFieldNumber = 1;
        private global::Google.Protobuf.WellKnownTypes.Timestamp issueDate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp IssueDate {
          get { return issueDate_; }
          set {
            issueDate_ = value;
          }
        }

        /// <summary>Field number for the "currency" field.</summary>
        public const int CurrencyFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _single_currency_codec = pb::FieldCodec.ForClassWrapper<string>(18);
        private string currency_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Currency {
          get { return currency_; }
          set {
            currency_ = value;
          }
        }

        /// <summary>Field number for the "supplier_id" field.</summary>
        public const int SupplierIdFieldNumber = 3;
        private string supplierId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SupplierId {
          get { return supplierId_; }
          set {
            supplierId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "supplier_name" field.</summary>
        public const int SupplierNameFieldNumber = 4;
        private static readonly pb::FieldCodec<string> _single_supplierName_codec = pb::FieldCodec.ForClassWrapper<string>(34);
        private string supplierName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SupplierName {
          get { return supplierName_; }
          set {
            supplierName_ = value;
          }
        }

        /// <summary>Field number for the "supplier_global_id" field.</summary>
        public const int SupplierGlobalIdFieldNumber = 5;
        private static readonly pb::FieldCodec<string> _single_supplierGlobalId_codec = pb::FieldCodec.ForClassWrapper<string>(42);
        private string supplierGlobalId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SupplierGlobalId {
          get { return supplierGlobalId_; }
          set {
            supplierGlobalId_ = value;
          }
        }

        /// <summary>Field number for the "customer_ref" field.</summary>
        public const int CustomerRefFieldNumber = 6;
        private static readonly pb::FieldCodec<string> _single_customerRef_codec = pb::FieldCodec.ForClassWrapper<string>(50);
        private string customerRef_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CustomerRef {
          get { return customerRef_; }
          set {
            customerRef_ = value;
          }
        }

        /// <summary>Field number for the "total" field.</summary>
        public const int TotalFieldNumber = 7;
        private static readonly pb::FieldCodec<float?> _single_total_codec = pb::FieldCodec.ForStructWrapper<float>(58);
        private float? total_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float? Total {
          get { return total_; }
          set {
            total_ = value;
          }
        }

        /// <summary>Field number for the "line_text" field.</summary>
        public const int LineTextFieldNumber = 8;
        private static readonly pb::FieldCodec<string> _single_lineText_codec = pb::FieldCodec.ForClassWrapper<string>(66);
        private string lineText_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LineText {
          get { return lineText_; }
          set {
            lineText_ = value;
          }
        }

        /// <summary>Field number for the "line_id" field.</summary>
        public const int LineIdFieldNumber = 9;
        private static readonly pb::FieldCodec<string> _single_lineId_codec = pb::FieldCodec.ForClassWrapper<string>(74);
        private string lineId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LineId {
          get { return lineId_; }
          set {
            lineId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Data);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Data other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(IssueDate, other.IssueDate)) return false;
          if (Currency != other.Currency) return false;
          if (SupplierId != other.SupplierId) return false;
          if (SupplierName != other.SupplierName) return false;
          if (SupplierGlobalId != other.SupplierGlobalId) return false;
          if (CustomerRef != other.CustomerRef) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Total, other.Total)) return false;
          if (LineText != other.LineText) return false;
          if (LineId != other.LineId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (issueDate_ != null) hash ^= IssueDate.GetHashCode();
          if (currency_ != null) hash ^= Currency.GetHashCode();
          if (SupplierId.Length != 0) hash ^= SupplierId.GetHashCode();
          if (supplierName_ != null) hash ^= SupplierName.GetHashCode();
          if (supplierGlobalId_ != null) hash ^= SupplierGlobalId.GetHashCode();
          if (customerRef_ != null) hash ^= CustomerRef.GetHashCode();
          if (total_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Total);
          if (lineText_ != null) hash ^= LineText.GetHashCode();
          if (lineId_ != null) hash ^= LineId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (issueDate_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(IssueDate);
          }
          if (currency_ != null) {
            _single_currency_codec.WriteTagAndValue(output, Currency);
          }
          if (SupplierId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(SupplierId);
          }
          if (supplierName_ != null) {
            _single_supplierName_codec.WriteTagAndValue(output, SupplierName);
          }
          if (supplierGlobalId_ != null) {
            _single_supplierGlobalId_codec.WriteTagAndValue(output, SupplierGlobalId);
          }
          if (customerRef_ != null) {
            _single_customerRef_codec.WriteTagAndValue(output, CustomerRef);
          }
          if (total_ != null) {
            _single_total_codec.WriteTagAndValue(output, Total);
          }
          if (lineText_ != null) {
            _single_lineText_codec.WriteTagAndValue(output, LineText);
          }
          if (lineId_ != null) {
            _single_lineId_codec.WriteTagAndValue(output, LineId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (issueDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(IssueDate);
          }
          if (currency_ != null) {
            size += _single_currency_codec.CalculateSizeWithTag(Currency);
          }
          if (SupplierId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SupplierId);
          }
          if (supplierName_ != null) {
            size += _single_supplierName_codec.CalculateSizeWithTag(SupplierName);
          }
          if (supplierGlobalId_ != null) {
            size += _single_supplierGlobalId_codec.CalculateSizeWithTag(SupplierGlobalId);
          }
          if (customerRef_ != null) {
            size += _single_customerRef_codec.CalculateSizeWithTag(CustomerRef);
          }
          if (total_ != null) {
            size += _single_total_codec.CalculateSizeWithTag(Total);
          }
          if (lineText_ != null) {
            size += _single_lineText_codec.CalculateSizeWithTag(LineText);
          }
          if (lineId_ != null) {
            size += _single_lineId_codec.CalculateSizeWithTag(LineId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Data other) {
          if (other == null) {
            return;
          }
          if (other.issueDate_ != null) {
            if (issueDate_ == null) {
              issueDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            IssueDate.MergeFrom(other.IssueDate);
          }
          if (other.currency_ != null) {
            if (currency_ == null || other.Currency != "") {
              Currency = other.Currency;
            }
          }
          if (other.SupplierId.Length != 0) {
            SupplierId = other.SupplierId;
          }
          if (other.supplierName_ != null) {
            if (supplierName_ == null || other.SupplierName != "") {
              SupplierName = other.SupplierName;
            }
          }
          if (other.supplierGlobalId_ != null) {
            if (supplierGlobalId_ == null || other.SupplierGlobalId != "") {
              SupplierGlobalId = other.SupplierGlobalId;
            }
          }
          if (other.customerRef_ != null) {
            if (customerRef_ == null || other.CustomerRef != "") {
              CustomerRef = other.CustomerRef;
            }
          }
          if (other.total_ != null) {
            if (total_ == null || other.Total != 0F) {
              Total = other.Total;
            }
          }
          if (other.lineText_ != null) {
            if (lineText_ == null || other.LineText != "") {
              LineText = other.LineText;
            }
          }
          if (other.lineId_ != null) {
            if (lineId_ == null || other.LineId != "") {
              LineId = other.LineId;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (issueDate_ == null) {
                  issueDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(issueDate_);
                break;
              }
              case 18: {
                string value = _single_currency_codec.Read(input);
                if (currency_ == null || value != "") {
                  Currency = value;
                }
                break;
              }
              case 26: {
                SupplierId = input.ReadString();
                break;
              }
              case 34: {
                string value = _single_supplierName_codec.Read(input);
                if (supplierName_ == null || value != "") {
                  SupplierName = value;
                }
                break;
              }
              case 42: {
                string value = _single_supplierGlobalId_codec.Read(input);
                if (supplierGlobalId_ == null || value != "") {
                  SupplierGlobalId = value;
                }
                break;
              }
              case 50: {
                string value = _single_customerRef_codec.Read(input);
                if (customerRef_ == null || value != "") {
                  CustomerRef = value;
                }
                break;
              }
              case 58: {
                float? value = _single_total_codec.Read(input);
                if (total_ == null || value != 0F) {
                  Total = value;
                }
                break;
              }
              case 66: {
                string value = _single_lineText_codec.Read(input);
                if (lineText_ == null || value != "") {
                  LineText = value;
                }
                break;
              }
              case 74: {
                string value = _single_lineId_codec.Read(input);
                if (lineId_ == null || value != "") {
                  LineId = value;
                }
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Bank
  /// </summary>
  public sealed partial class BankRequest : pb::IMessage<BankRequest> {
    private static readonly pb::MessageParser<BankRequest> _parser = new pb::MessageParser<BankRequest>(() => new BankRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BankRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Asgt.Jester.V1Alpha1.JesterReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BankRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BankRequest(BankRequest other) : this() {
      inputs_ = other.inputs_.Clone();
      datasetName_ = other.datasetName_;
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BankRequest Clone() {
      return new BankRequest(this);
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Asgt.Jester.V1Alpha1.BankRequest.Types.Data> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(10, global::Asgt.Jester.V1Alpha1.BankRequest.Types.Data.Parser);
    private readonly pbc::RepeatedField<global::Asgt.Jester.V1Alpha1.BankRequest.Types.Data> inputs_ = new pbc::RepeatedField<global::Asgt.Jester.V1Alpha1.BankRequest.Types.Data>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Asgt.Jester.V1Alpha1.BankRequest.Types.Data> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "dataset_name" field.</summary>
    public const int DatasetNameFieldNumber = 2;
    private string datasetName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetName {
      get { return datasetName_; }
      set {
        datasetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::Asgt.Jester.V1Alpha1.SuggestionOptions options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Asgt.Jester.V1Alpha1.SuggestionOptions Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BankRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BankRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!inputs_.Equals(other.inputs_)) return false;
      if (DatasetName != other.DatasetName) return false;
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= inputs_.GetHashCode();
      if (DatasetName.Length != 0) hash ^= DatasetName.GetHashCode();
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      inputs_.WriteTo(output, _repeated_inputs_codec);
      if (DatasetName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatasetName);
      }
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      if (DatasetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetName);
      }
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BankRequest other) {
      if (other == null) {
        return;
      }
      inputs_.Add(other.inputs_);
      if (other.DatasetName.Length != 0) {
        DatasetName = other.DatasetName;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          options_ = new global::Asgt.Jester.V1Alpha1.SuggestionOptions();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
          case 18: {
            DatasetName = input.ReadString();
            break;
          }
          case 26: {
            if (options_ == null) {
              options_ = new global::Asgt.Jester.V1Alpha1.SuggestionOptions();
            }
            input.ReadMessage(options_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BankRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Data : pb::IMessage<Data> {
        private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Data> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Asgt.Jester.V1Alpha1.BankRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Data() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Data(Data other) : this() {
          accountNumber_ = other.accountNumber_;
          Amount = other.Amount;
          entryType_ = other.entryType_;
          text_ = other.text_;
          timeStamp_ = other.timeStamp_ != null ? other.timeStamp_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Data Clone() {
          return new Data(this);
        }

        /// <summary>Field number for the "account_number" field.</summary>
        public const int AccountNumberFieldNumber = 1;
        private int accountNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AccountNumber {
          get { return accountNumber_; }
          set {
            accountNumber_ = value;
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private static readonly pb::FieldCodec<double?> _single_amount_codec = pb::FieldCodec.ForStructWrapper<double>(18);
        private double? amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        /// <summary>Field number for the "entry_type" field.</summary>
        public const int EntryTypeFieldNumber = 3;
        private int entryType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EntryType {
          get { return entryType_; }
          set {
            entryType_ = value;
          }
        }

        /// <summary>Field number for the "text" field.</summary>
        public const int TextFieldNumber = 4;
        private string text_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Text {
          get { return text_; }
          set {
            text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "time_stamp" field.</summary>
        public const int TimeStampFieldNumber = 5;
        private global::Google.Protobuf.WellKnownTypes.Timestamp timeStamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp TimeStamp {
          get { return timeStamp_; }
          set {
            timeStamp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Data);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Data other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountNumber != other.AccountNumber) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Amount, other.Amount)) return false;
          if (EntryType != other.EntryType) return false;
          if (Text != other.Text) return false;
          if (!object.Equals(TimeStamp, other.TimeStamp)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AccountNumber != 0) hash ^= AccountNumber.GetHashCode();
          if (amount_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Amount);
          if (EntryType != 0) hash ^= EntryType.GetHashCode();
          if (Text.Length != 0) hash ^= Text.GetHashCode();
          if (timeStamp_ != null) hash ^= TimeStamp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AccountNumber != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(AccountNumber);
          }
          if (amount_ != null) {
            _single_amount_codec.WriteTagAndValue(output, Amount);
          }
          if (EntryType != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(EntryType);
          }
          if (Text.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Text);
          }
          if (timeStamp_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(TimeStamp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AccountNumber != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountNumber);
          }
          if (amount_ != null) {
            size += _single_amount_codec.CalculateSizeWithTag(Amount);
          }
          if (EntryType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntryType);
          }
          if (Text.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
          }
          if (timeStamp_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeStamp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Data other) {
          if (other == null) {
            return;
          }
          if (other.AccountNumber != 0) {
            AccountNumber = other.AccountNumber;
          }
          if (other.amount_ != null) {
            if (amount_ == null || other.Amount != 0D) {
              Amount = other.Amount;
            }
          }
          if (other.EntryType != 0) {
            EntryType = other.EntryType;
          }
          if (other.Text.Length != 0) {
            Text = other.Text;
          }
          if (other.timeStamp_ != null) {
            if (timeStamp_ == null) {
              timeStamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            TimeStamp.MergeFrom(other.TimeStamp);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AccountNumber = input.ReadInt32();
                break;
              }
              case 18: {
                double? value = _single_amount_codec.Read(input);
                if (amount_ == null || value != 0D) {
                  Amount = value;
                }
                break;
              }
              case 24: {
                EntryType = input.ReadInt32();
                break;
              }
              case 34: {
                Text = input.ReadString();
                break;
              }
              case 42: {
                if (timeStamp_ == null) {
                  timeStamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(timeStamp_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
