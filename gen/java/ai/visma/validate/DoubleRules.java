// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: validate/validate.proto

package ai.visma.validate;

/**
 * <pre>
 * DoubleRules describes the constraints applied to `double` values
 * </pre>
 *
 * Protobuf type {@code validate.DoubleRules}
 */
public final class DoubleRules extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:validate.DoubleRules)
    DoubleRulesOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DoubleRules.newBuilder() to construct.
  private DoubleRules(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DoubleRules() {
    in_ = emptyDoubleList();
    notIn_ = emptyDoubleList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DoubleRules();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return ai.visma.validate.ValidateProto.internal_static_validate_DoubleRules_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return ai.visma.validate.ValidateProto.internal_static_validate_DoubleRules_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ai.visma.validate.DoubleRules.class, ai.visma.validate.DoubleRules.Builder.class);
  }

  private int bitField0_;
  public static final int CONST_FIELD_NUMBER = 1;
  private double const_ = 0D;
  /**
   * <pre>
   * Const specifies that this field must be exactly the specified value
   * </pre>
   *
   * <code>optional double const = 1 [json_name = "const"];</code>
   * @return Whether the const field is set.
   */
  @java.lang.Override
  public boolean hasConst() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Const specifies that this field must be exactly the specified value
   * </pre>
   *
   * <code>optional double const = 1 [json_name = "const"];</code>
   * @return The const.
   */
  @java.lang.Override
  public double getConst() {
    return const_;
  }

  public static final int LT_FIELD_NUMBER = 2;
  private double lt_ = 0D;
  /**
   * <pre>
   * Lt specifies that this field must be less than the specified value,
   * exclusive
   * </pre>
   *
   * <code>optional double lt = 2 [json_name = "lt"];</code>
   * @return Whether the lt field is set.
   */
  @java.lang.Override
  public boolean hasLt() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Lt specifies that this field must be less than the specified value,
   * exclusive
   * </pre>
   *
   * <code>optional double lt = 2 [json_name = "lt"];</code>
   * @return The lt.
   */
  @java.lang.Override
  public double getLt() {
    return lt_;
  }

  public static final int LTE_FIELD_NUMBER = 3;
  private double lte_ = 0D;
  /**
   * <pre>
   * Lte specifies that this field must be less than or equal to the
   * specified value, inclusive
   * </pre>
   *
   * <code>optional double lte = 3 [json_name = "lte"];</code>
   * @return Whether the lte field is set.
   */
  @java.lang.Override
  public boolean hasLte() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Lte specifies that this field must be less than or equal to the
   * specified value, inclusive
   * </pre>
   *
   * <code>optional double lte = 3 [json_name = "lte"];</code>
   * @return The lte.
   */
  @java.lang.Override
  public double getLte() {
    return lte_;
  }

  public static final int GT_FIELD_NUMBER = 4;
  private double gt_ = 0D;
  /**
   * <pre>
   * Gt specifies that this field must be greater than the specified value,
   * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
   * range is reversed.
   * </pre>
   *
   * <code>optional double gt = 4 [json_name = "gt"];</code>
   * @return Whether the gt field is set.
   */
  @java.lang.Override
  public boolean hasGt() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Gt specifies that this field must be greater than the specified value,
   * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
   * range is reversed.
   * </pre>
   *
   * <code>optional double gt = 4 [json_name = "gt"];</code>
   * @return The gt.
   */
  @java.lang.Override
  public double getGt() {
    return gt_;
  }

  public static final int GTE_FIELD_NUMBER = 5;
  private double gte_ = 0D;
  /**
   * <pre>
   * Gte specifies that this field must be greater than or equal to the
   * specified value, inclusive. If the value of Gte is larger than a
   * specified Lt or Lte, the range is reversed.
   * </pre>
   *
   * <code>optional double gte = 5 [json_name = "gte"];</code>
   * @return Whether the gte field is set.
   */
  @java.lang.Override
  public boolean hasGte() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * Gte specifies that this field must be greater than or equal to the
   * specified value, inclusive. If the value of Gte is larger than a
   * specified Lt or Lte, the range is reversed.
   * </pre>
   *
   * <code>optional double gte = 5 [json_name = "gte"];</code>
   * @return The gte.
   */
  @java.lang.Override
  public double getGte() {
    return gte_;
  }

  public static final int IN_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.DoubleList in_;
  /**
   * <pre>
   * In specifies that this field must be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated double in = 6 [json_name = "in"];</code>
   * @return A list containing the in.
   */
  @java.lang.Override
  public java.util.List<java.lang.Double>
      getInList() {
    return in_;
  }
  /**
   * <pre>
   * In specifies that this field must be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated double in = 6 [json_name = "in"];</code>
   * @return The count of in.
   */
  public int getInCount() {
    return in_.size();
  }
  /**
   * <pre>
   * In specifies that this field must be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated double in = 6 [json_name = "in"];</code>
   * @param index The index of the element to return.
   * @return The in at the given index.
   */
  public double getIn(int index) {
    return in_.getDouble(index);
  }

  public static final int NOT_IN_FIELD_NUMBER = 7;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.DoubleList notIn_;
  /**
   * <pre>
   * NotIn specifies that this field cannot be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated double not_in = 7 [json_name = "notIn"];</code>
   * @return A list containing the notIn.
   */
  @java.lang.Override
  public java.util.List<java.lang.Double>
      getNotInList() {
    return notIn_;
  }
  /**
   * <pre>
   * NotIn specifies that this field cannot be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated double not_in = 7 [json_name = "notIn"];</code>
   * @return The count of notIn.
   */
  public int getNotInCount() {
    return notIn_.size();
  }
  /**
   * <pre>
   * NotIn specifies that this field cannot be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated double not_in = 7 [json_name = "notIn"];</code>
   * @param index The index of the element to return.
   * @return The notIn at the given index.
   */
  public double getNotIn(int index) {
    return notIn_.getDouble(index);
  }

  public static final int IGNORE_EMPTY_FIELD_NUMBER = 8;
  private boolean ignoreEmpty_ = false;
  /**
   * <pre>
   * IgnoreEmpty specifies that the validation rules of this field should be
   * evaluated only if the field is not empty
   * </pre>
   *
   * <code>optional bool ignore_empty = 8 [json_name = "ignoreEmpty"];</code>
   * @return Whether the ignoreEmpty field is set.
   */
  @java.lang.Override
  public boolean hasIgnoreEmpty() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * IgnoreEmpty specifies that the validation rules of this field should be
   * evaluated only if the field is not empty
   * </pre>
   *
   * <code>optional bool ignore_empty = 8 [json_name = "ignoreEmpty"];</code>
   * @return The ignoreEmpty.
   */
  @java.lang.Override
  public boolean getIgnoreEmpty() {
    return ignoreEmpty_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeDouble(1, const_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeDouble(2, lt_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeDouble(3, lte_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeDouble(4, gt_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeDouble(5, gte_);
    }
    for (int i = 0; i < in_.size(); i++) {
      output.writeDouble(6, in_.getDouble(i));
    }
    for (int i = 0; i < notIn_.size(); i++) {
      output.writeDouble(7, notIn_.getDouble(i));
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      output.writeBool(8, ignoreEmpty_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(1, const_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(2, lt_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(3, lte_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(4, gt_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(5, gte_);
    }
    {
      int dataSize = 0;
      dataSize = 8 * getInList().size();
      size += dataSize;
      size += 1 * getInList().size();
    }
    {
      int dataSize = 0;
      dataSize = 8 * getNotInList().size();
      size += dataSize;
      size += 1 * getNotInList().size();
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, ignoreEmpty_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ai.visma.validate.DoubleRules)) {
      return super.equals(obj);
    }
    ai.visma.validate.DoubleRules other = (ai.visma.validate.DoubleRules) obj;

    if (hasConst() != other.hasConst()) return false;
    if (hasConst()) {
      if (java.lang.Double.doubleToLongBits(getConst())
          != java.lang.Double.doubleToLongBits(
              other.getConst())) return false;
    }
    if (hasLt() != other.hasLt()) return false;
    if (hasLt()) {
      if (java.lang.Double.doubleToLongBits(getLt())
          != java.lang.Double.doubleToLongBits(
              other.getLt())) return false;
    }
    if (hasLte() != other.hasLte()) return false;
    if (hasLte()) {
      if (java.lang.Double.doubleToLongBits(getLte())
          != java.lang.Double.doubleToLongBits(
              other.getLte())) return false;
    }
    if (hasGt() != other.hasGt()) return false;
    if (hasGt()) {
      if (java.lang.Double.doubleToLongBits(getGt())
          != java.lang.Double.doubleToLongBits(
              other.getGt())) return false;
    }
    if (hasGte() != other.hasGte()) return false;
    if (hasGte()) {
      if (java.lang.Double.doubleToLongBits(getGte())
          != java.lang.Double.doubleToLongBits(
              other.getGte())) return false;
    }
    if (!getInList()
        .equals(other.getInList())) return false;
    if (!getNotInList()
        .equals(other.getNotInList())) return false;
    if (hasIgnoreEmpty() != other.hasIgnoreEmpty()) return false;
    if (hasIgnoreEmpty()) {
      if (getIgnoreEmpty()
          != other.getIgnoreEmpty()) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasConst()) {
      hash = (37 * hash) + CONST_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getConst()));
    }
    if (hasLt()) {
      hash = (37 * hash) + LT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getLt()));
    }
    if (hasLte()) {
      hash = (37 * hash) + LTE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getLte()));
    }
    if (hasGt()) {
      hash = (37 * hash) + GT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getGt()));
    }
    if (hasGte()) {
      hash = (37 * hash) + GTE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getGte()));
    }
    if (getInCount() > 0) {
      hash = (37 * hash) + IN_FIELD_NUMBER;
      hash = (53 * hash) + getInList().hashCode();
    }
    if (getNotInCount() > 0) {
      hash = (37 * hash) + NOT_IN_FIELD_NUMBER;
      hash = (53 * hash) + getNotInList().hashCode();
    }
    if (hasIgnoreEmpty()) {
      hash = (37 * hash) + IGNORE_EMPTY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIgnoreEmpty());
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ai.visma.validate.DoubleRules parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.visma.validate.DoubleRules parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.visma.validate.DoubleRules parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.visma.validate.DoubleRules parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.visma.validate.DoubleRules parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.visma.validate.DoubleRules parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.visma.validate.DoubleRules parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ai.visma.validate.DoubleRules parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static ai.visma.validate.DoubleRules parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static ai.visma.validate.DoubleRules parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ai.visma.validate.DoubleRules parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ai.visma.validate.DoubleRules parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ai.visma.validate.DoubleRules prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * DoubleRules describes the constraints applied to `double` values
   * </pre>
   *
   * Protobuf type {@code validate.DoubleRules}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:validate.DoubleRules)
      ai.visma.validate.DoubleRulesOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ai.visma.validate.ValidateProto.internal_static_validate_DoubleRules_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ai.visma.validate.ValidateProto.internal_static_validate_DoubleRules_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ai.visma.validate.DoubleRules.class, ai.visma.validate.DoubleRules.Builder.class);
    }

    // Construct using ai.visma.validate.DoubleRules.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      const_ = 0D;
      lt_ = 0D;
      lte_ = 0D;
      gt_ = 0D;
      gte_ = 0D;
      in_ = emptyDoubleList();
      notIn_ = emptyDoubleList();
      ignoreEmpty_ = false;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return ai.visma.validate.ValidateProto.internal_static_validate_DoubleRules_descriptor;
    }

    @java.lang.Override
    public ai.visma.validate.DoubleRules getDefaultInstanceForType() {
      return ai.visma.validate.DoubleRules.getDefaultInstance();
    }

    @java.lang.Override
    public ai.visma.validate.DoubleRules build() {
      ai.visma.validate.DoubleRules result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public ai.visma.validate.DoubleRules buildPartial() {
      ai.visma.validate.DoubleRules result = new ai.visma.validate.DoubleRules(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(ai.visma.validate.DoubleRules result) {
      if (((bitField0_ & 0x00000020) != 0)) {
        in_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000020);
      }
      result.in_ = in_;
      if (((bitField0_ & 0x00000040) != 0)) {
        notIn_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000040);
      }
      result.notIn_ = notIn_;
    }

    private void buildPartial0(ai.visma.validate.DoubleRules result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.const_ = const_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.lt_ = lt_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.lte_ = lte_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.gt_ = gt_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.gte_ = gte_;
        to_bitField0_ |= 0x00000010;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.ignoreEmpty_ = ignoreEmpty_;
        to_bitField0_ |= 0x00000020;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ai.visma.validate.DoubleRules) {
        return mergeFrom((ai.visma.validate.DoubleRules)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ai.visma.validate.DoubleRules other) {
      if (other == ai.visma.validate.DoubleRules.getDefaultInstance()) return this;
      if (other.hasConst()) {
        setConst(other.getConst());
      }
      if (other.hasLt()) {
        setLt(other.getLt());
      }
      if (other.hasLte()) {
        setLte(other.getLte());
      }
      if (other.hasGt()) {
        setGt(other.getGt());
      }
      if (other.hasGte()) {
        setGte(other.getGte());
      }
      if (!other.in_.isEmpty()) {
        if (in_.isEmpty()) {
          in_ = other.in_;
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          ensureInIsMutable();
          in_.addAll(other.in_);
        }
        onChanged();
      }
      if (!other.notIn_.isEmpty()) {
        if (notIn_.isEmpty()) {
          notIn_ = other.notIn_;
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          ensureNotInIsMutable();
          notIn_.addAll(other.notIn_);
        }
        onChanged();
      }
      if (other.hasIgnoreEmpty()) {
        setIgnoreEmpty(other.getIgnoreEmpty());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {
              const_ = input.readDouble();
              bitField0_ |= 0x00000001;
              break;
            } // case 9
            case 17: {
              lt_ = input.readDouble();
              bitField0_ |= 0x00000002;
              break;
            } // case 17
            case 25: {
              lte_ = input.readDouble();
              bitField0_ |= 0x00000004;
              break;
            } // case 25
            case 33: {
              gt_ = input.readDouble();
              bitField0_ |= 0x00000008;
              break;
            } // case 33
            case 41: {
              gte_ = input.readDouble();
              bitField0_ |= 0x00000010;
              break;
            } // case 41
            case 49: {
              double v = input.readDouble();
              ensureInIsMutable();
              in_.addDouble(v);
              break;
            } // case 49
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureInIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                in_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            } // case 50
            case 57: {
              double v = input.readDouble();
              ensureNotInIsMutable();
              notIn_.addDouble(v);
              break;
            } // case 57
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureNotInIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                notIn_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            } // case 58
            case 64: {
              ignoreEmpty_ = input.readBool();
              bitField0_ |= 0x00000080;
              break;
            } // case 64
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private double const_ ;
    /**
     * <pre>
     * Const specifies that this field must be exactly the specified value
     * </pre>
     *
     * <code>optional double const = 1 [json_name = "const"];</code>
     * @return Whether the const field is set.
     */
    @java.lang.Override
    public boolean hasConst() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Const specifies that this field must be exactly the specified value
     * </pre>
     *
     * <code>optional double const = 1 [json_name = "const"];</code>
     * @return The const.
     */
    @java.lang.Override
    public double getConst() {
      return const_;
    }
    /**
     * <pre>
     * Const specifies that this field must be exactly the specified value
     * </pre>
     *
     * <code>optional double const = 1 [json_name = "const"];</code>
     * @param value The const to set.
     * @return This builder for chaining.
     */
    public Builder setConst(double value) {

      const_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Const specifies that this field must be exactly the specified value
     * </pre>
     *
     * <code>optional double const = 1 [json_name = "const"];</code>
     * @return This builder for chaining.
     */
    public Builder clearConst() {
      bitField0_ = (bitField0_ & ~0x00000001);
      const_ = 0D;
      onChanged();
      return this;
    }

    private double lt_ ;
    /**
     * <pre>
     * Lt specifies that this field must be less than the specified value,
     * exclusive
     * </pre>
     *
     * <code>optional double lt = 2 [json_name = "lt"];</code>
     * @return Whether the lt field is set.
     */
    @java.lang.Override
    public boolean hasLt() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Lt specifies that this field must be less than the specified value,
     * exclusive
     * </pre>
     *
     * <code>optional double lt = 2 [json_name = "lt"];</code>
     * @return The lt.
     */
    @java.lang.Override
    public double getLt() {
      return lt_;
    }
    /**
     * <pre>
     * Lt specifies that this field must be less than the specified value,
     * exclusive
     * </pre>
     *
     * <code>optional double lt = 2 [json_name = "lt"];</code>
     * @param value The lt to set.
     * @return This builder for chaining.
     */
    public Builder setLt(double value) {

      lt_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Lt specifies that this field must be less than the specified value,
     * exclusive
     * </pre>
     *
     * <code>optional double lt = 2 [json_name = "lt"];</code>
     * @return This builder for chaining.
     */
    public Builder clearLt() {
      bitField0_ = (bitField0_ & ~0x00000002);
      lt_ = 0D;
      onChanged();
      return this;
    }

    private double lte_ ;
    /**
     * <pre>
     * Lte specifies that this field must be less than or equal to the
     * specified value, inclusive
     * </pre>
     *
     * <code>optional double lte = 3 [json_name = "lte"];</code>
     * @return Whether the lte field is set.
     */
    @java.lang.Override
    public boolean hasLte() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Lte specifies that this field must be less than or equal to the
     * specified value, inclusive
     * </pre>
     *
     * <code>optional double lte = 3 [json_name = "lte"];</code>
     * @return The lte.
     */
    @java.lang.Override
    public double getLte() {
      return lte_;
    }
    /**
     * <pre>
     * Lte specifies that this field must be less than or equal to the
     * specified value, inclusive
     * </pre>
     *
     * <code>optional double lte = 3 [json_name = "lte"];</code>
     * @param value The lte to set.
     * @return This builder for chaining.
     */
    public Builder setLte(double value) {

      lte_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Lte specifies that this field must be less than or equal to the
     * specified value, inclusive
     * </pre>
     *
     * <code>optional double lte = 3 [json_name = "lte"];</code>
     * @return This builder for chaining.
     */
    public Builder clearLte() {
      bitField0_ = (bitField0_ & ~0x00000004);
      lte_ = 0D;
      onChanged();
      return this;
    }

    private double gt_ ;
    /**
     * <pre>
     * Gt specifies that this field must be greater than the specified value,
     * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
     * range is reversed.
     * </pre>
     *
     * <code>optional double gt = 4 [json_name = "gt"];</code>
     * @return Whether the gt field is set.
     */
    @java.lang.Override
    public boolean hasGt() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Gt specifies that this field must be greater than the specified value,
     * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
     * range is reversed.
     * </pre>
     *
     * <code>optional double gt = 4 [json_name = "gt"];</code>
     * @return The gt.
     */
    @java.lang.Override
    public double getGt() {
      return gt_;
    }
    /**
     * <pre>
     * Gt specifies that this field must be greater than the specified value,
     * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
     * range is reversed.
     * </pre>
     *
     * <code>optional double gt = 4 [json_name = "gt"];</code>
     * @param value The gt to set.
     * @return This builder for chaining.
     */
    public Builder setGt(double value) {

      gt_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Gt specifies that this field must be greater than the specified value,
     * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
     * range is reversed.
     * </pre>
     *
     * <code>optional double gt = 4 [json_name = "gt"];</code>
     * @return This builder for chaining.
     */
    public Builder clearGt() {
      bitField0_ = (bitField0_ & ~0x00000008);
      gt_ = 0D;
      onChanged();
      return this;
    }

    private double gte_ ;
    /**
     * <pre>
     * Gte specifies that this field must be greater than or equal to the
     * specified value, inclusive. If the value of Gte is larger than a
     * specified Lt or Lte, the range is reversed.
     * </pre>
     *
     * <code>optional double gte = 5 [json_name = "gte"];</code>
     * @return Whether the gte field is set.
     */
    @java.lang.Override
    public boolean hasGte() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Gte specifies that this field must be greater than or equal to the
     * specified value, inclusive. If the value of Gte is larger than a
     * specified Lt or Lte, the range is reversed.
     * </pre>
     *
     * <code>optional double gte = 5 [json_name = "gte"];</code>
     * @return The gte.
     */
    @java.lang.Override
    public double getGte() {
      return gte_;
    }
    /**
     * <pre>
     * Gte specifies that this field must be greater than or equal to the
     * specified value, inclusive. If the value of Gte is larger than a
     * specified Lt or Lte, the range is reversed.
     * </pre>
     *
     * <code>optional double gte = 5 [json_name = "gte"];</code>
     * @param value The gte to set.
     * @return This builder for chaining.
     */
    public Builder setGte(double value) {

      gte_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Gte specifies that this field must be greater than or equal to the
     * specified value, inclusive. If the value of Gte is larger than a
     * specified Lt or Lte, the range is reversed.
     * </pre>
     *
     * <code>optional double gte = 5 [json_name = "gte"];</code>
     * @return This builder for chaining.
     */
    public Builder clearGte() {
      bitField0_ = (bitField0_ & ~0x00000010);
      gte_ = 0D;
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.DoubleList in_ = emptyDoubleList();
    private void ensureInIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        in_ = mutableCopy(in_);
        bitField0_ |= 0x00000020;
      }
    }
    /**
     * <pre>
     * In specifies that this field must be equal to one of the specified
     * values
     * </pre>
     *
     * <code>repeated double in = 6 [json_name = "in"];</code>
     * @return A list containing the in.
     */
    public java.util.List<java.lang.Double>
        getInList() {
      return ((bitField0_ & 0x00000020) != 0) ?
               java.util.Collections.unmodifiableList(in_) : in_;
    }
    /**
     * <pre>
     * In specifies that this field must be equal to one of the specified
     * values
     * </pre>
     *
     * <code>repeated double in = 6 [json_name = "in"];</code>
     * @return The count of in.
     */
    public int getInCount() {
      return in_.size();
    }
    /**
     * <pre>
     * In specifies that this field must be equal to one of the specified
     * values
     * </pre>
     *
     * <code>repeated double in = 6 [json_name = "in"];</code>
     * @param index The index of the element to return.
     * @return The in at the given index.
     */
    public double getIn(int index) {
      return in_.getDouble(index);
    }
    /**
     * <pre>
     * In specifies that this field must be equal to one of the specified
     * values
     * </pre>
     *
     * <code>repeated double in = 6 [json_name = "in"];</code>
     * @param index The index to set the value at.
     * @param value The in to set.
     * @return This builder for chaining.
     */
    public Builder setIn(
        int index, double value) {

      ensureInIsMutable();
      in_.setDouble(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * In specifies that this field must be equal to one of the specified
     * values
     * </pre>
     *
     * <code>repeated double in = 6 [json_name = "in"];</code>
     * @param value The in to add.
     * @return This builder for chaining.
     */
    public Builder addIn(double value) {

      ensureInIsMutable();
      in_.addDouble(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * In specifies that this field must be equal to one of the specified
     * values
     * </pre>
     *
     * <code>repeated double in = 6 [json_name = "in"];</code>
     * @param values The in to add.
     * @return This builder for chaining.
     */
    public Builder addAllIn(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureInIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, in_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * In specifies that this field must be equal to one of the specified
     * values
     * </pre>
     *
     * <code>repeated double in = 6 [json_name = "in"];</code>
     * @return This builder for chaining.
     */
    public Builder clearIn() {
      in_ = emptyDoubleList();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.DoubleList notIn_ = emptyDoubleList();
    private void ensureNotInIsMutable() {
      if (!((bitField0_ & 0x00000040) != 0)) {
        notIn_ = mutableCopy(notIn_);
        bitField0_ |= 0x00000040;
      }
    }
    /**
     * <pre>
     * NotIn specifies that this field cannot be equal to one of the specified
     * values
     * </pre>
     *
     * <code>repeated double not_in = 7 [json_name = "notIn"];</code>
     * @return A list containing the notIn.
     */
    public java.util.List<java.lang.Double>
        getNotInList() {
      return ((bitField0_ & 0x00000040) != 0) ?
               java.util.Collections.unmodifiableList(notIn_) : notIn_;
    }
    /**
     * <pre>
     * NotIn specifies that this field cannot be equal to one of the specified
     * values
     * </pre>
     *
     * <code>repeated double not_in = 7 [json_name = "notIn"];</code>
     * @return The count of notIn.
     */
    public int getNotInCount() {
      return notIn_.size();
    }
    /**
     * <pre>
     * NotIn specifies that this field cannot be equal to one of the specified
     * values
     * </pre>
     *
     * <code>repeated double not_in = 7 [json_name = "notIn"];</code>
     * @param index The index of the element to return.
     * @return The notIn at the given index.
     */
    public double getNotIn(int index) {
      return notIn_.getDouble(index);
    }
    /**
     * <pre>
     * NotIn specifies that this field cannot be equal to one of the specified
     * values
     * </pre>
     *
     * <code>repeated double not_in = 7 [json_name = "notIn"];</code>
     * @param index The index to set the value at.
     * @param value The notIn to set.
     * @return This builder for chaining.
     */
    public Builder setNotIn(
        int index, double value) {

      ensureNotInIsMutable();
      notIn_.setDouble(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * NotIn specifies that this field cannot be equal to one of the specified
     * values
     * </pre>
     *
     * <code>repeated double not_in = 7 [json_name = "notIn"];</code>
     * @param value The notIn to add.
     * @return This builder for chaining.
     */
    public Builder addNotIn(double value) {

      ensureNotInIsMutable();
      notIn_.addDouble(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * NotIn specifies that this field cannot be equal to one of the specified
     * values
     * </pre>
     *
     * <code>repeated double not_in = 7 [json_name = "notIn"];</code>
     * @param values The notIn to add.
     * @return This builder for chaining.
     */
    public Builder addAllNotIn(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureNotInIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, notIn_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * NotIn specifies that this field cannot be equal to one of the specified
     * values
     * </pre>
     *
     * <code>repeated double not_in = 7 [json_name = "notIn"];</code>
     * @return This builder for chaining.
     */
    public Builder clearNotIn() {
      notIn_ = emptyDoubleList();
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }

    private boolean ignoreEmpty_ ;
    /**
     * <pre>
     * IgnoreEmpty specifies that the validation rules of this field should be
     * evaluated only if the field is not empty
     * </pre>
     *
     * <code>optional bool ignore_empty = 8 [json_name = "ignoreEmpty"];</code>
     * @return Whether the ignoreEmpty field is set.
     */
    @java.lang.Override
    public boolean hasIgnoreEmpty() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * IgnoreEmpty specifies that the validation rules of this field should be
     * evaluated only if the field is not empty
     * </pre>
     *
     * <code>optional bool ignore_empty = 8 [json_name = "ignoreEmpty"];</code>
     * @return The ignoreEmpty.
     */
    @java.lang.Override
    public boolean getIgnoreEmpty() {
      return ignoreEmpty_;
    }
    /**
     * <pre>
     * IgnoreEmpty specifies that the validation rules of this field should be
     * evaluated only if the field is not empty
     * </pre>
     *
     * <code>optional bool ignore_empty = 8 [json_name = "ignoreEmpty"];</code>
     * @param value The ignoreEmpty to set.
     * @return This builder for chaining.
     */
    public Builder setIgnoreEmpty(boolean value) {

      ignoreEmpty_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * IgnoreEmpty specifies that the validation rules of this field should be
     * evaluated only if the field is not empty
     * </pre>
     *
     * <code>optional bool ignore_empty = 8 [json_name = "ignoreEmpty"];</code>
     * @return This builder for chaining.
     */
    public Builder clearIgnoreEmpty() {
      bitField0_ = (bitField0_ & ~0x00000080);
      ignoreEmpty_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:validate.DoubleRules)
  }

  // @@protoc_insertion_point(class_scope:validate.DoubleRules)
  private static final ai.visma.validate.DoubleRules DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ai.visma.validate.DoubleRules();
  }

  public static ai.visma.validate.DoubleRules getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<DoubleRules>
      PARSER = new com.google.protobuf.AbstractParser<DoubleRules>() {
    @java.lang.Override
    public DoubleRules parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<DoubleRules> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DoubleRules> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public ai.visma.validate.DoubleRules getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

