// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssn/type/text_annotation.proto

package ai.visma.ssn.type;

public interface WordOrBuilder extends
    // @@protoc_insertion_point(interface_extends:ssn.type.Word)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Additional information detected for the word.
   * </pre>
   *
   * <code>.ssn.type.TextAnnotation.TextProperty property = 1 [json_name = "property"];</code>
   * @return Whether the property field is set.
   */
  boolean hasProperty();
  /**
   * <pre>
   * Additional information detected for the word.
   * </pre>
   *
   * <code>.ssn.type.TextAnnotation.TextProperty property = 1 [json_name = "property"];</code>
   * @return The property.
   */
  ai.visma.ssn.type.TextAnnotation.TextProperty getProperty();
  /**
   * <pre>
   * Additional information detected for the word.
   * </pre>
   *
   * <code>.ssn.type.TextAnnotation.TextProperty property = 1 [json_name = "property"];</code>
   */
  ai.visma.ssn.type.TextAnnotation.TextPropertyOrBuilder getPropertyOrBuilder();

  /**
   * <pre>
   * The bounding box for the word.
   * The vertices are in the order of top-left, top-right, bottom-right,
   * bottom-left. When a rotation of the bounding box is detected the rotation
   * is represented as around the top-left corner as defined when the text is
   * read in the 'natural' orientation.
   * For example:
   *   * when the text is horizontal it might look like:
   *      0----1
   *      |    |
   *      3----2
   *   * when it's rotated 180 degrees around the top-left corner it becomes:
   *      2----3
   *      |    |
   *      1----0
   *   and the vertex order will still be (0, 1, 2, 3).
   * </pre>
   *
   * <code>.ssn.type.BoundingPoly bounding_box = 2 [json_name = "boundingBox"];</code>
   * @return Whether the boundingBox field is set.
   */
  boolean hasBoundingBox();
  /**
   * <pre>
   * The bounding box for the word.
   * The vertices are in the order of top-left, top-right, bottom-right,
   * bottom-left. When a rotation of the bounding box is detected the rotation
   * is represented as around the top-left corner as defined when the text is
   * read in the 'natural' orientation.
   * For example:
   *   * when the text is horizontal it might look like:
   *      0----1
   *      |    |
   *      3----2
   *   * when it's rotated 180 degrees around the top-left corner it becomes:
   *      2----3
   *      |    |
   *      1----0
   *   and the vertex order will still be (0, 1, 2, 3).
   * </pre>
   *
   * <code>.ssn.type.BoundingPoly bounding_box = 2 [json_name = "boundingBox"];</code>
   * @return The boundingBox.
   */
  ai.visma.ssn.type.BoundingPoly getBoundingBox();
  /**
   * <pre>
   * The bounding box for the word.
   * The vertices are in the order of top-left, top-right, bottom-right,
   * bottom-left. When a rotation of the bounding box is detected the rotation
   * is represented as around the top-left corner as defined when the text is
   * read in the 'natural' orientation.
   * For example:
   *   * when the text is horizontal it might look like:
   *      0----1
   *      |    |
   *      3----2
   *   * when it's rotated 180 degrees around the top-left corner it becomes:
   *      2----3
   *      |    |
   *      1----0
   *   and the vertex order will still be (0, 1, 2, 3).
   * </pre>
   *
   * <code>.ssn.type.BoundingPoly bounding_box = 2 [json_name = "boundingBox"];</code>
   */
  ai.visma.ssn.type.BoundingPolyOrBuilder getBoundingBoxOrBuilder();

  /**
   * <pre>
   * List of symbols in the word.
   * The order of the symbols follows the natural reading order.
   * </pre>
   *
   * <code>repeated .ssn.type.Symbol symbols = 3 [json_name = "symbols"];</code>
   */
  java.util.List<ai.visma.ssn.type.Symbol> 
      getSymbolsList();
  /**
   * <pre>
   * List of symbols in the word.
   * The order of the symbols follows the natural reading order.
   * </pre>
   *
   * <code>repeated .ssn.type.Symbol symbols = 3 [json_name = "symbols"];</code>
   */
  ai.visma.ssn.type.Symbol getSymbols(int index);
  /**
   * <pre>
   * List of symbols in the word.
   * The order of the symbols follows the natural reading order.
   * </pre>
   *
   * <code>repeated .ssn.type.Symbol symbols = 3 [json_name = "symbols"];</code>
   */
  int getSymbolsCount();
  /**
   * <pre>
   * List of symbols in the word.
   * The order of the symbols follows the natural reading order.
   * </pre>
   *
   * <code>repeated .ssn.type.Symbol symbols = 3 [json_name = "symbols"];</code>
   */
  java.util.List<? extends ai.visma.ssn.type.SymbolOrBuilder> 
      getSymbolsOrBuilderList();
  /**
   * <pre>
   * List of symbols in the word.
   * The order of the symbols follows the natural reading order.
   * </pre>
   *
   * <code>repeated .ssn.type.Symbol symbols = 3 [json_name = "symbols"];</code>
   */
  ai.visma.ssn.type.SymbolOrBuilder getSymbolsOrBuilder(
      int index);

  /**
   * <pre>
   * Confidence of the OCR results for the word. Range [0, 1].
   * </pre>
   *
   * <code>float confidence = 4 [json_name = "confidence"];</code>
   * @return The confidence.
   */
  float getConfidence();
}
