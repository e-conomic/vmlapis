// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssn/type/candidate.proto

package ai.visma.ssn.type;

public interface CandidateOrBuilder extends
    // @@protoc_insertion_point(interface_extends:ssn.type.Candidate)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Normalized value 01-01-2019
   * </pre>
   *
   * <code>string value = 1 [json_name = "value"];</code>
   * @return The value.
   */
  java.lang.String getValue();
  /**
   * <pre>
   * Normalized value 01-01-2019
   * </pre>
   *
   * <code>string value = 1 [json_name = "value"];</code>
   * @return The bytes for value.
   */
  com.google.protobuf.ByteString
      getValueBytes();

  /**
   * <pre>
   * The text as found on the document "1. Jan"
   * useful for overlays
   * </pre>
   *
   * <code>string text = 2 [json_name = "text"];</code>
   * @return The text.
   */
  java.lang.String getText();
  /**
   * <pre>
   * The text as found on the document "1. Jan"
   * useful for overlays
   * </pre>
   *
   * <code>string text = 2 [json_name = "text"];</code>
   * @return The bytes for text.
   */
  com.google.protobuf.ByteString
      getTextBytes();

  /**
   * <pre>
   * Confidence
   * </pre>
   *
   * <code>.ssn.type.Confidence confidence = 3 [json_name = "confidence"];</code>
   * @return Whether the confidence field is set.
   */
  boolean hasConfidence();
  /**
   * <pre>
   * Confidence
   * </pre>
   *
   * <code>.ssn.type.Confidence confidence = 3 [json_name = "confidence"];</code>
   * @return The confidence.
   */
  ai.visma.ssn.type.Confidence getConfidence();
  /**
   * <pre>
   * Confidence
   * </pre>
   *
   * <code>.ssn.type.Confidence confidence = 3 [json_name = "confidence"];</code>
   */
  ai.visma.ssn.type.ConfidenceOrBuilder getConfidenceOrBuilder();

  /**
   * <pre>
   * The bounding box for the block.
   * The vertices are in the order of top-left, top-right, bottom-right,
   * bottom-left. When a rotation of the bounding box is detected the rotation
   * is represented as around the top-left corner as defined when the text is
   * read in the 'natural' orientation.
   * For example:
   * * when the text is horizontal it might look like:
   *         0----1
   *         |    |
   *         3----2
   * * when it's rotated 180 degrees around the top-left corner it becomes:
   *         2----3
   *         |    |
   *         1----0
   *   and the vertex order will still be (0, 1, 2, 3).
   * </pre>
   *
   * <code>.ssn.type.BoundingPoly bounding_box = 4 [json_name = "boundingBox"];</code>
   * @return Whether the boundingBox field is set.
   */
  boolean hasBoundingBox();
  /**
   * <pre>
   * The bounding box for the block.
   * The vertices are in the order of top-left, top-right, bottom-right,
   * bottom-left. When a rotation of the bounding box is detected the rotation
   * is represented as around the top-left corner as defined when the text is
   * read in the 'natural' orientation.
   * For example:
   * * when the text is horizontal it might look like:
   *         0----1
   *         |    |
   *         3----2
   * * when it's rotated 180 degrees around the top-left corner it becomes:
   *         2----3
   *         |    |
   *         1----0
   *   and the vertex order will still be (0, 1, 2, 3).
   * </pre>
   *
   * <code>.ssn.type.BoundingPoly bounding_box = 4 [json_name = "boundingBox"];</code>
   * @return The boundingBox.
   */
  ai.visma.ssn.type.BoundingPoly getBoundingBox();
  /**
   * <pre>
   * The bounding box for the block.
   * The vertices are in the order of top-left, top-right, bottom-right,
   * bottom-left. When a rotation of the bounding box is detected the rotation
   * is represented as around the top-left corner as defined when the text is
   * read in the 'natural' orientation.
   * For example:
   * * when the text is horizontal it might look like:
   *         0----1
   *         |    |
   *         3----2
   * * when it's rotated 180 degrees around the top-left corner it becomes:
   *         2----3
   *         |    |
   *         1----0
   *   and the vertex order will still be (0, 1, 2, 3).
   * </pre>
   *
   * <code>.ssn.type.BoundingPoly bounding_box = 4 [json_name = "boundingBox"];</code>
   */
  ai.visma.ssn.type.BoundingPolyOrBuilder getBoundingBoxOrBuilder();

  /**
   * <pre>
   * Indicate the type of the candidate
   * </pre>
   *
   * <code>.ssn.type.Candidate.Type type = 5 [json_name = "type"];</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * Indicate the type of the candidate
   * </pre>
   *
   * <code>.ssn.type.Candidate.Type type = 5 [json_name = "type"];</code>
   * @return The type.
   */
  ai.visma.ssn.type.Candidate.Type getType();

  /**
   * <pre>
   * A reference to the page where the candidate was found.
   * page_ref start from 1.
   * </pre>
   *
   * <code>uint32 page_ref = 6 [json_name = "pageRef"];</code>
   * @return The pageRef.
   */
  int getPageRef();

  /**
   * <pre>
   * Model spec of the TensorFlow Serving model that predicted this candidate
   * </pre>
   *
   * <code>.ssn.type.ModelSpec model_metadata = 7 [json_name = "modelMetadata"];</code>
   * @return Whether the modelMetadata field is set.
   */
  boolean hasModelMetadata();
  /**
   * <pre>
   * Model spec of the TensorFlow Serving model that predicted this candidate
   * </pre>
   *
   * <code>.ssn.type.ModelSpec model_metadata = 7 [json_name = "modelMetadata"];</code>
   * @return The modelMetadata.
   */
  ai.visma.ssn.type.ModelSpec getModelMetadata();
  /**
   * <pre>
   * Model spec of the TensorFlow Serving model that predicted this candidate
   * </pre>
   *
   * <code>.ssn.type.ModelSpec model_metadata = 7 [json_name = "modelMetadata"];</code>
   */
  ai.visma.ssn.type.ModelSpecOrBuilder getModelMetadataOrBuilder();
}
