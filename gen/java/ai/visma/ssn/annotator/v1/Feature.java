// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssn/annotator/v1/annotator.proto

package ai.visma.ssn.annotator.v1;

/**
 * Protobuf type {@code ssn.annotator.v1.Feature}
 */
public final class Feature extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:ssn.annotator.v1.Feature)
    FeatureOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Feature.newBuilder() to construct.
  private Feature(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Feature() {
    type_ = 0;
    minConfidence_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Feature();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return ai.visma.ssn.annotator.v1.AnnotatorProto.internal_static_ssn_annotator_v1_Feature_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return ai.visma.ssn.annotator.v1.AnnotatorProto.internal_static_ssn_annotator_v1_Feature_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ai.visma.ssn.annotator.v1.Feature.class, ai.visma.ssn.annotator.v1.Feature.Builder.class);
  }

  /**
   * Protobuf enum {@code ssn.annotator.v1.Feature.Type}
   */
  public enum Type
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Run default feature set
     * </pre>
     *
     * <code>DEFAULT = 0;</code>
     */
    DEFAULT(0),
    /**
     * <pre>
     * Return text annotation
     * </pre>
     *
     * <code>TEXT_ANNOTATION = 1;</code>
     */
    TEXT_ANNOTATION(1),
    /**
     * <pre>
     * Run order date detection
     * </pre>
     *
     * <code>ORDER_DATE = 2;</code>
     */
    ORDER_DATE(2),
    /**
     * <pre>
     * Run due date detection
     * </pre>
     *
     * <code>PAYMENT_DUE_DATE = 3;</code>
     */
    PAYMENT_DUE_DATE(3),
    /**
     * <pre>
     * Run currency detection
     * </pre>
     *
     * <code>CURRENCY = 4;</code>
     */
    CURRENCY(4),
    /**
     * <pre>
     * Run total vat detection
     * </pre>
     *
     * <code>TOTAL_VAT = 5;</code>
     */
    TOTAL_VAT(5),
    /**
     * <pre>
     * Run total incl vat detection
     * </pre>
     *
     * <code>TOTAL_INCL_VAT = 6;</code>
     */
    TOTAL_INCL_VAT(6),
    /**
     * <pre>
     * Run total excl vat detection
     * </pre>
     *
     * <code>TOTAL_EXCL_VAT = 7;</code>
     */
    TOTAL_EXCL_VAT(7),
    /**
     * <pre>
     * [DEPRECATED] Run supplier corporate id detection.
     * Use SUPPLIER_ORGANISATION_NUMBER or SUPPLIER_VAT_NUMBER instead.
     * </pre>
     *
     * <code>SUPPLIER_CORPORATE_ID = 8;</code>
     */
    SUPPLIER_CORPORATE_ID(8),
    /**
     * <pre>
     * Run country code detection
     * </pre>
     *
     * <code>SUPPLIER_COUNTRY_CODE = 9;</code>
     */
    SUPPLIER_COUNTRY_CODE(9),
    /**
     * <pre>
     * Run document type detection
     * </pre>
     *
     * <code>DOCUMENT_TYPE = 10;</code>
     */
    DOCUMENT_TYPE(10),
    /**
     * <pre>
     * Run pyment method detection
     * </pre>
     *
     * <code>PAYMENT_METHOD = 11;</code>
     */
    PAYMENT_METHOD(11),
    /**
     * <pre>
     * Run credit card number detection
     * </pre>
     *
     * <code>CREDIT_CARD_LAST_FOUR = 12;</code>
     */
    CREDIT_CARD_LAST_FOUR(12),
    /**
     * <pre>
     * [DEPRECATED] Run invoice number detection
     * </pre>
     *
     * <code>INVOICE_NUMBER = 13;</code>
     */
    INVOICE_NUMBER(13),
    /**
     * <pre>
     * Run danish ocr line detection, for the type
     * </pre>
     *
     * <code>OCR_LINE_DK_TYPE = 14;</code>
     */
    OCR_LINE_DK_TYPE(14),
    /**
     * <pre>
     * Run danish ocr line detection, for the payment id
     * </pre>
     *
     * <code>OCR_LINE_DK_PAYMENT_ID = 15;</code>
     */
    OCR_LINE_DK_PAYMENT_ID(15),
    /**
     * <pre>
     * Run danish ocr line detection, for the creditor id
     * </pre>
     *
     * <code>OCR_LINE_DK_CREDITOR_ID = 16;</code>
     */
    OCR_LINE_DK_CREDITOR_ID(16),
    /**
     * <pre>
     * Run swedish ocr line detection for the payment id
     * </pre>
     *
     * <code>OCR_LINE_SE_PAYMENT_ID = 17;</code>
     */
    OCR_LINE_SE_PAYMENT_ID(17),
    /**
     * <pre>
     * Run swedish ocr line detection for the bankgiro creditor id
     * </pre>
     *
     * <code>OCR_LINE_SE_BANKGIRO_CREDITOR_ID = 18;</code>
     */
    OCR_LINE_SE_BANKGIRO_CREDITOR_ID(18),
    /**
     * <pre>
     * Run swedish ocr line detection for the plusgiro creditor id
     * </pre>
     *
     * <code>OCR_LINE_SE_PLUSGIRO_CREDITOR_ID = 19;</code>
     */
    OCR_LINE_SE_PLUSGIRO_CREDITOR_ID(19),
    /**
     * <pre>
     * Run norwegian ocr line detection or the payment id
     * </pre>
     *
     * <code>OCR_LINE_NO_PAYMENT_ID = 20;</code>
     */
    OCR_LINE_NO_PAYMENT_ID(20),
    /**
     * <pre>
     * Run finish ocr line detection or the payment id
     * </pre>
     *
     * <code>OCR_LINE_FI_PAYMENT_ID = 21;</code>
     */
    OCR_LINE_FI_PAYMENT_ID(21),
    /**
     * <pre>
     * Run dutch ocr line detection for the payment id
     * </pre>
     *
     * <code>OCR_LINE_NL_PAYMENT_ID = 22;</code>
     */
    OCR_LINE_NL_PAYMENT_ID(22),
    /**
     * <pre>
     * Return document text
     * </pre>
     *
     * <code>TEXT = 23;</code>
     */
    TEXT(23),
    /**
     * <pre>
     * Run IBAN detection
     * </pre>
     *
     * <code>IBAN = 24;</code>
     */
    IBAN(24),
    /**
     * <pre>
     * Run LINES detection
     * </pre>
     *
     * <code>LINES = 25;</code>
     */
    LINES(25),
    /**
     * <pre>
     * Run first page of PDF to PNG conversion
     * </pre>
     *
     * <code>PREVIEW = 26;</code>
     */
    PREVIEW(26),
    /**
     * <pre>
     * Run bank account number detection
     * </pre>
     *
     * <code>BANK_ACCOUNT_NUMBER = 27;</code>
     */
    BANK_ACCOUNT_NUMBER(27),
    /**
     * <pre>
     * Run bank registration number detection
     * </pre>
     *
     * <code>BANK_REGISTRATION_NUMBER = 28;</code>
     */
    BANK_REGISTRATION_NUMBER(28),
    /**
     * <pre>
     * Run business identifier code detection
     * </pre>
     *
     * <code>BIC = 29;</code>
     */
    BIC(29),
    /**
     * <pre>
     * Run document number detection
     * </pre>
     *
     * <code>DOCUMENT_NUMBER = 30;</code>
     */
    DOCUMENT_NUMBER(30),
    /**
     * <pre>
     * Run document date detection
     * </pre>
     *
     * <code>DOCUMENT_DATE = 31;</code>
     */
    DOCUMENT_DATE(31),
    /**
     * <pre>
     * Run order number detection
     * </pre>
     *
     * <code>ORDER_NUMBER = 32;</code>
     */
    ORDER_NUMBER(32),
    /**
     * <pre>
     * Run spplier name detection
     * </pre>
     *
     * <code>SUPPLIER_NAME = 33;</code>
     */
    SUPPLIER_NAME(33),
    /**
     * <pre>
     * [EXPERIMENTAL] Run supplier VAT detection
     * </pre>
     *
     * <code>SUPPLIER_VAT_NUMBER = 34;</code>
     */
    SUPPLIER_VAT_NUMBER(34),
    /**
     * <pre>
     * [EXPERIMENTAL] Run supplier organisation number detection
     * </pre>
     *
     * <code>SUPPLIER_ORGANISATION_NUMBER = 35;</code>
     */
    SUPPLIER_ORGANISATION_NUMBER(35),
    /**
     * <pre>
     * [EXPERIMENTAL] Run supplier address detection
     * </pre>
     *
     * <code>SUPPLIER_ADDRESS = 36;</code>
     */
    SUPPLIER_ADDRESS(36),
    /**
     * <pre>
     * [EXPERIMENTAL] Run customer identifier detection
     * </pre>
     *
     * <code>CUSTOMER_NUMBER = 37;</code>
     */
    CUSTOMER_NUMBER(37),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Run default feature set
     * </pre>
     *
     * <code>DEFAULT = 0;</code>
     */
    public static final int DEFAULT_VALUE = 0;
    /**
     * <pre>
     * Return text annotation
     * </pre>
     *
     * <code>TEXT_ANNOTATION = 1;</code>
     */
    public static final int TEXT_ANNOTATION_VALUE = 1;
    /**
     * <pre>
     * Run order date detection
     * </pre>
     *
     * <code>ORDER_DATE = 2;</code>
     */
    public static final int ORDER_DATE_VALUE = 2;
    /**
     * <pre>
     * Run due date detection
     * </pre>
     *
     * <code>PAYMENT_DUE_DATE = 3;</code>
     */
    public static final int PAYMENT_DUE_DATE_VALUE = 3;
    /**
     * <pre>
     * Run currency detection
     * </pre>
     *
     * <code>CURRENCY = 4;</code>
     */
    public static final int CURRENCY_VALUE = 4;
    /**
     * <pre>
     * Run total vat detection
     * </pre>
     *
     * <code>TOTAL_VAT = 5;</code>
     */
    public static final int TOTAL_VAT_VALUE = 5;
    /**
     * <pre>
     * Run total incl vat detection
     * </pre>
     *
     * <code>TOTAL_INCL_VAT = 6;</code>
     */
    public static final int TOTAL_INCL_VAT_VALUE = 6;
    /**
     * <pre>
     * Run total excl vat detection
     * </pre>
     *
     * <code>TOTAL_EXCL_VAT = 7;</code>
     */
    public static final int TOTAL_EXCL_VAT_VALUE = 7;
    /**
     * <pre>
     * [DEPRECATED] Run supplier corporate id detection.
     * Use SUPPLIER_ORGANISATION_NUMBER or SUPPLIER_VAT_NUMBER instead.
     * </pre>
     *
     * <code>SUPPLIER_CORPORATE_ID = 8;</code>
     */
    public static final int SUPPLIER_CORPORATE_ID_VALUE = 8;
    /**
     * <pre>
     * Run country code detection
     * </pre>
     *
     * <code>SUPPLIER_COUNTRY_CODE = 9;</code>
     */
    public static final int SUPPLIER_COUNTRY_CODE_VALUE = 9;
    /**
     * <pre>
     * Run document type detection
     * </pre>
     *
     * <code>DOCUMENT_TYPE = 10;</code>
     */
    public static final int DOCUMENT_TYPE_VALUE = 10;
    /**
     * <pre>
     * Run pyment method detection
     * </pre>
     *
     * <code>PAYMENT_METHOD = 11;</code>
     */
    public static final int PAYMENT_METHOD_VALUE = 11;
    /**
     * <pre>
     * Run credit card number detection
     * </pre>
     *
     * <code>CREDIT_CARD_LAST_FOUR = 12;</code>
     */
    public static final int CREDIT_CARD_LAST_FOUR_VALUE = 12;
    /**
     * <pre>
     * [DEPRECATED] Run invoice number detection
     * </pre>
     *
     * <code>INVOICE_NUMBER = 13;</code>
     */
    public static final int INVOICE_NUMBER_VALUE = 13;
    /**
     * <pre>
     * Run danish ocr line detection, for the type
     * </pre>
     *
     * <code>OCR_LINE_DK_TYPE = 14;</code>
     */
    public static final int OCR_LINE_DK_TYPE_VALUE = 14;
    /**
     * <pre>
     * Run danish ocr line detection, for the payment id
     * </pre>
     *
     * <code>OCR_LINE_DK_PAYMENT_ID = 15;</code>
     */
    public static final int OCR_LINE_DK_PAYMENT_ID_VALUE = 15;
    /**
     * <pre>
     * Run danish ocr line detection, for the creditor id
     * </pre>
     *
     * <code>OCR_LINE_DK_CREDITOR_ID = 16;</code>
     */
    public static final int OCR_LINE_DK_CREDITOR_ID_VALUE = 16;
    /**
     * <pre>
     * Run swedish ocr line detection for the payment id
     * </pre>
     *
     * <code>OCR_LINE_SE_PAYMENT_ID = 17;</code>
     */
    public static final int OCR_LINE_SE_PAYMENT_ID_VALUE = 17;
    /**
     * <pre>
     * Run swedish ocr line detection for the bankgiro creditor id
     * </pre>
     *
     * <code>OCR_LINE_SE_BANKGIRO_CREDITOR_ID = 18;</code>
     */
    public static final int OCR_LINE_SE_BANKGIRO_CREDITOR_ID_VALUE = 18;
    /**
     * <pre>
     * Run swedish ocr line detection for the plusgiro creditor id
     * </pre>
     *
     * <code>OCR_LINE_SE_PLUSGIRO_CREDITOR_ID = 19;</code>
     */
    public static final int OCR_LINE_SE_PLUSGIRO_CREDITOR_ID_VALUE = 19;
    /**
     * <pre>
     * Run norwegian ocr line detection or the payment id
     * </pre>
     *
     * <code>OCR_LINE_NO_PAYMENT_ID = 20;</code>
     */
    public static final int OCR_LINE_NO_PAYMENT_ID_VALUE = 20;
    /**
     * <pre>
     * Run finish ocr line detection or the payment id
     * </pre>
     *
     * <code>OCR_LINE_FI_PAYMENT_ID = 21;</code>
     */
    public static final int OCR_LINE_FI_PAYMENT_ID_VALUE = 21;
    /**
     * <pre>
     * Run dutch ocr line detection for the payment id
     * </pre>
     *
     * <code>OCR_LINE_NL_PAYMENT_ID = 22;</code>
     */
    public static final int OCR_LINE_NL_PAYMENT_ID_VALUE = 22;
    /**
     * <pre>
     * Return document text
     * </pre>
     *
     * <code>TEXT = 23;</code>
     */
    public static final int TEXT_VALUE = 23;
    /**
     * <pre>
     * Run IBAN detection
     * </pre>
     *
     * <code>IBAN = 24;</code>
     */
    public static final int IBAN_VALUE = 24;
    /**
     * <pre>
     * Run LINES detection
     * </pre>
     *
     * <code>LINES = 25;</code>
     */
    public static final int LINES_VALUE = 25;
    /**
     * <pre>
     * Run first page of PDF to PNG conversion
     * </pre>
     *
     * <code>PREVIEW = 26;</code>
     */
    public static final int PREVIEW_VALUE = 26;
    /**
     * <pre>
     * Run bank account number detection
     * </pre>
     *
     * <code>BANK_ACCOUNT_NUMBER = 27;</code>
     */
    public static final int BANK_ACCOUNT_NUMBER_VALUE = 27;
    /**
     * <pre>
     * Run bank registration number detection
     * </pre>
     *
     * <code>BANK_REGISTRATION_NUMBER = 28;</code>
     */
    public static final int BANK_REGISTRATION_NUMBER_VALUE = 28;
    /**
     * <pre>
     * Run business identifier code detection
     * </pre>
     *
     * <code>BIC = 29;</code>
     */
    public static final int BIC_VALUE = 29;
    /**
     * <pre>
     * Run document number detection
     * </pre>
     *
     * <code>DOCUMENT_NUMBER = 30;</code>
     */
    public static final int DOCUMENT_NUMBER_VALUE = 30;
    /**
     * <pre>
     * Run document date detection
     * </pre>
     *
     * <code>DOCUMENT_DATE = 31;</code>
     */
    public static final int DOCUMENT_DATE_VALUE = 31;
    /**
     * <pre>
     * Run order number detection
     * </pre>
     *
     * <code>ORDER_NUMBER = 32;</code>
     */
    public static final int ORDER_NUMBER_VALUE = 32;
    /**
     * <pre>
     * Run spplier name detection
     * </pre>
     *
     * <code>SUPPLIER_NAME = 33;</code>
     */
    public static final int SUPPLIER_NAME_VALUE = 33;
    /**
     * <pre>
     * [EXPERIMENTAL] Run supplier VAT detection
     * </pre>
     *
     * <code>SUPPLIER_VAT_NUMBER = 34;</code>
     */
    public static final int SUPPLIER_VAT_NUMBER_VALUE = 34;
    /**
     * <pre>
     * [EXPERIMENTAL] Run supplier organisation number detection
     * </pre>
     *
     * <code>SUPPLIER_ORGANISATION_NUMBER = 35;</code>
     */
    public static final int SUPPLIER_ORGANISATION_NUMBER_VALUE = 35;
    /**
     * <pre>
     * [EXPERIMENTAL] Run supplier address detection
     * </pre>
     *
     * <code>SUPPLIER_ADDRESS = 36;</code>
     */
    public static final int SUPPLIER_ADDRESS_VALUE = 36;
    /**
     * <pre>
     * [EXPERIMENTAL] Run customer identifier detection
     * </pre>
     *
     * <code>CUSTOMER_NUMBER = 37;</code>
     */
    public static final int CUSTOMER_NUMBER_VALUE = 37;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Type valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Type forNumber(int value) {
      switch (value) {
        case 0: return DEFAULT;
        case 1: return TEXT_ANNOTATION;
        case 2: return ORDER_DATE;
        case 3: return PAYMENT_DUE_DATE;
        case 4: return CURRENCY;
        case 5: return TOTAL_VAT;
        case 6: return TOTAL_INCL_VAT;
        case 7: return TOTAL_EXCL_VAT;
        case 8: return SUPPLIER_CORPORATE_ID;
        case 9: return SUPPLIER_COUNTRY_CODE;
        case 10: return DOCUMENT_TYPE;
        case 11: return PAYMENT_METHOD;
        case 12: return CREDIT_CARD_LAST_FOUR;
        case 13: return INVOICE_NUMBER;
        case 14: return OCR_LINE_DK_TYPE;
        case 15: return OCR_LINE_DK_PAYMENT_ID;
        case 16: return OCR_LINE_DK_CREDITOR_ID;
        case 17: return OCR_LINE_SE_PAYMENT_ID;
        case 18: return OCR_LINE_SE_BANKGIRO_CREDITOR_ID;
        case 19: return OCR_LINE_SE_PLUSGIRO_CREDITOR_ID;
        case 20: return OCR_LINE_NO_PAYMENT_ID;
        case 21: return OCR_LINE_FI_PAYMENT_ID;
        case 22: return OCR_LINE_NL_PAYMENT_ID;
        case 23: return TEXT;
        case 24: return IBAN;
        case 25: return LINES;
        case 26: return PREVIEW;
        case 27: return BANK_ACCOUNT_NUMBER;
        case 28: return BANK_REGISTRATION_NUMBER;
        case 29: return BIC;
        case 30: return DOCUMENT_NUMBER;
        case 31: return DOCUMENT_DATE;
        case 32: return ORDER_NUMBER;
        case 33: return SUPPLIER_NAME;
        case 34: return SUPPLIER_VAT_NUMBER;
        case 35: return SUPPLIER_ORGANISATION_NUMBER;
        case 36: return SUPPLIER_ADDRESS;
        case 37: return CUSTOMER_NUMBER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Type>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Type> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Type>() {
            public Type findValueByNumber(int number) {
              return Type.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return ai.visma.ssn.annotator.v1.Feature.getDescriptor().getEnumTypes().get(0);
    }

    private static final Type[] VALUES = values();

    public static Type valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Type(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ssn.annotator.v1.Feature.Type)
  }

  public static final int TYPE_FIELD_NUMBER = 1;
  private int type_ = 0;
  /**
   * <pre>
   * The feature type.
   * </pre>
   *
   * <code>.ssn.annotator.v1.Feature.Type type = 1 [json_name = "type"];</code>
   * @return The enum numeric value on the wire for type.
   */
  @java.lang.Override public int getTypeValue() {
    return type_;
  }
  /**
   * <pre>
   * The feature type.
   * </pre>
   *
   * <code>.ssn.annotator.v1.Feature.Type type = 1 [json_name = "type"];</code>
   * @return The type.
   */
  @java.lang.Override public ai.visma.ssn.annotator.v1.Feature.Type getType() {
    ai.visma.ssn.annotator.v1.Feature.Type result = ai.visma.ssn.annotator.v1.Feature.Type.forNumber(type_);
    return result == null ? ai.visma.ssn.annotator.v1.Feature.Type.UNRECOGNIZED : result;
  }

  public static final int MAX_RESULTS_FIELD_NUMBER = 2;
  private int maxResults_ = 0;
  /**
   * <pre>
   * Maximum number of results of this type. Does not apply to
   * `TEXT_ANNOTATION` or `DOCUMENT_TYPE`.
   * </pre>
   *
   * <code>int32 max_results = 2 [json_name = "maxResults"];</code>
   * @return The maxResults.
   */
  @java.lang.Override
  public int getMaxResults() {
    return maxResults_;
  }

  public static final int MIN_CONFIDENCE_FIELD_NUMBER = 3;
  private int minConfidence_ = 0;
  /**
   * <pre>
   * The minimum confidence for predictions that the caller wants returned
   * </pre>
   *
   * <code>.ssn.type.Confidence.Level min_confidence = 3 [json_name = "minConfidence"];</code>
   * @return The enum numeric value on the wire for minConfidence.
   */
  @java.lang.Override public int getMinConfidenceValue() {
    return minConfidence_;
  }
  /**
   * <pre>
   * The minimum confidence for predictions that the caller wants returned
   * </pre>
   *
   * <code>.ssn.type.Confidence.Level min_confidence = 3 [json_name = "minConfidence"];</code>
   * @return The minConfidence.
   */
  @java.lang.Override public ai.visma.ssn.type.Confidence.Level getMinConfidence() {
    ai.visma.ssn.type.Confidence.Level result = ai.visma.ssn.type.Confidence.Level.forNumber(minConfidence_);
    return result == null ? ai.visma.ssn.type.Confidence.Level.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (type_ != ai.visma.ssn.annotator.v1.Feature.Type.DEFAULT.getNumber()) {
      output.writeEnum(1, type_);
    }
    if (maxResults_ != 0) {
      output.writeInt32(2, maxResults_);
    }
    if (minConfidence_ != ai.visma.ssn.type.Confidence.Level.UNKNOWN.getNumber()) {
      output.writeEnum(3, minConfidence_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (type_ != ai.visma.ssn.annotator.v1.Feature.Type.DEFAULT.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, type_);
    }
    if (maxResults_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, maxResults_);
    }
    if (minConfidence_ != ai.visma.ssn.type.Confidence.Level.UNKNOWN.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, minConfidence_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ai.visma.ssn.annotator.v1.Feature)) {
      return super.equals(obj);
    }
    ai.visma.ssn.annotator.v1.Feature other = (ai.visma.ssn.annotator.v1.Feature) obj;

    if (type_ != other.type_) return false;
    if (getMaxResults()
        != other.getMaxResults()) return false;
    if (minConfidence_ != other.minConfidence_) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TYPE_FIELD_NUMBER;
    hash = (53 * hash) + type_;
    hash = (37 * hash) + MAX_RESULTS_FIELD_NUMBER;
    hash = (53 * hash) + getMaxResults();
    hash = (37 * hash) + MIN_CONFIDENCE_FIELD_NUMBER;
    hash = (53 * hash) + minConfidence_;
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ai.visma.ssn.annotator.v1.Feature parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.visma.ssn.annotator.v1.Feature parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.visma.ssn.annotator.v1.Feature parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.visma.ssn.annotator.v1.Feature parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.visma.ssn.annotator.v1.Feature parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.visma.ssn.annotator.v1.Feature parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.visma.ssn.annotator.v1.Feature parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ai.visma.ssn.annotator.v1.Feature parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static ai.visma.ssn.annotator.v1.Feature parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static ai.visma.ssn.annotator.v1.Feature parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ai.visma.ssn.annotator.v1.Feature parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ai.visma.ssn.annotator.v1.Feature parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ai.visma.ssn.annotator.v1.Feature prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code ssn.annotator.v1.Feature}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:ssn.annotator.v1.Feature)
      ai.visma.ssn.annotator.v1.FeatureOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ai.visma.ssn.annotator.v1.AnnotatorProto.internal_static_ssn_annotator_v1_Feature_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ai.visma.ssn.annotator.v1.AnnotatorProto.internal_static_ssn_annotator_v1_Feature_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ai.visma.ssn.annotator.v1.Feature.class, ai.visma.ssn.annotator.v1.Feature.Builder.class);
    }

    // Construct using ai.visma.ssn.annotator.v1.Feature.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      type_ = 0;
      maxResults_ = 0;
      minConfidence_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return ai.visma.ssn.annotator.v1.AnnotatorProto.internal_static_ssn_annotator_v1_Feature_descriptor;
    }

    @java.lang.Override
    public ai.visma.ssn.annotator.v1.Feature getDefaultInstanceForType() {
      return ai.visma.ssn.annotator.v1.Feature.getDefaultInstance();
    }

    @java.lang.Override
    public ai.visma.ssn.annotator.v1.Feature build() {
      ai.visma.ssn.annotator.v1.Feature result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public ai.visma.ssn.annotator.v1.Feature buildPartial() {
      ai.visma.ssn.annotator.v1.Feature result = new ai.visma.ssn.annotator.v1.Feature(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(ai.visma.ssn.annotator.v1.Feature result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.type_ = type_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.maxResults_ = maxResults_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.minConfidence_ = minConfidence_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ai.visma.ssn.annotator.v1.Feature) {
        return mergeFrom((ai.visma.ssn.annotator.v1.Feature)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ai.visma.ssn.annotator.v1.Feature other) {
      if (other == ai.visma.ssn.annotator.v1.Feature.getDefaultInstance()) return this;
      if (other.type_ != 0) {
        setTypeValue(other.getTypeValue());
      }
      if (other.getMaxResults() != 0) {
        setMaxResults(other.getMaxResults());
      }
      if (other.minConfidence_ != 0) {
        setMinConfidenceValue(other.getMinConfidenceValue());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              type_ = input.readEnum();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              maxResults_ = input.readInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              minConfidence_ = input.readEnum();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int type_ = 0;
    /**
     * <pre>
     * The feature type.
     * </pre>
     *
     * <code>.ssn.annotator.v1.Feature.Type type = 1 [json_name = "type"];</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * The feature type.
     * </pre>
     *
     * <code>.ssn.annotator.v1.Feature.Type type = 1 [json_name = "type"];</code>
     * @param value The enum numeric value on the wire for type to set.
     * @return This builder for chaining.
     */
    public Builder setTypeValue(int value) {
      type_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The feature type.
     * </pre>
     *
     * <code>.ssn.annotator.v1.Feature.Type type = 1 [json_name = "type"];</code>
     * @return The type.
     */
    @java.lang.Override
    public ai.visma.ssn.annotator.v1.Feature.Type getType() {
      ai.visma.ssn.annotator.v1.Feature.Type result = ai.visma.ssn.annotator.v1.Feature.Type.forNumber(type_);
      return result == null ? ai.visma.ssn.annotator.v1.Feature.Type.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The feature type.
     * </pre>
     *
     * <code>.ssn.annotator.v1.Feature.Type type = 1 [json_name = "type"];</code>
     * @param value The type to set.
     * @return This builder for chaining.
     */
    public Builder setType(ai.visma.ssn.annotator.v1.Feature.Type value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      type_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The feature type.
     * </pre>
     *
     * <code>.ssn.annotator.v1.Feature.Type type = 1 [json_name = "type"];</code>
     * @return This builder for chaining.
     */
    public Builder clearType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      type_ = 0;
      onChanged();
      return this;
    }

    private int maxResults_ ;
    /**
     * <pre>
     * Maximum number of results of this type. Does not apply to
     * `TEXT_ANNOTATION` or `DOCUMENT_TYPE`.
     * </pre>
     *
     * <code>int32 max_results = 2 [json_name = "maxResults"];</code>
     * @return The maxResults.
     */
    @java.lang.Override
    public int getMaxResults() {
      return maxResults_;
    }
    /**
     * <pre>
     * Maximum number of results of this type. Does not apply to
     * `TEXT_ANNOTATION` or `DOCUMENT_TYPE`.
     * </pre>
     *
     * <code>int32 max_results = 2 [json_name = "maxResults"];</code>
     * @param value The maxResults to set.
     * @return This builder for chaining.
     */
    public Builder setMaxResults(int value) {
      
      maxResults_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Maximum number of results of this type. Does not apply to
     * `TEXT_ANNOTATION` or `DOCUMENT_TYPE`.
     * </pre>
     *
     * <code>int32 max_results = 2 [json_name = "maxResults"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxResults() {
      bitField0_ = (bitField0_ & ~0x00000002);
      maxResults_ = 0;
      onChanged();
      return this;
    }

    private int minConfidence_ = 0;
    /**
     * <pre>
     * The minimum confidence for predictions that the caller wants returned
     * </pre>
     *
     * <code>.ssn.type.Confidence.Level min_confidence = 3 [json_name = "minConfidence"];</code>
     * @return The enum numeric value on the wire for minConfidence.
     */
    @java.lang.Override public int getMinConfidenceValue() {
      return minConfidence_;
    }
    /**
     * <pre>
     * The minimum confidence for predictions that the caller wants returned
     * </pre>
     *
     * <code>.ssn.type.Confidence.Level min_confidence = 3 [json_name = "minConfidence"];</code>
     * @param value The enum numeric value on the wire for minConfidence to set.
     * @return This builder for chaining.
     */
    public Builder setMinConfidenceValue(int value) {
      minConfidence_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The minimum confidence for predictions that the caller wants returned
     * </pre>
     *
     * <code>.ssn.type.Confidence.Level min_confidence = 3 [json_name = "minConfidence"];</code>
     * @return The minConfidence.
     */
    @java.lang.Override
    public ai.visma.ssn.type.Confidence.Level getMinConfidence() {
      ai.visma.ssn.type.Confidence.Level result = ai.visma.ssn.type.Confidence.Level.forNumber(minConfidence_);
      return result == null ? ai.visma.ssn.type.Confidence.Level.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The minimum confidence for predictions that the caller wants returned
     * </pre>
     *
     * <code>.ssn.type.Confidence.Level min_confidence = 3 [json_name = "minConfidence"];</code>
     * @param value The minConfidence to set.
     * @return This builder for chaining.
     */
    public Builder setMinConfidence(ai.visma.ssn.type.Confidence.Level value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      minConfidence_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The minimum confidence for predictions that the caller wants returned
     * </pre>
     *
     * <code>.ssn.type.Confidence.Level min_confidence = 3 [json_name = "minConfidence"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMinConfidence() {
      bitField0_ = (bitField0_ & ~0x00000004);
      minConfidence_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:ssn.annotator.v1.Feature)
  }

  // @@protoc_insertion_point(class_scope:ssn.annotator.v1.Feature)
  private static final ai.visma.ssn.annotator.v1.Feature DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ai.visma.ssn.annotator.v1.Feature();
  }

  public static ai.visma.ssn.annotator.v1.Feature getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Feature>
      PARSER = new com.google.protobuf.AbstractParser<Feature>() {
    @java.lang.Override
    public Feature parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Feature> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Feature> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public ai.visma.ssn.annotator.v1.Feature getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

