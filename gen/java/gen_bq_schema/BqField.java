// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gen_bq_schema/bq_field.proto

package gen_bq_schema;

public final class BqField {
  private BqField() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(gen_bq_schema.BqField.bigquery);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface BigQueryFieldOptionsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gen_bq_schema.BigQueryFieldOptions)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Flag to specify that a field should be marked as 'REQUIRED' when
     * used to generate schema for BigQuery.
     * </pre>
     *
     * <code>bool require = 1 [json_name = "require"];</code>
     * @return The require.
     */
    boolean getRequire();

    /**
     * <pre>
     * Optionally override whatever type is resolved by the schema
     * generator. This is useful, for example, to store epoch timestamps
     * with the underlying 'TIMESTAMP' type, when normally, they would
     * be structured as 'INTEGER' fields.
     * </pre>
     *
     * <code>string type_override = 2 [json_name = "typeOverride"];</code>
     * @return The typeOverride.
     */
    java.lang.String getTypeOverride();
    /**
     * <pre>
     * Optionally override whatever type is resolved by the schema
     * generator. This is useful, for example, to store epoch timestamps
     * with the underlying 'TIMESTAMP' type, when normally, they would
     * be structured as 'INTEGER' fields.
     * </pre>
     *
     * <code>string type_override = 2 [json_name = "typeOverride"];</code>
     * @return The bytes for typeOverride.
     */
    com.google.protobuf.ByteString
        getTypeOverrideBytes();

    /**
     * <pre>
     * Optionally omit a field from BigQuery schema.
     * </pre>
     *
     * <code>bool ignore = 3 [json_name = "ignore"];</code>
     * @return The ignore.
     */
    boolean getIgnore();

    /**
     * <pre>
     * Set the description for a field in BigQuery schema.
     * </pre>
     *
     * <code>string description = 4 [json_name = "description"];</code>
     * @return The description.
     */
    java.lang.String getDescription();
    /**
     * <pre>
     * Set the description for a field in BigQuery schema.
     * </pre>
     *
     * <code>string description = 4 [json_name = "description"];</code>
     * @return The bytes for description.
     */
    com.google.protobuf.ByteString
        getDescriptionBytes();

    /**
     * <pre>
     * Customize the name of the field in the BigQuery schema.
     * </pre>
     *
     * <code>string name = 5 [json_name = "name"];</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * Customize the name of the field in the BigQuery schema.
     * </pre>
     *
     * <code>string name = 5 [json_name = "name"];</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();
  }
  /**
   * <pre>
   * Message containing options related to BigQuery schema generation
   * and management via Protobuf.
   * </pre>
   *
   * Protobuf type {@code gen_bq_schema.BigQueryFieldOptions}
   */
  public static final class BigQueryFieldOptions extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gen_bq_schema.BigQueryFieldOptions)
      BigQueryFieldOptionsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BigQueryFieldOptions.newBuilder() to construct.
    private BigQueryFieldOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BigQueryFieldOptions() {
      typeOverride_ = "";
      description_ = "";
      name_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BigQueryFieldOptions();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BigQueryFieldOptions(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              require_ = input.readBool();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              typeOverride_ = s;
              break;
            }
            case 24: {

              ignore_ = input.readBool();
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              description_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gen_bq_schema.BqField.internal_static_gen_bq_schema_BigQueryFieldOptions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gen_bq_schema.BqField.internal_static_gen_bq_schema_BigQueryFieldOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gen_bq_schema.BqField.BigQueryFieldOptions.class, gen_bq_schema.BqField.BigQueryFieldOptions.Builder.class);
    }

    public static final int REQUIRE_FIELD_NUMBER = 1;
    private boolean require_;
    /**
     * <pre>
     * Flag to specify that a field should be marked as 'REQUIRED' when
     * used to generate schema for BigQuery.
     * </pre>
     *
     * <code>bool require = 1 [json_name = "require"];</code>
     * @return The require.
     */
    @java.lang.Override
    public boolean getRequire() {
      return require_;
    }

    public static final int TYPE_OVERRIDE_FIELD_NUMBER = 2;
    private volatile java.lang.Object typeOverride_;
    /**
     * <pre>
     * Optionally override whatever type is resolved by the schema
     * generator. This is useful, for example, to store epoch timestamps
     * with the underlying 'TIMESTAMP' type, when normally, they would
     * be structured as 'INTEGER' fields.
     * </pre>
     *
     * <code>string type_override = 2 [json_name = "typeOverride"];</code>
     * @return The typeOverride.
     */
    @java.lang.Override
    public java.lang.String getTypeOverride() {
      java.lang.Object ref = typeOverride_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        typeOverride_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Optionally override whatever type is resolved by the schema
     * generator. This is useful, for example, to store epoch timestamps
     * with the underlying 'TIMESTAMP' type, when normally, they would
     * be structured as 'INTEGER' fields.
     * </pre>
     *
     * <code>string type_override = 2 [json_name = "typeOverride"];</code>
     * @return The bytes for typeOverride.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTypeOverrideBytes() {
      java.lang.Object ref = typeOverride_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        typeOverride_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IGNORE_FIELD_NUMBER = 3;
    private boolean ignore_;
    /**
     * <pre>
     * Optionally omit a field from BigQuery schema.
     * </pre>
     *
     * <code>bool ignore = 3 [json_name = "ignore"];</code>
     * @return The ignore.
     */
    @java.lang.Override
    public boolean getIgnore() {
      return ignore_;
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 4;
    private volatile java.lang.Object description_;
    /**
     * <pre>
     * Set the description for a field in BigQuery schema.
     * </pre>
     *
     * <code>string description = 4 [json_name = "description"];</code>
     * @return The description.
     */
    @java.lang.Override
    public java.lang.String getDescription() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        description_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Set the description for a field in BigQuery schema.
     * </pre>
     *
     * <code>string description = 4 [json_name = "description"];</code>
     * @return The bytes for description.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        description_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 5;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Customize the name of the field in the BigQuery schema.
     * </pre>
     *
     * <code>string name = 5 [json_name = "name"];</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Customize the name of the field in the BigQuery schema.
     * </pre>
     *
     * <code>string name = 5 [json_name = "name"];</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (require_ != false) {
        output.writeBool(1, require_);
      }
      if (!getTypeOverrideBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, typeOverride_);
      }
      if (ignore_ != false) {
        output.writeBool(3, ignore_);
      }
      if (!getDescriptionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, description_);
      }
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, name_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (require_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, require_);
      }
      if (!getTypeOverrideBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, typeOverride_);
      }
      if (ignore_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, ignore_);
      }
      if (!getDescriptionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, description_);
      }
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, name_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gen_bq_schema.BqField.BigQueryFieldOptions)) {
        return super.equals(obj);
      }
      gen_bq_schema.BqField.BigQueryFieldOptions other = (gen_bq_schema.BqField.BigQueryFieldOptions) obj;

      if (getRequire()
          != other.getRequire()) return false;
      if (!getTypeOverride()
          .equals(other.getTypeOverride())) return false;
      if (getIgnore()
          != other.getIgnore()) return false;
      if (!getDescription()
          .equals(other.getDescription())) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + REQUIRE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getRequire());
      hash = (37 * hash) + TYPE_OVERRIDE_FIELD_NUMBER;
      hash = (53 * hash) + getTypeOverride().hashCode();
      hash = (37 * hash) + IGNORE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIgnore());
      hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
      hash = (53 * hash) + getDescription().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gen_bq_schema.BqField.BigQueryFieldOptions parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gen_bq_schema.BqField.BigQueryFieldOptions parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gen_bq_schema.BqField.BigQueryFieldOptions parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gen_bq_schema.BqField.BigQueryFieldOptions parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gen_bq_schema.BqField.BigQueryFieldOptions parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gen_bq_schema.BqField.BigQueryFieldOptions parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gen_bq_schema.BqField.BigQueryFieldOptions parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gen_bq_schema.BqField.BigQueryFieldOptions parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gen_bq_schema.BqField.BigQueryFieldOptions parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gen_bq_schema.BqField.BigQueryFieldOptions parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gen_bq_schema.BqField.BigQueryFieldOptions parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gen_bq_schema.BqField.BigQueryFieldOptions parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gen_bq_schema.BqField.BigQueryFieldOptions prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Message containing options related to BigQuery schema generation
     * and management via Protobuf.
     * </pre>
     *
     * Protobuf type {@code gen_bq_schema.BigQueryFieldOptions}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gen_bq_schema.BigQueryFieldOptions)
        gen_bq_schema.BqField.BigQueryFieldOptionsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gen_bq_schema.BqField.internal_static_gen_bq_schema_BigQueryFieldOptions_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gen_bq_schema.BqField.internal_static_gen_bq_schema_BigQueryFieldOptions_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gen_bq_schema.BqField.BigQueryFieldOptions.class, gen_bq_schema.BqField.BigQueryFieldOptions.Builder.class);
      }

      // Construct using gen_bq_schema.BqField.BigQueryFieldOptions.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        require_ = false;

        typeOverride_ = "";

        ignore_ = false;

        description_ = "";

        name_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gen_bq_schema.BqField.internal_static_gen_bq_schema_BigQueryFieldOptions_descriptor;
      }

      @java.lang.Override
      public gen_bq_schema.BqField.BigQueryFieldOptions getDefaultInstanceForType() {
        return gen_bq_schema.BqField.BigQueryFieldOptions.getDefaultInstance();
      }

      @java.lang.Override
      public gen_bq_schema.BqField.BigQueryFieldOptions build() {
        gen_bq_schema.BqField.BigQueryFieldOptions result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public gen_bq_schema.BqField.BigQueryFieldOptions buildPartial() {
        gen_bq_schema.BqField.BigQueryFieldOptions result = new gen_bq_schema.BqField.BigQueryFieldOptions(this);
        result.require_ = require_;
        result.typeOverride_ = typeOverride_;
        result.ignore_ = ignore_;
        result.description_ = description_;
        result.name_ = name_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gen_bq_schema.BqField.BigQueryFieldOptions) {
          return mergeFrom((gen_bq_schema.BqField.BigQueryFieldOptions)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gen_bq_schema.BqField.BigQueryFieldOptions other) {
        if (other == gen_bq_schema.BqField.BigQueryFieldOptions.getDefaultInstance()) return this;
        if (other.getRequire() != false) {
          setRequire(other.getRequire());
        }
        if (!other.getTypeOverride().isEmpty()) {
          typeOverride_ = other.typeOverride_;
          onChanged();
        }
        if (other.getIgnore() != false) {
          setIgnore(other.getIgnore());
        }
        if (!other.getDescription().isEmpty()) {
          description_ = other.description_;
          onChanged();
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gen_bq_schema.BqField.BigQueryFieldOptions parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gen_bq_schema.BqField.BigQueryFieldOptions) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private boolean require_ ;
      /**
       * <pre>
       * Flag to specify that a field should be marked as 'REQUIRED' when
       * used to generate schema for BigQuery.
       * </pre>
       *
       * <code>bool require = 1 [json_name = "require"];</code>
       * @return The require.
       */
      @java.lang.Override
      public boolean getRequire() {
        return require_;
      }
      /**
       * <pre>
       * Flag to specify that a field should be marked as 'REQUIRED' when
       * used to generate schema for BigQuery.
       * </pre>
       *
       * <code>bool require = 1 [json_name = "require"];</code>
       * @param value The require to set.
       * @return This builder for chaining.
       */
      public Builder setRequire(boolean value) {
        
        require_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Flag to specify that a field should be marked as 'REQUIRED' when
       * used to generate schema for BigQuery.
       * </pre>
       *
       * <code>bool require = 1 [json_name = "require"];</code>
       * @return This builder for chaining.
       */
      public Builder clearRequire() {
        
        require_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object typeOverride_ = "";
      /**
       * <pre>
       * Optionally override whatever type is resolved by the schema
       * generator. This is useful, for example, to store epoch timestamps
       * with the underlying 'TIMESTAMP' type, when normally, they would
       * be structured as 'INTEGER' fields.
       * </pre>
       *
       * <code>string type_override = 2 [json_name = "typeOverride"];</code>
       * @return The typeOverride.
       */
      public java.lang.String getTypeOverride() {
        java.lang.Object ref = typeOverride_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          typeOverride_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Optionally override whatever type is resolved by the schema
       * generator. This is useful, for example, to store epoch timestamps
       * with the underlying 'TIMESTAMP' type, when normally, they would
       * be structured as 'INTEGER' fields.
       * </pre>
       *
       * <code>string type_override = 2 [json_name = "typeOverride"];</code>
       * @return The bytes for typeOverride.
       */
      public com.google.protobuf.ByteString
          getTypeOverrideBytes() {
        java.lang.Object ref = typeOverride_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          typeOverride_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Optionally override whatever type is resolved by the schema
       * generator. This is useful, for example, to store epoch timestamps
       * with the underlying 'TIMESTAMP' type, when normally, they would
       * be structured as 'INTEGER' fields.
       * </pre>
       *
       * <code>string type_override = 2 [json_name = "typeOverride"];</code>
       * @param value The typeOverride to set.
       * @return This builder for chaining.
       */
      public Builder setTypeOverride(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        typeOverride_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optionally override whatever type is resolved by the schema
       * generator. This is useful, for example, to store epoch timestamps
       * with the underlying 'TIMESTAMP' type, when normally, they would
       * be structured as 'INTEGER' fields.
       * </pre>
       *
       * <code>string type_override = 2 [json_name = "typeOverride"];</code>
       * @return This builder for chaining.
       */
      public Builder clearTypeOverride() {
        
        typeOverride_ = getDefaultInstance().getTypeOverride();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optionally override whatever type is resolved by the schema
       * generator. This is useful, for example, to store epoch timestamps
       * with the underlying 'TIMESTAMP' type, when normally, they would
       * be structured as 'INTEGER' fields.
       * </pre>
       *
       * <code>string type_override = 2 [json_name = "typeOverride"];</code>
       * @param value The bytes for typeOverride to set.
       * @return This builder for chaining.
       */
      public Builder setTypeOverrideBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        typeOverride_ = value;
        onChanged();
        return this;
      }

      private boolean ignore_ ;
      /**
       * <pre>
       * Optionally omit a field from BigQuery schema.
       * </pre>
       *
       * <code>bool ignore = 3 [json_name = "ignore"];</code>
       * @return The ignore.
       */
      @java.lang.Override
      public boolean getIgnore() {
        return ignore_;
      }
      /**
       * <pre>
       * Optionally omit a field from BigQuery schema.
       * </pre>
       *
       * <code>bool ignore = 3 [json_name = "ignore"];</code>
       * @param value The ignore to set.
       * @return This builder for chaining.
       */
      public Builder setIgnore(boolean value) {
        
        ignore_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optionally omit a field from BigQuery schema.
       * </pre>
       *
       * <code>bool ignore = 3 [json_name = "ignore"];</code>
       * @return This builder for chaining.
       */
      public Builder clearIgnore() {
        
        ignore_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object description_ = "";
      /**
       * <pre>
       * Set the description for a field in BigQuery schema.
       * </pre>
       *
       * <code>string description = 4 [json_name = "description"];</code>
       * @return The description.
       */
      public java.lang.String getDescription() {
        java.lang.Object ref = description_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          description_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Set the description for a field in BigQuery schema.
       * </pre>
       *
       * <code>string description = 4 [json_name = "description"];</code>
       * @return The bytes for description.
       */
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        java.lang.Object ref = description_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          description_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Set the description for a field in BigQuery schema.
       * </pre>
       *
       * <code>string description = 4 [json_name = "description"];</code>
       * @param value The description to set.
       * @return This builder for chaining.
       */
      public Builder setDescription(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        description_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set the description for a field in BigQuery schema.
       * </pre>
       *
       * <code>string description = 4 [json_name = "description"];</code>
       * @return This builder for chaining.
       */
      public Builder clearDescription() {
        
        description_ = getDefaultInstance().getDescription();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set the description for a field in BigQuery schema.
       * </pre>
       *
       * <code>string description = 4 [json_name = "description"];</code>
       * @param value The bytes for description to set.
       * @return This builder for chaining.
       */
      public Builder setDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        description_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Customize the name of the field in the BigQuery schema.
       * </pre>
       *
       * <code>string name = 5 [json_name = "name"];</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Customize the name of the field in the BigQuery schema.
       * </pre>
       *
       * <code>string name = 5 [json_name = "name"];</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Customize the name of the field in the BigQuery schema.
       * </pre>
       *
       * <code>string name = 5 [json_name = "name"];</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Customize the name of the field in the BigQuery schema.
       * </pre>
       *
       * <code>string name = 5 [json_name = "name"];</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Customize the name of the field in the BigQuery schema.
       * </pre>
       *
       * <code>string name = 5 [json_name = "name"];</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:gen_bq_schema.BigQueryFieldOptions)
    }

    // @@protoc_insertion_point(class_scope:gen_bq_schema.BigQueryFieldOptions)
    private static final gen_bq_schema.BqField.BigQueryFieldOptions DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gen_bq_schema.BqField.BigQueryFieldOptions();
    }

    public static gen_bq_schema.BqField.BigQueryFieldOptions getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BigQueryFieldOptions>
        PARSER = new com.google.protobuf.AbstractParser<BigQueryFieldOptions>() {
      @java.lang.Override
      public BigQueryFieldOptions parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BigQueryFieldOptions(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BigQueryFieldOptions> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BigQueryFieldOptions> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public gen_bq_schema.BqField.BigQueryFieldOptions getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int BIGQUERY_FIELD_NUMBER = 1021;
  /**
   * <pre>
   * BigQuery field schema generation options.
   * </pre>
   *
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      gen_bq_schema.BqField.BigQueryFieldOptions> bigquery = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        gen_bq_schema.BqField.BigQueryFieldOptions.class,
        gen_bq_schema.BqField.BigQueryFieldOptions.getDefaultInstance());
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gen_bq_schema_BigQueryFieldOptions_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gen_bq_schema_BigQueryFieldOptions_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\034gen_bq_schema/bq_field.proto\022\rgen_bq_s" +
      "chema\032 google/protobuf/descriptor.proto\"" +
      "\243\001\n\024BigQueryFieldOptions\022\030\n\007require\030\001 \001(" +
      "\010R\007require\022#\n\rtype_override\030\002 \001(\tR\014typeO" +
      "verride\022\026\n\006ignore\030\003 \001(\010R\006ignore\022 \n\013descr" +
      "iption\030\004 \001(\tR\013description\022\022\n\004name\030\005 \001(\tR" +
      "\004name:_\n\010bigquery\022\035.google.protobuf.Fiel" +
      "dOptions\030\375\007 \001(\0132#.gen_bq_schema.BigQuery" +
      "FieldOptionsR\010bigqueryBAZ?github.com/e-c" +
      "onomic/vmlapis/gen/go/gen_bq_schema;gen_" +
      "bq_schemab\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.DescriptorProtos.getDescriptor(),
        });
    internal_static_gen_bq_schema_BigQueryFieldOptions_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_gen_bq_schema_BigQueryFieldOptions_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gen_bq_schema_BigQueryFieldOptions_descriptor,
        new java.lang.String[] { "Require", "TypeOverride", "Ignore", "Description", "Name", });
    bigquery.internalInit(descriptor.getExtensions().get(0));
    com.google.protobuf.DescriptorProtos.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
