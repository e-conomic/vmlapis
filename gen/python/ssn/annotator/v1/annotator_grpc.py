# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: ssn/annotator/v1/annotator.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import protoc_gen_openapiv2.options.annotations_pb2
import ssn.type.candidate_pb2
import ssn.type.text_annotation_pb2
import ssn.type.tier_pb2
import ssn.annotator.v1.annotator_pb2


class DocumentAnnotatorBase(abc.ABC):

    @abc.abstractmethod
    async def AnnotateDocument(self, stream: 'grpclib.server.Stream[ssn.annotator.v1.annotator_pb2.DocumentAnnotatorRequest, ssn.annotator.v1.annotator_pb2.DocumentAnnotatorResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/ssn.annotator.v1.DocumentAnnotator/AnnotateDocument': grpclib.const.Handler(
                self.AnnotateDocument,
                grpclib.const.Cardinality.UNARY_UNARY,
                ssn.annotator.v1.annotator_pb2.DocumentAnnotatorRequest,
                ssn.annotator.v1.annotator_pb2.DocumentAnnotatorResponse,
            ),
        }


class DocumentAnnotatorStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.AnnotateDocument = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ssn.annotator.v1.DocumentAnnotator/AnnotateDocument',
            ssn.annotator.v1.annotator_pb2.DocumentAnnotatorRequest,
            ssn.annotator.v1.annotator_pb2.DocumentAnnotatorResponse,
        )
