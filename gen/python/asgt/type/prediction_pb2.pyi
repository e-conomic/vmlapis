"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Confidence(google.protobuf.message.Message):
    """Common types"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _Level:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _LevelEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Confidence._Level.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNKNOWN: Confidence._Level.ValueType  # 0
        VERY_LOW: Confidence._Level.ValueType  # 1
        LOW: Confidence._Level.ValueType  # 2
        MID: Confidence._Level.ValueType  # 3
        HIGH: Confidence._Level.ValueType  # 4
        VERY_HIGH: Confidence._Level.ValueType  # 5
    class Level(_Level, metaclass=_LevelEnumTypeWrapper):
        pass

    UNKNOWN: Confidence.Level.ValueType  # 0
    VERY_LOW: Confidence.Level.ValueType  # 1
    LOW: Confidence.Level.ValueType  # 2
    MID: Confidence.Level.ValueType  # 3
    HIGH: Confidence.Level.ValueType  # 4
    VERY_HIGH: Confidence.Level.ValueType  # 5

    LEVEL_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    level: global___Confidence.Level.ValueType
    """A bucketized representation of confidence, which is intended to give clients
    highly stable results across model upgrades.
    """

    @property
    def value(self) -> google.protobuf.wrappers_pb2.FloatValue:
        """The confidence value"""
        pass
    def __init__(self,
        *,
        level: global___Confidence.Level.ValueType = ...,
        value: typing.Optional[google.protobuf.wrappers_pb2.FloatValue] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["level",b"level","value",b"value"]) -> None: ...
global___Confidence = Confidence

class Prediction(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class Target(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        class Candidate(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor
            VALUE_FIELD_NUMBER: builtins.int
            CONFIDENCE_FIELD_NUMBER: builtins.int
            value: typing.Text
            @property
            def confidence(self) -> global___Confidence: ...
            def __init__(self,
                *,
                value: typing.Text = ...,
                confidence: typing.Optional[global___Confidence] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["confidence",b"confidence"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["confidence",b"confidence","value",b"value"]) -> None: ...

        NAME_FIELD_NUMBER: builtins.int
        CANDIDATES_FIELD_NUMBER: builtins.int
        name: typing.Text
        @property
        def candidates(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Prediction.Target.Candidate]: ...
        def __init__(self,
            *,
            name: typing.Text = ...,
            candidates: typing.Optional[typing.Iterable[global___Prediction.Target.Candidate]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["candidates",b"candidates","name",b"name"]) -> None: ...

    TARGETS_FIELD_NUMBER: builtins.int
    @property
    def targets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Prediction.Target]: ...
    def __init__(self,
        *,
        targets: typing.Optional[typing.Iterable[global___Prediction.Target]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["targets",b"targets"]) -> None: ...
global___Prediction = Prediction
