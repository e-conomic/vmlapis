// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: cv/cv.proto

package cv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CvScannerClient is the client API for CvScanner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CvScannerClient interface {
	ScanDocument(ctx context.Context, in *ScanDocumentRequest, opts ...grpc.CallOption) (*ScanDocumentResponse, error)
}

type cvScannerClient struct {
	cc grpc.ClientConnInterface
}

func NewCvScannerClient(cc grpc.ClientConnInterface) CvScannerClient {
	return &cvScannerClient{cc}
}

func (c *cvScannerClient) ScanDocument(ctx context.Context, in *ScanDocumentRequest, opts ...grpc.CallOption) (*ScanDocumentResponse, error) {
	out := new(ScanDocumentResponse)
	err := c.cc.Invoke(ctx, "/cv.scanner.v1.CvScanner/ScanDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CvScannerServer is the server API for CvScanner service.
// All implementations should embed UnimplementedCvScannerServer
// for forward compatibility
type CvScannerServer interface {
	ScanDocument(context.Context, *ScanDocumentRequest) (*ScanDocumentResponse, error)
}

// UnimplementedCvScannerServer should be embedded to have forward compatible implementations.
type UnimplementedCvScannerServer struct {
}

func (UnimplementedCvScannerServer) ScanDocument(context.Context, *ScanDocumentRequest) (*ScanDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanDocument not implemented")
}

// UnsafeCvScannerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CvScannerServer will
// result in compilation errors.
type UnsafeCvScannerServer interface {
	mustEmbedUnimplementedCvScannerServer()
}

func RegisterCvScannerServer(s grpc.ServiceRegistrar, srv CvScannerServer) {
	s.RegisterService(&CvScanner_ServiceDesc, srv)
}

func _CvScanner_ScanDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CvScannerServer).ScanDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cv.scanner.v1.CvScanner/ScanDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CvScannerServer).ScanDocument(ctx, req.(*ScanDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CvScanner_ServiceDesc is the grpc.ServiceDesc for CvScanner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CvScanner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cv.scanner.v1.CvScanner",
	HandlerType: (*CvScannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanDocument",
			Handler:    _CvScanner_ScanDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cv/cv.proto",
}
