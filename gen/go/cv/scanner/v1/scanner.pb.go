// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: cv/scanner/v1/scanner.proto

package cv

import (
	_type "github.com/e-conomic/vmlapis/gen/go/ssn/type"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Feature_Type int32

const (
	Feature_FIRST_NAME        Feature_Type = 0
	Feature_LAST_NAME         Feature_Type = 1
	Feature_DATE_OF_BIRTH     Feature_Type = 2
	Feature_PHONE             Feature_Type = 3
	Feature_EMAIL             Feature_Type = 4
	Feature_COUNTRY           Feature_Type = 5
	Feature_NATIONALITY       Feature_Type = 6
	Feature_POSTAL_CODE       Feature_Type = 7
	Feature_POSTAL_AREA       Feature_Type = 8
	Feature_MUNICIPALITY      Feature_Type = 9
	Feature_COUNTY            Feature_Type = 10
	Feature_ADDRESS           Feature_Type = 11
	Feature_EMPLOYER_NAME     Feature_Type = 12
	Feature_POSITION_TITLE    Feature_Type = 13
	Feature_DATE              Feature_Type = 14
	Feature_INSTITUTE_NAME    Feature_Type = 15
	Feature_INSTITUTE_TYPE    Feature_Type = 16
	Feature_AREA_OF_EDUCATION Feature_Type = 17
	Feature_DEGREE            Feature_Type = 18
	Feature_AVERAGE_GRADE     Feature_Type = 19
	Feature_NAME              Feature_Type = 20
	Feature_LEVEL             Feature_Type = 21
)

// Enum value maps for Feature_Type.
var (
	Feature_Type_name = map[int32]string{
		0:  "FIRST_NAME",
		1:  "LAST_NAME",
		2:  "DATE_OF_BIRTH",
		3:  "PHONE",
		4:  "EMAIL",
		5:  "COUNTRY",
		6:  "NATIONALITY",
		7:  "POSTAL_CODE",
		8:  "POSTAL_AREA",
		9:  "MUNICIPALITY",
		10: "COUNTY",
		11: "ADDRESS",
		12: "EMPLOYER_NAME",
		13: "POSITION_TITLE",
		14: "DATE",
		15: "INSTITUTE_NAME",
		16: "INSTITUTE_TYPE",
		17: "AREA_OF_EDUCATION",
		18: "DEGREE",
		19: "AVERAGE_GRADE",
		20: "NAME",
		21: "LEVEL",
	}
	Feature_Type_value = map[string]int32{
		"FIRST_NAME":        0,
		"LAST_NAME":         1,
		"DATE_OF_BIRTH":     2,
		"PHONE":             3,
		"EMAIL":             4,
		"COUNTRY":           5,
		"NATIONALITY":       6,
		"POSTAL_CODE":       7,
		"POSTAL_AREA":       8,
		"MUNICIPALITY":      9,
		"COUNTY":            10,
		"ADDRESS":           11,
		"EMPLOYER_NAME":     12,
		"POSITION_TITLE":    13,
		"DATE":              14,
		"INSTITUTE_NAME":    15,
		"INSTITUTE_TYPE":    16,
		"AREA_OF_EDUCATION": 17,
		"DEGREE":            18,
		"AVERAGE_GRADE":     19,
		"NAME":              20,
		"LEVEL":             21,
	}
)

func (x Feature_Type) Enum() *Feature_Type {
	p := new(Feature_Type)
	*p = x
	return p
}

func (x Feature_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Feature_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cv_scanner_v1_scanner_proto_enumTypes[0].Descriptor()
}

func (Feature_Type) Type() protoreflect.EnumType {
	return &file_cv_scanner_v1_scanner_proto_enumTypes[0]
}

func (x Feature_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Feature_Type.Descriptor instead.
func (Feature_Type) EnumDescriptor() ([]byte, []int) {
	return file_cv_scanner_v1_scanner_proto_rawDescGZIP(), []int{2, 0}
}

type ScanCVRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Document *Document  `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	Features []*Feature `protobuf:"bytes,2,rep,name=features,proto3" json:"features,omitempty"`
	Tags     []string   `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ScanCVRequest) Reset() {
	*x = ScanCVRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cv_scanner_v1_scanner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanCVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanCVRequest) ProtoMessage() {}

func (x *ScanCVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cv_scanner_v1_scanner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanCVRequest.ProtoReflect.Descriptor instead.
func (*ScanCVRequest) Descriptor() ([]byte, []int) {
	return file_cv_scanner_v1_scanner_proto_rawDescGZIP(), []int{0}
}

func (x *ScanCVRequest) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *ScanCVRequest) GetFeatures() []*Feature {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *ScanCVRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ScanCVResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName       []*_type.Candidate `protobuf:"bytes,1,rep,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName        []*_type.Candidate `protobuf:"bytes,2,rep,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	DateOfBirth     []*_type.Candidate `protobuf:"bytes,3,rep,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	Phone           []*_type.Candidate `protobuf:"bytes,4,rep,name=phone,proto3" json:"phone,omitempty"`
	Email           []*_type.Candidate `protobuf:"bytes,5,rep,name=email,proto3" json:"email,omitempty"`
	Country         []*_type.Candidate `protobuf:"bytes,6,rep,name=country,proto3" json:"country,omitempty"`
	Nationality     []*_type.Candidate `protobuf:"bytes,7,rep,name=nationality,proto3" json:"nationality,omitempty"`
	PostalCode      []*_type.Candidate `protobuf:"bytes,8,rep,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	PostalArea      []*_type.Candidate `protobuf:"bytes,9,rep,name=postal_area,json=postalArea,proto3" json:"postal_area,omitempty"`
	Municipality    []*_type.Candidate `protobuf:"bytes,10,rep,name=municipality,proto3" json:"municipality,omitempty"`
	County          []*_type.Candidate `protobuf:"bytes,11,rep,name=county,proto3" json:"county,omitempty"`
	Adress          []*_type.Candidate `protobuf:"bytes,12,rep,name=adress,proto3" json:"adress,omitempty"`
	EmpoloyerName   []*_type.Candidate `protobuf:"bytes,13,rep,name=empoloyer_name,json=empoloyerName,proto3" json:"empoloyer_name,omitempty"`
	PositionTitle   []*_type.Candidate `protobuf:"bytes,14,rep,name=position_title,json=positionTitle,proto3" json:"position_title,omitempty"`
	Date            []*_type.Candidate `protobuf:"bytes,15,rep,name=date,proto3" json:"date,omitempty"`
	InstitutionType []*_type.Candidate `protobuf:"bytes,16,rep,name=institution_type,json=institutionType,proto3" json:"institution_type,omitempty"`
	AreaOfEducation []*_type.Candidate `protobuf:"bytes,17,rep,name=area_of_education,json=areaOfEducation,proto3" json:"area_of_education,omitempty"`
	Degree          []*_type.Candidate `protobuf:"bytes,19,rep,name=degree,proto3" json:"degree,omitempty"`
	AverageGrade    []*_type.Candidate `protobuf:"bytes,20,rep,name=average_grade,json=averageGrade,proto3" json:"average_grade,omitempty"`
	Name            []*_type.Candidate `protobuf:"bytes,21,rep,name=name,proto3" json:"name,omitempty"`
	Level           []*_type.Candidate `protobuf:"bytes,22,rep,name=level,proto3" json:"level,omitempty"`
}

func (x *ScanCVResponse) Reset() {
	*x = ScanCVResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cv_scanner_v1_scanner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanCVResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanCVResponse) ProtoMessage() {}

func (x *ScanCVResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cv_scanner_v1_scanner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanCVResponse.ProtoReflect.Descriptor instead.
func (*ScanCVResponse) Descriptor() ([]byte, []int) {
	return file_cv_scanner_v1_scanner_proto_rawDescGZIP(), []int{1}
}

func (x *ScanCVResponse) GetFirstName() []*_type.Candidate {
	if x != nil {
		return x.FirstName
	}
	return nil
}

func (x *ScanCVResponse) GetLastName() []*_type.Candidate {
	if x != nil {
		return x.LastName
	}
	return nil
}

func (x *ScanCVResponse) GetDateOfBirth() []*_type.Candidate {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *ScanCVResponse) GetPhone() []*_type.Candidate {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *ScanCVResponse) GetEmail() []*_type.Candidate {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *ScanCVResponse) GetCountry() []*_type.Candidate {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *ScanCVResponse) GetNationality() []*_type.Candidate {
	if x != nil {
		return x.Nationality
	}
	return nil
}

func (x *ScanCVResponse) GetPostalCode() []*_type.Candidate {
	if x != nil {
		return x.PostalCode
	}
	return nil
}

func (x *ScanCVResponse) GetPostalArea() []*_type.Candidate {
	if x != nil {
		return x.PostalArea
	}
	return nil
}

func (x *ScanCVResponse) GetMunicipality() []*_type.Candidate {
	if x != nil {
		return x.Municipality
	}
	return nil
}

func (x *ScanCVResponse) GetCounty() []*_type.Candidate {
	if x != nil {
		return x.County
	}
	return nil
}

func (x *ScanCVResponse) GetAdress() []*_type.Candidate {
	if x != nil {
		return x.Adress
	}
	return nil
}

func (x *ScanCVResponse) GetEmpoloyerName() []*_type.Candidate {
	if x != nil {
		return x.EmpoloyerName
	}
	return nil
}

func (x *ScanCVResponse) GetPositionTitle() []*_type.Candidate {
	if x != nil {
		return x.PositionTitle
	}
	return nil
}

func (x *ScanCVResponse) GetDate() []*_type.Candidate {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ScanCVResponse) GetInstitutionType() []*_type.Candidate {
	if x != nil {
		return x.InstitutionType
	}
	return nil
}

func (x *ScanCVResponse) GetAreaOfEducation() []*_type.Candidate {
	if x != nil {
		return x.AreaOfEducation
	}
	return nil
}

func (x *ScanCVResponse) GetDegree() []*_type.Candidate {
	if x != nil {
		return x.Degree
	}
	return nil
}

func (x *ScanCVResponse) GetAverageGrade() []*_type.Candidate {
	if x != nil {
		return x.AverageGrade
	}
	return nil
}

func (x *ScanCVResponse) GetName() []*_type.Candidate {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ScanCVResponse) GetLevel() []*_type.Candidate {
	if x != nil {
		return x.Level
	}
	return nil
}

type Feature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The feature type.
	Type Feature_Type `protobuf:"varint,1,opt,name=type,proto3,enum=cv.scanner.v1.Feature_Type" json:"type,omitempty"`
	// Maximum number of results of this type. Does not apply to
	// `TEXT_ANNOTATION` or `DOCUMENT_TYPE`.
	MaxResults int32 `protobuf:"varint,2,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
}

func (x *Feature) Reset() {
	*x = Feature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cv_scanner_v1_scanner_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_cv_scanner_v1_scanner_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_cv_scanner_v1_scanner_proto_rawDescGZIP(), []int{2}
}

func (x *Feature) GetType() Feature_Type {
	if x != nil {
		return x.Type
	}
	return Feature_FIRST_NAME
}

func (x *Feature) GetMaxResults() int32 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Document content, represented as a stream of bytes.
	// Note: As with all `bytes` fields, protobuffers use a pure binary
	// representation, whereas JSON representations use base64.
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Google Cloud Storage image location, or publicly-accessible image
	// URL. If both `content` and `source` are provided for a document, `content`
	// takes precedence and is used to perform the scan request.
	Source *DocumentSource `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cv_scanner_v1_scanner_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_cv_scanner_v1_scanner_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_cv_scanner_v1_scanner_proto_rawDescGZIP(), []int{3}
}

func (x *Document) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Document) GetSource() *DocumentSource {
	if x != nil {
		return x.Source
	}
	return nil
}

type DocumentSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URI of the source document. Can be either:
	//
	// 1. A publicly-accessible image HTTP/HTTPS URL. When fetching images from
	//    HTTP/HTTPS URLs, We cannot guarantee that the request will be
	//    completed. Your request may fail if the specified host denies the
	//    request (e.g. due to request throttling or DOS prevention).
	//
	HttpUri string `protobuf:"bytes,1,opt,name=http_uri,json=httpUri,proto3" json:"http_uri,omitempty"`
}

func (x *DocumentSource) Reset() {
	*x = DocumentSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cv_scanner_v1_scanner_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSource) ProtoMessage() {}

func (x *DocumentSource) ProtoReflect() protoreflect.Message {
	mi := &file_cv_scanner_v1_scanner_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSource.ProtoReflect.Descriptor instead.
func (*DocumentSource) Descriptor() ([]byte, []int) {
	return file_cv_scanner_v1_scanner_proto_rawDescGZIP(), []int{4}
}

func (x *DocumentSource) GetHttpUri() string {
	if x != nil {
		return x.HttpUri
	}
	return ""
}

var File_cv_scanner_v1_scanner_proto protoreflect.FileDescriptor

var file_cv_scanner_v1_scanner_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x76, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63,
	0x76, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x73, 0x73, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x01, 0x0a, 0x0d,
	0x53, 0x63, 0x61, 0x6e, 0x43, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x76, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x76, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xc7, 0x08, 0x0a, 0x0e, 0x53,
	0x63, 0x61, 0x6e, 0x43, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x35, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x37, 0x0a, 0x0c, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a,
	0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x06, 0x61, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x65, 0x6d, 0x70, 0x6f, 0x6c,
	0x6f, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x65, 0x6d, 0x70, 0x6f, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x61, 0x72, 0x65, 0x61, 0x4f, 0x66,
	0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x64, 0x65, 0x67,
	0x72, 0x65, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06,
	0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0xbb, 0x03, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x63, 0x76, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0xdd, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x46,
	0x49, 0x52, 0x53, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x49, 0x52, 0x54, 0x48, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10,
	0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x53, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x53, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x45,
	0x41, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x59, 0x10,
	0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x0b, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49,
	0x54, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0e, 0x12,
	0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x53, 0x54, 0x49, 0x54, 0x55, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x53, 0x54, 0x49, 0x54, 0x55, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x52, 0x45, 0x41, 0x5f,
	0x4f, 0x46, 0x5f, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x45, 0x47, 0x52, 0x45, 0x45, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x56,
	0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x13, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x10, 0x15, 0x22, 0x5b, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x76, 0x2e, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x2b, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x74, 0x74, 0x70, 0x55, 0x72, 0x69, 0x32, 0x70, 0x0a, 0x09,
	0x43, 0x76, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x06, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x56, 0x12, 0x1c, 0x2e, 0x63, 0x76, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x76, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x73, 0x63, 0x61, 0x6e, 0x42, 0x31,
	0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x2d, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x2f, 0x76, 0x6d, 0x6c, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x76, 0x2f, 0x63, 0x76, 0x2f, 0x76, 0x31, 0x3b, 0x63,
	0x76, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cv_scanner_v1_scanner_proto_rawDescOnce sync.Once
	file_cv_scanner_v1_scanner_proto_rawDescData = file_cv_scanner_v1_scanner_proto_rawDesc
)

func file_cv_scanner_v1_scanner_proto_rawDescGZIP() []byte {
	file_cv_scanner_v1_scanner_proto_rawDescOnce.Do(func() {
		file_cv_scanner_v1_scanner_proto_rawDescData = protoimpl.X.CompressGZIP(file_cv_scanner_v1_scanner_proto_rawDescData)
	})
	return file_cv_scanner_v1_scanner_proto_rawDescData
}

var file_cv_scanner_v1_scanner_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cv_scanner_v1_scanner_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_cv_scanner_v1_scanner_proto_goTypes = []interface{}{
	(Feature_Type)(0),       // 0: cv.scanner.v1.Feature.Type
	(*ScanCVRequest)(nil),   // 1: cv.scanner.v1.ScanCVRequest
	(*ScanCVResponse)(nil),  // 2: cv.scanner.v1.ScanCVResponse
	(*Feature)(nil),         // 3: cv.scanner.v1.Feature
	(*Document)(nil),        // 4: cv.scanner.v1.Document
	(*DocumentSource)(nil),  // 5: cv.scanner.v1.DocumentSource
	(*_type.Candidate)(nil), // 6: ssn.type.Candidate
}
var file_cv_scanner_v1_scanner_proto_depIdxs = []int32{
	4,  // 0: cv.scanner.v1.ScanCVRequest.document:type_name -> cv.scanner.v1.Document
	3,  // 1: cv.scanner.v1.ScanCVRequest.features:type_name -> cv.scanner.v1.Feature
	6,  // 2: cv.scanner.v1.ScanCVResponse.first_name:type_name -> ssn.type.Candidate
	6,  // 3: cv.scanner.v1.ScanCVResponse.last_name:type_name -> ssn.type.Candidate
	6,  // 4: cv.scanner.v1.ScanCVResponse.date_of_birth:type_name -> ssn.type.Candidate
	6,  // 5: cv.scanner.v1.ScanCVResponse.phone:type_name -> ssn.type.Candidate
	6,  // 6: cv.scanner.v1.ScanCVResponse.email:type_name -> ssn.type.Candidate
	6,  // 7: cv.scanner.v1.ScanCVResponse.country:type_name -> ssn.type.Candidate
	6,  // 8: cv.scanner.v1.ScanCVResponse.nationality:type_name -> ssn.type.Candidate
	6,  // 9: cv.scanner.v1.ScanCVResponse.postal_code:type_name -> ssn.type.Candidate
	6,  // 10: cv.scanner.v1.ScanCVResponse.postal_area:type_name -> ssn.type.Candidate
	6,  // 11: cv.scanner.v1.ScanCVResponse.municipality:type_name -> ssn.type.Candidate
	6,  // 12: cv.scanner.v1.ScanCVResponse.county:type_name -> ssn.type.Candidate
	6,  // 13: cv.scanner.v1.ScanCVResponse.adress:type_name -> ssn.type.Candidate
	6,  // 14: cv.scanner.v1.ScanCVResponse.empoloyer_name:type_name -> ssn.type.Candidate
	6,  // 15: cv.scanner.v1.ScanCVResponse.position_title:type_name -> ssn.type.Candidate
	6,  // 16: cv.scanner.v1.ScanCVResponse.date:type_name -> ssn.type.Candidate
	6,  // 17: cv.scanner.v1.ScanCVResponse.institution_type:type_name -> ssn.type.Candidate
	6,  // 18: cv.scanner.v1.ScanCVResponse.area_of_education:type_name -> ssn.type.Candidate
	6,  // 19: cv.scanner.v1.ScanCVResponse.degree:type_name -> ssn.type.Candidate
	6,  // 20: cv.scanner.v1.ScanCVResponse.average_grade:type_name -> ssn.type.Candidate
	6,  // 21: cv.scanner.v1.ScanCVResponse.name:type_name -> ssn.type.Candidate
	6,  // 22: cv.scanner.v1.ScanCVResponse.level:type_name -> ssn.type.Candidate
	0,  // 23: cv.scanner.v1.Feature.type:type_name -> cv.scanner.v1.Feature.Type
	5,  // 24: cv.scanner.v1.Document.source:type_name -> cv.scanner.v1.DocumentSource
	1,  // 25: cv.scanner.v1.CvScanner.ScanCV:input_type -> cv.scanner.v1.ScanCVRequest
	2,  // 26: cv.scanner.v1.CvScanner.ScanCV:output_type -> cv.scanner.v1.ScanCVResponse
	26, // [26:27] is the sub-list for method output_type
	25, // [25:26] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_cv_scanner_v1_scanner_proto_init() }
func file_cv_scanner_v1_scanner_proto_init() {
	if File_cv_scanner_v1_scanner_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cv_scanner_v1_scanner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanCVRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cv_scanner_v1_scanner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanCVResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cv_scanner_v1_scanner_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cv_scanner_v1_scanner_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cv_scanner_v1_scanner_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cv_scanner_v1_scanner_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cv_scanner_v1_scanner_proto_goTypes,
		DependencyIndexes: file_cv_scanner_v1_scanner_proto_depIdxs,
		EnumInfos:         file_cv_scanner_v1_scanner_proto_enumTypes,
		MessageInfos:      file_cv_scanner_v1_scanner_proto_msgTypes,
	}.Build()
	File_cv_scanner_v1_scanner_proto = out.File
	file_cv_scanner_v1_scanner_proto_rawDesc = nil
	file_cv_scanner_v1_scanner_proto_goTypes = nil
	file_cv_scanner_v1_scanner_proto_depIdxs = nil
}
