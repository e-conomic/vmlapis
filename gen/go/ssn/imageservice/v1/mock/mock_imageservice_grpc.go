// Code generated by MockGen. DO NOT EDIT.
// Source: gen/go/ssn/imageservice/v1/imageservice_grpc.pb.go

// Package mock_imageservice is a generated GoMock package.
package mock_imageservice

import (
	context "context"
	reflect "reflect"

	imageservice "github.com/e-conomic/vmlapis/gen/go/ssn/imageservice/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockImageServiceClient is a mock of ImageServiceClient interface.
type MockImageServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockImageServiceClientMockRecorder
}

// MockImageServiceClientMockRecorder is the mock recorder for MockImageServiceClient.
type MockImageServiceClientMockRecorder struct {
	mock *MockImageServiceClient
}

// NewMockImageServiceClient creates a new mock instance.
func NewMockImageServiceClient(ctrl *gomock.Controller) *MockImageServiceClient {
	mock := &MockImageServiceClient{ctrl: ctrl}
	mock.recorder = &MockImageServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageServiceClient) EXPECT() *MockImageServiceClientMockRecorder {
	return m.recorder
}

// CreateImage mocks base method.
func (m *MockImageServiceClient) CreateImage(ctx context.Context, in *imageservice.CreateImageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateImage", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockImageServiceClientMockRecorder) CreateImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockImageServiceClient)(nil).CreateImage), varargs...)
}

// MockImageServiceServer is a mock of ImageServiceServer interface.
type MockImageServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockImageServiceServerMockRecorder
}

// MockImageServiceServerMockRecorder is the mock recorder for MockImageServiceServer.
type MockImageServiceServerMockRecorder struct {
	mock *MockImageServiceServer
}

// NewMockImageServiceServer creates a new mock instance.
func NewMockImageServiceServer(ctrl *gomock.Controller) *MockImageServiceServer {
	mock := &MockImageServiceServer{ctrl: ctrl}
	mock.recorder = &MockImageServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageServiceServer) EXPECT() *MockImageServiceServerMockRecorder {
	return m.recorder
}

// CreateImage mocks base method.
func (m *MockImageServiceServer) CreateImage(arg0 context.Context, arg1 *imageservice.CreateImageRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockImageServiceServerMockRecorder) CreateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockImageServiceServer)(nil).CreateImage), arg0, arg1)
}

// MockUnsafeImageServiceServer is a mock of UnsafeImageServiceServer interface.
type MockUnsafeImageServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeImageServiceServerMockRecorder
}

// MockUnsafeImageServiceServerMockRecorder is the mock recorder for MockUnsafeImageServiceServer.
type MockUnsafeImageServiceServerMockRecorder struct {
	mock *MockUnsafeImageServiceServer
}

// NewMockUnsafeImageServiceServer creates a new mock instance.
func NewMockUnsafeImageServiceServer(ctrl *gomock.Controller) *MockUnsafeImageServiceServer {
	mock := &MockUnsafeImageServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeImageServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeImageServiceServer) EXPECT() *MockUnsafeImageServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedImageServiceServer mocks base method.
func (m *MockUnsafeImageServiceServer) mustEmbedUnimplementedImageServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedImageServiceServer")
}

// mustEmbedUnimplementedImageServiceServer indicates an expected call of mustEmbedUnimplementedImageServiceServer.
func (mr *MockUnsafeImageServiceServerMockRecorder) mustEmbedUnimplementedImageServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedImageServiceServer", reflect.TypeOf((*MockUnsafeImageServiceServer)(nil).mustEmbedUnimplementedImageServiceServer))
}
