// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ssn/featuregen/v1/featuregen.proto

package featuregen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on FeatureGenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FeatureGenRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTruthLabels()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeatureGenRequestValidationError{
				field:  "TruthLabels",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTextAnnotation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeatureGenRequestValidationError{
				field:  "TextAnnotation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FeatureGenRequestValidationError is the validation error returned by
// FeatureGenRequest.Validate if the designated constraints aren't met.
type FeatureGenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeatureGenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeatureGenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeatureGenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeatureGenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeatureGenRequestValidationError) ErrorName() string {
	return "FeatureGenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FeatureGenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeatureGenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeatureGenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeatureGenRequestValidationError{}

// Validate checks the field values on FeatureGenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FeatureGenResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetExample()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeatureGenResponseValidationError{
				field:  "Example",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FeatureGenResponseValidationError is the validation error returned by
// FeatureGenResponse.Validate if the designated constraints aren't met.
type FeatureGenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeatureGenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeatureGenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeatureGenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeatureGenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeatureGenResponseValidationError) ErrorName() string {
	return "FeatureGenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FeatureGenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeatureGenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeatureGenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeatureGenResponseValidationError{}

// Validate checks the field values on TruthLabels with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TruthLabels) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalInclVat

	// no validation rules for TotalVat

	// no validation rules for TotalExclVat

	// no validation rules for OrderDate

	// no validation rules for PaymentDueDate

	// no validation rules for DocumentType

	// no validation rules for Currency

	// no validation rules for CreditCardNumber

	// no validation rules for PaymentMethod

	// no validation rules for OcrLineDkType

	// no validation rules for OcrLineDkPaymentId

	// no validation rules for OcrLineDkCreditorId

	// no validation rules for OcrLineSePaymentId

	// no validation rules for OcrLineSeBankgiroCreditorId

	// no validation rules for OcrLineSePlusgiroCreditorId

	// no validation rules for OcrLineNoPaymentId

	// no validation rules for OcrLineFiPaymentId

	// no validation rules for SupplierName

	// no validation rules for SupplierCorporateId

	// no validation rules for SupplierCountryCode

	// no validation rules for InvoiceNumber

	return nil
}

// TruthLabelsValidationError is the validation error returned by
// TruthLabels.Validate if the designated constraints aren't met.
type TruthLabelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TruthLabelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TruthLabelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TruthLabelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TruthLabelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TruthLabelsValidationError) ErrorName() string { return "TruthLabelsValidationError" }

// Error satisfies the builtin error interface
func (e TruthLabelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTruthLabels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TruthLabelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TruthLabelsValidationError{}
