// Code generated by MockGen. DO NOT EDIT.
// Source: gen/go/ssn/scanner/v1/scanner.pb.go

// Package mock_scanner is a generated GoMock package.
package mock_scanner

import (
	x "github.com/e-conomic/vmlapis/gen/go/ssn/scanner/v1"
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockScannerClient is a mock of ScannerClient interface
type MockScannerClient struct {
	ctrl     *gomock.Controller
	recorder *MockScannerClientMockRecorder
}

// MockScannerClientMockRecorder is the mock recorder for MockScannerClient
type MockScannerClientMockRecorder struct {
	mock *MockScannerClient
}

// NewMockScannerClient creates a new mock instance
func NewMockScannerClient(ctrl *gomock.Controller) *MockScannerClient {
	mock := &MockScannerClient{ctrl: ctrl}
	mock.recorder = &MockScannerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScannerClient) EXPECT() *MockScannerClientMockRecorder {
	return m.recorder
}

// InternalScan mocks base method
func (m *MockScannerClient) InternalScan(ctx context.Context, in *x.ScanRequest, opts ...grpc.CallOption) (*x.InternalScanResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InternalScan", varargs...)
	ret0, _ := ret[0].(*x.InternalScanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalScan indicates an expected call of InternalScan
func (mr *MockScannerClientMockRecorder) InternalScan(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalScan", reflect.TypeOf((*MockScannerClient)(nil).InternalScan), varargs...)
}

// Scan mocks base method
func (m *MockScannerClient) Scan(ctx context.Context, in *x.ScanRequest, opts ...grpc.CallOption) (*x.ScanResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(*x.ScanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan
func (mr *MockScannerClientMockRecorder) Scan(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockScannerClient)(nil).Scan), varargs...)
}

// MockScannerServer is a mock of ScannerServer interface
type MockScannerServer struct {
	ctrl     *gomock.Controller
	recorder *MockScannerServerMockRecorder
}

// MockScannerServerMockRecorder is the mock recorder for MockScannerServer
type MockScannerServerMockRecorder struct {
	mock *MockScannerServer
}

// NewMockScannerServer creates a new mock instance
func NewMockScannerServer(ctrl *gomock.Controller) *MockScannerServer {
	mock := &MockScannerServer{ctrl: ctrl}
	mock.recorder = &MockScannerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScannerServer) EXPECT() *MockScannerServerMockRecorder {
	return m.recorder
}

// InternalScan mocks base method
func (m *MockScannerServer) InternalScan(arg0 context.Context, arg1 *x.ScanRequest) (*x.InternalScanResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalScan", arg0, arg1)
	ret0, _ := ret[0].(*x.InternalScanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalScan indicates an expected call of InternalScan
func (mr *MockScannerServerMockRecorder) InternalScan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalScan", reflect.TypeOf((*MockScannerServer)(nil).InternalScan), arg0, arg1)
}

// Scan mocks base method
func (m *MockScannerServer) Scan(arg0 context.Context, arg1 *x.ScanRequest) (*x.ScanResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0, arg1)
	ret0, _ := ret[0].(*x.ScanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan
func (mr *MockScannerServerMockRecorder) Scan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockScannerServer)(nil).Scan), arg0, arg1)
}
