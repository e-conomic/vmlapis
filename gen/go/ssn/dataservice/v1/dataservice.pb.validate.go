// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ssn/dataservice/v1/dataservice.proto

package dataservice

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _dataservice_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Document with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Document) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTa()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "Ta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Bytes

	// no validation rules for Id

	// no validation rules for Consumer

	if v, ok := interface{}(m.GetTrueValues()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "TrueValues",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPredictionValues()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "PredictionValues",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FeedbackTime

	if v, ok := interface{}(m.GetPredictionConfidences()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "PredictionConfidences",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPredictionMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "PredictionMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DocumentValidationError is the validation error returned by
// Document.Validate if the designated constraints aren't met.
type DocumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentValidationError) ErrorName() string { return "DocumentValidationError" }

// Error satisfies the builtin error interface
func (e DocumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentValidationError{}

// Validate checks the field values on TrueValues with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TrueValues) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTotalInclVat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "TotalInclVat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTotalVat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "TotalVat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTotalExclVat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "TotalExclVat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "OrderDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaymentDueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "PaymentDueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDocumentType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "DocumentType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCurrency()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "Currency",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreditCardLastFour()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "CreditCardLastFour",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaymentMethod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "PaymentMethod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOcrLineDkType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "OcrLineDkType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOcrLineDkPaymentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "OcrLineDkPaymentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOcrLineDkCreditorId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "OcrLineDkCreditorId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOcrLineSePaymentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "OcrLineSePaymentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOcrLineSeBankgiroCreditorId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "OcrLineSeBankgiroCreditorId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOcrLineSePlusgiroCreditorId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "OcrLineSePlusgiroCreditorId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOcrLineNoPaymentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "OcrLineNoPaymentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOcrLineFiPaymentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "OcrLineFiPaymentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOcrLineNlPaymentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "OcrLineNlPaymentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSupplierCorporateId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "SupplierCorporateId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSupplierCountryCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "SupplierCountryCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInvoiceNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "InvoiceNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetIban()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrueValuesValidationError{
				field:  "Iban",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TrueValuesValidationError is the validation error returned by
// TrueValues.Validate if the designated constraints aren't met.
type TrueValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrueValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrueValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrueValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrueValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrueValuesValidationError) ErrorName() string { return "TrueValuesValidationError" }

// Error satisfies the builtin error interface
func (e TrueValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrueValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrueValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrueValuesValidationError{}

// Validate checks the field values on PredictionValues with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PredictionValues) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTotalInclVat() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("TotalInclVat[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTotalVat() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("TotalVat[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTotalExclVat() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("TotalExclVat[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOrderDate() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("OrderDate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPaymentDueDate() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("PaymentDueDate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDocumentType() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("DocumentType[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCurrency() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("Currency[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCreditCardLastFour() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("CreditCardLastFour[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPaymentMethod() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("PaymentMethod[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineDkType() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("OcrLineDkType[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineDkPaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("OcrLineDkPaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineDkCreditorId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("OcrLineDkCreditorId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineSePaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("OcrLineSePaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineSeBankgiroCreditorId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("OcrLineSeBankgiroCreditorId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineSePlusgiroCreditorId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("OcrLineSePlusgiroCreditorId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineNoPaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("OcrLineNoPaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineFiPaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("OcrLineFiPaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineNlPaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("OcrLineNlPaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSupplierCorporateId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("SupplierCorporateId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSupplierCountryCode() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("SupplierCountryCode[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetInvoiceNumber() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("InvoiceNumber[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetIban() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValuesValidationError{
					field:  fmt.Sprintf("Iban[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PredictionValuesValidationError is the validation error returned by
// PredictionValues.Validate if the designated constraints aren't met.
type PredictionValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PredictionValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PredictionValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PredictionValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PredictionValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PredictionValuesValidationError) ErrorName() string { return "PredictionValuesValidationError" }

// Error satisfies the builtin error interface
func (e PredictionValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPredictionValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PredictionValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PredictionValuesValidationError{}

// Validate checks the field values on PredictionConfidences with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PredictionConfidences) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTotalInclVat() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("TotalInclVat[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTotalVat() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("TotalVat[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTotalExclVat() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("TotalExclVat[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOrderDate() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("OrderDate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPaymentDueDate() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("PaymentDueDate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDocumentType() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("DocumentType[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCurrency() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("Currency[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCreditCardLastFour() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("CreditCardLastFour[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPaymentMethod() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("PaymentMethod[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineDkType() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("OcrLineDkType[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineDkPaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("OcrLineDkPaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineDkCreditorId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("OcrLineDkCreditorId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineSePaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("OcrLineSePaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineSeBankgiroCreditorId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("OcrLineSeBankgiroCreditorId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineSePlusgiroCreditorId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("OcrLineSePlusgiroCreditorId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineNoPaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("OcrLineNoPaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineFiPaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("OcrLineFiPaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineNlPaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("OcrLineNlPaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSupplierCorporateId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("SupplierCorporateId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSupplierCountryCode() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("SupplierCountryCode[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetInvoiceNumber() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("InvoiceNumber[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetIban() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionConfidencesValidationError{
					field:  fmt.Sprintf("Iban[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PredictionConfidencesValidationError is the validation error returned by
// PredictionConfidences.Validate if the designated constraints aren't met.
type PredictionConfidencesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PredictionConfidencesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PredictionConfidencesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PredictionConfidencesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PredictionConfidencesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PredictionConfidencesValidationError) ErrorName() string {
	return "PredictionConfidencesValidationError"
}

// Error satisfies the builtin error interface
func (e PredictionConfidencesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPredictionConfidences.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PredictionConfidencesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PredictionConfidencesValidationError{}

// Validate checks the field values on PredictionMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PredictionMetadata) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTotalInclVat() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("TotalInclVat[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTotalVat() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("TotalVat[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTotalExclVat() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("TotalExclVat[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOrderDate() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("OrderDate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPaymentDueDate() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("PaymentDueDate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDocumentType() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("DocumentType[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCurrency() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("Currency[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCreditCardLastFour() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("CreditCardLastFour[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPaymentMethod() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("PaymentMethod[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineDkType() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("OcrLineDkType[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineDkPaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("OcrLineDkPaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineDkCreditorId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("OcrLineDkCreditorId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineSePaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("OcrLineSePaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineSeBankgiroCreditorId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("OcrLineSeBankgiroCreditorId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineSePlusgiroCreditorId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("OcrLineSePlusgiroCreditorId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineNoPaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("OcrLineNoPaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineFiPaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("OcrLineFiPaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineNlPaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("OcrLineNlPaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSupplierCorporateId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("SupplierCorporateId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSupplierCountryCode() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("SupplierCountryCode[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetInvoiceNumber() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("InvoiceNumber[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetIban() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionMetadataValidationError{
					field:  fmt.Sprintf("Iban[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PredictionMetadataValidationError is the validation error returned by
// PredictionMetadata.Validate if the designated constraints aren't met.
type PredictionMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PredictionMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PredictionMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PredictionMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PredictionMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PredictionMetadataValidationError) ErrorName() string {
	return "PredictionMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e PredictionMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPredictionMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PredictionMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PredictionMetadataValidationError{}

// Validate checks the field values on CreateDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDocumentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDocumentRequestValidationError{
				field:  "Document",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateDocumentRequestValidationError is the validation error returned by
// CreateDocumentRequest.Validate if the designated constraints aren't met.
type CreateDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentRequestValidationError) ErrorName() string {
	return "CreateDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentRequestValidationError{}

// Validate checks the field values on CreateDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDocumentResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateDocumentResponseValidationError is the validation error returned by
// CreateDocumentResponse.Validate if the designated constraints aren't met.
type CreateDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentResponseValidationError) ErrorName() string {
	return "CreateDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentResponseValidationError{}

// Validate checks the field values on ReadDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadDocumentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReadDocumentRequestValidationError is the validation error returned by
// ReadDocumentRequest.Validate if the designated constraints aren't met.
type ReadDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadDocumentRequestValidationError) ErrorName() string {
	return "ReadDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadDocumentRequestValidationError{}

// Validate checks the field values on ReadDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadDocumentResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadDocumentResponseValidationError{
				field:  "Document",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadDocumentResponseValidationError is the validation error returned by
// ReadDocumentResponse.Validate if the designated constraints aren't met.
type ReadDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadDocumentResponseValidationError) ErrorName() string {
	return "ReadDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadDocumentResponseValidationError{}

// Validate checks the field values on PrepareFeedbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PrepareFeedbackRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetTa()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrepareFeedbackRequestValidationError{
				field:  "Ta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DocumentBytes

	if v, ok := interface{}(m.GetPredictions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrepareFeedbackRequestValidationError{
				field:  "Predictions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetConfidences()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrepareFeedbackRequestValidationError{
				field:  "Confidences",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPredictionMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrepareFeedbackRequestValidationError{
				field:  "PredictionMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PrepareFeedbackRequestValidationError is the validation error returned by
// PrepareFeedbackRequest.Validate if the designated constraints aren't met.
type PrepareFeedbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrepareFeedbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrepareFeedbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrepareFeedbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrepareFeedbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrepareFeedbackRequestValidationError) ErrorName() string {
	return "PrepareFeedbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PrepareFeedbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrepareFeedbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrepareFeedbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrepareFeedbackRequestValidationError{}

// Validate checks the field values on FeedbackRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FeedbackRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetTrueValues()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedbackRequestValidationError{
				field:  "TrueValues",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FeedbackRequestValidationError is the validation error returned by
// FeedbackRequest.Validate if the designated constraints aren't met.
type FeedbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedbackRequestValidationError) ErrorName() string { return "FeedbackRequestValidationError" }

// Error satisfies the builtin error interface
func (e FeedbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedbackRequestValidationError{}

// Validate checks the field values on MetricsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MetricsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	return nil
}

// MetricsRequestValidationError is the validation error returned by
// MetricsRequest.Validate if the designated constraints aren't met.
type MetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsRequestValidationError) ErrorName() string { return "MetricsRequestValidationError" }

// Error satisfies the builtin error interface
func (e MetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsRequestValidationError{}

// Validate checks the field values on FeedbackMetrics with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FeedbackMetrics) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DocumentCount

	// no validation rules for FeedbackCount

	if v, ok := interface{}(m.GetOverallCorrectness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedbackMetricsValidationError{
				field:  "OverallCorrectness",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFieldCorrectness() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeedbackMetricsValidationError{
					field:  fmt.Sprintf("FieldCorrectness[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FeedbackMetricsValidationError is the validation error returned by
// FeedbackMetrics.Validate if the designated constraints aren't met.
type FeedbackMetricsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedbackMetricsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedbackMetricsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedbackMetricsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedbackMetricsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedbackMetricsValidationError) ErrorName() string { return "FeedbackMetricsValidationError" }

// Error satisfies the builtin error interface
func (e FeedbackMetricsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedbackMetrics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedbackMetricsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedbackMetricsValidationError{}

// Validate checks the field values on Correctness with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Correctness) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Field

	// no validation rules for CorrectPercentage

	// no validation rules for IncompletePercentage

	// no validation rules for ErrorPercentage

	// no validation rules for Support

	return nil
}

// CorrectnessValidationError is the validation error returned by
// Correctness.Validate if the designated constraints aren't met.
type CorrectnessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CorrectnessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CorrectnessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CorrectnessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CorrectnessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CorrectnessValidationError) ErrorName() string { return "CorrectnessValidationError" }

// Error satisfies the builtin error interface
func (e CorrectnessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCorrectness.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CorrectnessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CorrectnessValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on CallsPerMonth with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CallsPerMonth) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Calls

	// no validation rules for MonthName

	return nil
}

// CallsPerMonthValidationError is the validation error returned by
// CallsPerMonth.Validate if the designated constraints aren't met.
type CallsPerMonthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallsPerMonthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallsPerMonthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallsPerMonthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallsPerMonthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallsPerMonthValidationError) ErrorName() string { return "CallsPerMonthValidationError" }

// Error satisfies the builtin error interface
func (e CallsPerMonthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallsPerMonth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallsPerMonthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallsPerMonthValidationError{}

// Validate checks the field values on CallsPerMonthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CallsPerMonthResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCallsPerMonth() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CallsPerMonthResponseValidationError{
					field:  fmt.Sprintf("CallsPerMonth[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CallsPerMonthResponseValidationError is the validation error returned by
// CallsPerMonthResponse.Validate if the designated constraints aren't met.
type CallsPerMonthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallsPerMonthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallsPerMonthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallsPerMonthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallsPerMonthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallsPerMonthResponseValidationError) ErrorName() string {
	return "CallsPerMonthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CallsPerMonthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallsPerMonthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallsPerMonthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallsPerMonthResponseValidationError{}
