// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ssn/mlservice/v2/mlservice.proto

package mlservice

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _mlservice_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on FeatureGenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FeatureGenRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTruthLabels()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeatureGenRequestValidationError{
				field:  "TruthLabels",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTextAnnotation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeatureGenRequestValidationError{
				field:  "TextAnnotation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	return nil
}

// FeatureGenRequestValidationError is the validation error returned by
// FeatureGenRequest.Validate if the designated constraints aren't met.
type FeatureGenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeatureGenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeatureGenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeatureGenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeatureGenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeatureGenRequestValidationError) ErrorName() string {
	return "FeatureGenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FeatureGenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeatureGenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeatureGenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeatureGenRequestValidationError{}

// Validate checks the field values on FeatureGenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FeatureGenResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetExample()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeatureGenResponseValidationError{
				field:  "Example",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FeatureGenResponseValidationError is the validation error returned by
// FeatureGenResponse.Validate if the designated constraints aren't met.
type FeatureGenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeatureGenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeatureGenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeatureGenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeatureGenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeatureGenResponseValidationError) ErrorName() string {
	return "FeatureGenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FeatureGenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeatureGenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeatureGenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeatureGenResponseValidationError{}

// Validate checks the field values on PredictRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PredictRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetExample()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PredictRequestValidationError{
				field:  "Example",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TopNMostConfident

	return nil
}

// PredictRequestValidationError is the validation error returned by
// PredictRequest.Validate if the designated constraints aren't met.
type PredictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PredictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PredictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PredictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PredictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PredictRequestValidationError) ErrorName() string { return "PredictRequestValidationError" }

// Error satisfies the builtin error interface
func (e PredictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPredictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PredictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PredictRequestValidationError{}

// Validate checks the field values on PredictResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PredictResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetOrderDate() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("OrderDate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPaymentDueDate() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("PaymentDueDate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCurrency() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("Currency[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTotalVat() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("TotalVat[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTotalInclVat() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("TotalInclVat[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTotalExclVat() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("TotalExclVat[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSupplierCorporateId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("SupplierCorporateId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSupplierCountryCode() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("SupplierCountryCode[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDocumentType() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("DocumentType[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPaymentMethod() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("PaymentMethod[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCreditCardNumber() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("CreditCardNumber[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetInvoiceNumber() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("InvoiceNumber[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineDkType() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("OcrLineDkType[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineDkPaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("OcrLineDkPaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineDkCreditorId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("OcrLineDkCreditorId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineSePaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("OcrLineSePaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineSeBankgiroCreditorId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("OcrLineSeBankgiroCreditorId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineSePlusgiroCreditorId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("OcrLineSePlusgiroCreditorId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineNoPaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("OcrLineNoPaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineFiPaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("OcrLineFiPaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOcrLineNlPaymentId() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("OcrLineNlPaymentId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetIban() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("Iban[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetLines() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictResponseValidationError{
					field:  fmt.Sprintf("Lines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PredictResponseValidationError is the validation error returned by
// PredictResponse.Validate if the designated constraints aren't met.
type PredictResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PredictResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PredictResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PredictResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PredictResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PredictResponseValidationError) ErrorName() string { return "PredictResponseValidationError" }

// Error satisfies the builtin error interface
func (e PredictResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPredictResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PredictResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PredictResponseValidationError{}

// Validate checks the field values on FeatureGenPredictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FeatureGenPredictRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFeatureGenRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeatureGenPredictRequestValidationError{
				field:  "FeatureGenRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPredictRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeatureGenPredictRequestValidationError{
				field:  "PredictRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FeatureGenPredictRequestValidationError is the validation error returned by
// FeatureGenPredictRequest.Validate if the designated constraints aren't met.
type FeatureGenPredictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeatureGenPredictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeatureGenPredictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeatureGenPredictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeatureGenPredictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeatureGenPredictRequestValidationError) ErrorName() string {
	return "FeatureGenPredictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FeatureGenPredictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeatureGenPredictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeatureGenPredictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeatureGenPredictRequestValidationError{}

// Validate checks the field values on FeatureGenRequest_TruthLabels with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FeatureGenRequest_TruthLabels) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalInclVat

	// no validation rules for TotalVat

	// no validation rules for TotalExclVat

	if v, ok := interface{}(m.GetOrderDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeatureGenRequest_TruthLabelsValidationError{
				field:  "OrderDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaymentDueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeatureGenRequest_TruthLabelsValidationError{
				field:  "PaymentDueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DocumentType

	// no validation rules for Currency

	// no validation rules for CreditCardNumber

	// no validation rules for PaymentMethod

	// no validation rules for OcrLineDkType

	// no validation rules for OcrLineDkPaymentId

	// no validation rules for OcrLineDkCreditorId

	// no validation rules for OcrLineSePaymentId

	// no validation rules for OcrLineSeBankgiroCreditorId

	// no validation rules for OcrLineSePlusgiroCreditorId

	// no validation rules for OcrLineNoPaymentId

	// no validation rules for OcrLineFiPaymentId

	// no validation rules for OcrLineNlPaymentId

	// no validation rules for SupplierCorporateId

	// no validation rules for SupplierCountryCode

	// no validation rules for InvoiceNumber

	// no validation rules for Iban

	return nil
}

// FeatureGenRequest_TruthLabelsValidationError is the validation error
// returned by FeatureGenRequest_TruthLabels.Validate if the designated
// constraints aren't met.
type FeatureGenRequest_TruthLabelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeatureGenRequest_TruthLabelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeatureGenRequest_TruthLabelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeatureGenRequest_TruthLabelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeatureGenRequest_TruthLabelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeatureGenRequest_TruthLabelsValidationError) ErrorName() string {
	return "FeatureGenRequest_TruthLabelsValidationError"
}

// Error satisfies the builtin error interface
func (e FeatureGenRequest_TruthLabelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeatureGenRequest_TruthLabels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeatureGenRequest_TruthLabelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeatureGenRequest_TruthLabelsValidationError{}
