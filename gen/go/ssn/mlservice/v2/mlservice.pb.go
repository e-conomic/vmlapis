// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: ssn/mlservice/v2/mlservice.proto

package mlservice

import (
	_type "github.com/e-conomic/vmlapis/gen/go/ssn/type"
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeatureGenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TruthLabels    *FeatureGenRequest_TruthLabels `protobuf:"bytes,1,opt,name=truth_labels,json=truthLabels,proto3" json:"truth_labels,omitempty"`
	TextAnnotation *_type.TextAnnotation          `protobuf:"bytes,2,opt,name=text_annotation,json=textAnnotation,proto3" json:"text_annotation,omitempty"`
	Id             string                         `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FeatureGenRequest) Reset() {
	*x = FeatureGenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_mlservice_v2_mlservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureGenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureGenRequest) ProtoMessage() {}

func (x *FeatureGenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_mlservice_v2_mlservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureGenRequest.ProtoReflect.Descriptor instead.
func (*FeatureGenRequest) Descriptor() ([]byte, []int) {
	return file_ssn_mlservice_v2_mlservice_proto_rawDescGZIP(), []int{0}
}

func (x *FeatureGenRequest) GetTruthLabels() *FeatureGenRequest_TruthLabels {
	if x != nil {
		return x.TruthLabels
	}
	return nil
}

func (x *FeatureGenRequest) GetTextAnnotation() *_type.TextAnnotation {
	if x != nil {
		return x.TextAnnotation
	}
	return nil
}

func (x *FeatureGenRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FeatureGenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FeatureGenResponse) Reset() {
	*x = FeatureGenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_mlservice_v2_mlservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureGenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureGenResponse) ProtoMessage() {}

func (x *FeatureGenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_mlservice_v2_mlservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureGenResponse.ProtoReflect.Descriptor instead.
func (*FeatureGenResponse) Descriptor() ([]byte, []int) {
	return file_ssn_mlservice_v2_mlservice_proto_rawDescGZIP(), []int{1}
}

type PredictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopNMostConfident uint32 `protobuf:"varint,2,opt,name=top_n_most_confident,json=topNMostConfident,proto3" json:"top_n_most_confident,omitempty"`
}

func (x *PredictRequest) Reset() {
	*x = PredictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_mlservice_v2_mlservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictRequest) ProtoMessage() {}

func (x *PredictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_mlservice_v2_mlservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictRequest.ProtoReflect.Descriptor instead.
func (*PredictRequest) Descriptor() ([]byte, []int) {
	return file_ssn_mlservice_v2_mlservice_proto_rawDescGZIP(), []int{2}
}

func (x *PredictRequest) GetTopNMostConfident() uint32 {
	if x != nil {
		return x.TopNMostConfident
	}
	return 0
}

// maps to FieldsPrediction
type PredictResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderDate           []*_type.Candidate `protobuf:"bytes,1,rep,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	PaymentDueDate      []*_type.Candidate `protobuf:"bytes,2,rep,name=payment_due_date,json=paymentDueDate,proto3" json:"payment_due_date,omitempty"`
	Currency            []*_type.Candidate `protobuf:"bytes,3,rep,name=currency,proto3" json:"currency,omitempty"`
	TotalVat            []*_type.Candidate `protobuf:"bytes,4,rep,name=total_vat,json=totalVat,proto3" json:"total_vat,omitempty"`
	TotalInclVat        []*_type.Candidate `protobuf:"bytes,5,rep,name=total_incl_vat,json=totalInclVat,proto3" json:"total_incl_vat,omitempty"`
	TotalExclVat        []*_type.Candidate `protobuf:"bytes,6,rep,name=total_excl_vat,json=totalExclVat,proto3" json:"total_excl_vat,omitempty"`
	SupplierCorporateId []*_type.Candidate `protobuf:"bytes,7,rep,name=supplier_corporate_id,json=supplierCorporateId,proto3" json:"supplier_corporate_id,omitempty"`
	SupplierCountryCode []*_type.Candidate `protobuf:"bytes,8,rep,name=supplier_country_code,json=supplierCountryCode,proto3" json:"supplier_country_code,omitempty"`
	DocumentType        []*_type.Candidate `protobuf:"bytes,9,rep,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	PaymentMethod       []*_type.Candidate `protobuf:"bytes,10,rep,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	// NOTE(mde): Should be removed because it is renamed to credit_card_last_four
	CreditCardNumber            []*_type.Candidate     `protobuf:"bytes,11,rep,name=credit_card_number,json=creditCardNumber,proto3" json:"credit_card_number,omitempty"`
	InvoiceNumber               []*_type.Candidate     `protobuf:"bytes,12,rep,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	OcrLineDkType               []*_type.Candidate     `protobuf:"bytes,13,rep,name=ocr_line_dk_type,json=ocrLineDkType,proto3" json:"ocr_line_dk_type,omitempty"`
	OcrLineDkPaymentId          []*_type.Candidate     `protobuf:"bytes,14,rep,name=ocr_line_dk_payment_id,json=ocrLineDkPaymentId,proto3" json:"ocr_line_dk_payment_id,omitempty"`
	OcrLineDkCreditorId         []*_type.Candidate     `protobuf:"bytes,15,rep,name=ocr_line_dk_creditor_id,json=ocrLineDkCreditorId,proto3" json:"ocr_line_dk_creditor_id,omitempty"`
	OcrLineSePaymentId          []*_type.Candidate     `protobuf:"bytes,16,rep,name=ocr_line_se_payment_id,json=ocrLineSePaymentId,proto3" json:"ocr_line_se_payment_id,omitempty"`
	OcrLineSeBankgiroCreditorId []*_type.Candidate     `protobuf:"bytes,17,rep,name=ocr_line_se_bankgiro_creditor_id,json=ocrLineSeBankgiroCreditorId,proto3" json:"ocr_line_se_bankgiro_creditor_id,omitempty"`
	OcrLineSePlusgiroCreditorId []*_type.Candidate     `protobuf:"bytes,18,rep,name=ocr_line_se_plusgiro_creditor_id,json=ocrLineSePlusgiroCreditorId,proto3" json:"ocr_line_se_plusgiro_creditor_id,omitempty"`
	OcrLineNoPaymentId          []*_type.Candidate     `protobuf:"bytes,19,rep,name=ocr_line_no_payment_id,json=ocrLineNoPaymentId,proto3" json:"ocr_line_no_payment_id,omitempty"`
	OcrLineFiPaymentId          []*_type.Candidate     `protobuf:"bytes,20,rep,name=ocr_line_fi_payment_id,json=ocrLineFiPaymentId,proto3" json:"ocr_line_fi_payment_id,omitempty"`
	OcrLineNlPaymentId          []*_type.Candidate     `protobuf:"bytes,21,rep,name=ocr_line_nl_payment_id,json=ocrLineNlPaymentId,proto3" json:"ocr_line_nl_payment_id,omitempty"`
	Iban                        []*_type.Candidate     `protobuf:"bytes,22,rep,name=iban,proto3" json:"iban,omitempty"`
	Lines                       []*_type.LineCandidate `protobuf:"bytes,23,rep,name=lines,proto3" json:"lines,omitempty"`
	BankAccountNumber           []*_type.Candidate     `protobuf:"bytes,24,rep,name=bank_account_number,json=bankAccountNumber,proto3" json:"bank_account_number,omitempty"`
	BankRegistrationNumber      []*_type.Candidate     `protobuf:"bytes,25,rep,name=bank_registration_number,json=bankRegistrationNumber,proto3" json:"bank_registration_number,omitempty"`
	Bic                         []*_type.Candidate     `protobuf:"bytes,26,rep,name=bic,proto3" json:"bic,omitempty"`
	DocumentNumber              []*_type.Candidate     `protobuf:"bytes,27,rep,name=document_number,json=documentNumber,proto3" json:"document_number,omitempty"`
	DocumentDate                []*_type.Candidate     `protobuf:"bytes,28,rep,name=document_date,json=documentDate,proto3" json:"document_date,omitempty"`
	OrderNumber                 []*_type.Candidate     `protobuf:"bytes,29,rep,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	SupplierName                []*_type.Candidate     `protobuf:"bytes,30,rep,name=supplier_name,json=supplierName,proto3" json:"supplier_name,omitempty"`
	SupplierVatNumber           []*_type.Candidate     `protobuf:"bytes,31,rep,name=supplier_vat_number,json=supplierVatNumber,proto3" json:"supplier_vat_number,omitempty"`
	SupplierOrganisationNumber  []*_type.Candidate     `protobuf:"bytes,32,rep,name=supplier_organisation_number,json=supplierOrganisationNumber,proto3" json:"supplier_organisation_number,omitempty"`
	SupplierAddress             []*_type.Candidate     `protobuf:"bytes,33,rep,name=supplier_address,json=supplierAddress,proto3" json:"supplier_address,omitempty"`
	CreditCardLastFour          []*_type.Candidate     `protobuf:"bytes,34,rep,name=credit_card_last_four,json=creditCardLastFour,proto3" json:"credit_card_last_four,omitempty"`
	CustomerNumber              []*_type.Candidate     `protobuf:"bytes,35,rep,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ReceiverOrderNumber         []*_type.Candidate     `protobuf:"bytes,36,rep,name=receiver_order_number,json=receiverOrderNumber,proto3" json:"receiver_order_number,omitempty"`
	OcrLineBePaymentId          []*_type.Candidate     `protobuf:"bytes,37,rep,name=ocr_line_be_payment_id,json=ocrLineBePaymentId,proto3" json:"ocr_line_be_payment_id,omitempty"`
	ReceiverAddress             []*_type.Candidate     `protobuf:"bytes,38,rep,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
	ReceiverCountryCode         []*_type.Candidate     `protobuf:"bytes,39,rep,name=receiver_country_code,json=receiverCountryCode,proto3" json:"receiver_country_code,omitempty"`
	ReceiverName                []*_type.Candidate     `protobuf:"bytes,40,rep,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`
	ReceiverVatNumber           []*_type.Candidate     `protobuf:"bytes,41,rep,name=receiver_vat_number,json=receiverVatNumber,proto3" json:"receiver_vat_number,omitempty"`
}

func (x *PredictResponse) Reset() {
	*x = PredictResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_mlservice_v2_mlservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictResponse) ProtoMessage() {}

func (x *PredictResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_mlservice_v2_mlservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictResponse.ProtoReflect.Descriptor instead.
func (*PredictResponse) Descriptor() ([]byte, []int) {
	return file_ssn_mlservice_v2_mlservice_proto_rawDescGZIP(), []int{3}
}

func (x *PredictResponse) GetOrderDate() []*_type.Candidate {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *PredictResponse) GetPaymentDueDate() []*_type.Candidate {
	if x != nil {
		return x.PaymentDueDate
	}
	return nil
}

func (x *PredictResponse) GetCurrency() []*_type.Candidate {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *PredictResponse) GetTotalVat() []*_type.Candidate {
	if x != nil {
		return x.TotalVat
	}
	return nil
}

func (x *PredictResponse) GetTotalInclVat() []*_type.Candidate {
	if x != nil {
		return x.TotalInclVat
	}
	return nil
}

func (x *PredictResponse) GetTotalExclVat() []*_type.Candidate {
	if x != nil {
		return x.TotalExclVat
	}
	return nil
}

func (x *PredictResponse) GetSupplierCorporateId() []*_type.Candidate {
	if x != nil {
		return x.SupplierCorporateId
	}
	return nil
}

func (x *PredictResponse) GetSupplierCountryCode() []*_type.Candidate {
	if x != nil {
		return x.SupplierCountryCode
	}
	return nil
}

func (x *PredictResponse) GetDocumentType() []*_type.Candidate {
	if x != nil {
		return x.DocumentType
	}
	return nil
}

func (x *PredictResponse) GetPaymentMethod() []*_type.Candidate {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *PredictResponse) GetCreditCardNumber() []*_type.Candidate {
	if x != nil {
		return x.CreditCardNumber
	}
	return nil
}

func (x *PredictResponse) GetInvoiceNumber() []*_type.Candidate {
	if x != nil {
		return x.InvoiceNumber
	}
	return nil
}

func (x *PredictResponse) GetOcrLineDkType() []*_type.Candidate {
	if x != nil {
		return x.OcrLineDkType
	}
	return nil
}

func (x *PredictResponse) GetOcrLineDkPaymentId() []*_type.Candidate {
	if x != nil {
		return x.OcrLineDkPaymentId
	}
	return nil
}

func (x *PredictResponse) GetOcrLineDkCreditorId() []*_type.Candidate {
	if x != nil {
		return x.OcrLineDkCreditorId
	}
	return nil
}

func (x *PredictResponse) GetOcrLineSePaymentId() []*_type.Candidate {
	if x != nil {
		return x.OcrLineSePaymentId
	}
	return nil
}

func (x *PredictResponse) GetOcrLineSeBankgiroCreditorId() []*_type.Candidate {
	if x != nil {
		return x.OcrLineSeBankgiroCreditorId
	}
	return nil
}

func (x *PredictResponse) GetOcrLineSePlusgiroCreditorId() []*_type.Candidate {
	if x != nil {
		return x.OcrLineSePlusgiroCreditorId
	}
	return nil
}

func (x *PredictResponse) GetOcrLineNoPaymentId() []*_type.Candidate {
	if x != nil {
		return x.OcrLineNoPaymentId
	}
	return nil
}

func (x *PredictResponse) GetOcrLineFiPaymentId() []*_type.Candidate {
	if x != nil {
		return x.OcrLineFiPaymentId
	}
	return nil
}

func (x *PredictResponse) GetOcrLineNlPaymentId() []*_type.Candidate {
	if x != nil {
		return x.OcrLineNlPaymentId
	}
	return nil
}

func (x *PredictResponse) GetIban() []*_type.Candidate {
	if x != nil {
		return x.Iban
	}
	return nil
}

func (x *PredictResponse) GetLines() []*_type.LineCandidate {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *PredictResponse) GetBankAccountNumber() []*_type.Candidate {
	if x != nil {
		return x.BankAccountNumber
	}
	return nil
}

func (x *PredictResponse) GetBankRegistrationNumber() []*_type.Candidate {
	if x != nil {
		return x.BankRegistrationNumber
	}
	return nil
}

func (x *PredictResponse) GetBic() []*_type.Candidate {
	if x != nil {
		return x.Bic
	}
	return nil
}

func (x *PredictResponse) GetDocumentNumber() []*_type.Candidate {
	if x != nil {
		return x.DocumentNumber
	}
	return nil
}

func (x *PredictResponse) GetDocumentDate() []*_type.Candidate {
	if x != nil {
		return x.DocumentDate
	}
	return nil
}

func (x *PredictResponse) GetOrderNumber() []*_type.Candidate {
	if x != nil {
		return x.OrderNumber
	}
	return nil
}

func (x *PredictResponse) GetSupplierName() []*_type.Candidate {
	if x != nil {
		return x.SupplierName
	}
	return nil
}

func (x *PredictResponse) GetSupplierVatNumber() []*_type.Candidate {
	if x != nil {
		return x.SupplierVatNumber
	}
	return nil
}

func (x *PredictResponse) GetSupplierOrganisationNumber() []*_type.Candidate {
	if x != nil {
		return x.SupplierOrganisationNumber
	}
	return nil
}

func (x *PredictResponse) GetSupplierAddress() []*_type.Candidate {
	if x != nil {
		return x.SupplierAddress
	}
	return nil
}

func (x *PredictResponse) GetCreditCardLastFour() []*_type.Candidate {
	if x != nil {
		return x.CreditCardLastFour
	}
	return nil
}

func (x *PredictResponse) GetCustomerNumber() []*_type.Candidate {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *PredictResponse) GetReceiverOrderNumber() []*_type.Candidate {
	if x != nil {
		return x.ReceiverOrderNumber
	}
	return nil
}

func (x *PredictResponse) GetOcrLineBePaymentId() []*_type.Candidate {
	if x != nil {
		return x.OcrLineBePaymentId
	}
	return nil
}

func (x *PredictResponse) GetReceiverAddress() []*_type.Candidate {
	if x != nil {
		return x.ReceiverAddress
	}
	return nil
}

func (x *PredictResponse) GetReceiverCountryCode() []*_type.Candidate {
	if x != nil {
		return x.ReceiverCountryCode
	}
	return nil
}

func (x *PredictResponse) GetReceiverName() []*_type.Candidate {
	if x != nil {
		return x.ReceiverName
	}
	return nil
}

func (x *PredictResponse) GetReceiverVatNumber() []*_type.Candidate {
	if x != nil {
		return x.ReceiverVatNumber
	}
	return nil
}

type FeatureGenPredictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureGenRequest *FeatureGenRequest `protobuf:"bytes,1,opt,name=feature_gen_request,json=featureGenRequest,proto3" json:"feature_gen_request,omitempty"`
	PredictRequest    *PredictRequest    `protobuf:"bytes,2,opt,name=predict_request,json=predictRequest,proto3" json:"predict_request,omitempty"`
}

func (x *FeatureGenPredictRequest) Reset() {
	*x = FeatureGenPredictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_mlservice_v2_mlservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureGenPredictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureGenPredictRequest) ProtoMessage() {}

func (x *FeatureGenPredictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_mlservice_v2_mlservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureGenPredictRequest.ProtoReflect.Descriptor instead.
func (*FeatureGenPredictRequest) Descriptor() ([]byte, []int) {
	return file_ssn_mlservice_v2_mlservice_proto_rawDescGZIP(), []int{4}
}

func (x *FeatureGenPredictRequest) GetFeatureGenRequest() *FeatureGenRequest {
	if x != nil {
		return x.FeatureGenRequest
	}
	return nil
}

func (x *FeatureGenPredictRequest) GetPredictRequest() *PredictRequest {
	if x != nil {
		return x.PredictRequest
	}
	return nil
}

type FeatureGenRequest_TruthLabels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalInclVat   float64    `protobuf:"fixed64,1,opt,name=total_incl_vat,json=totalInclVat,proto3" json:"total_incl_vat,omitempty"`
	TotalVat       float64    `protobuf:"fixed64,2,opt,name=total_vat,json=totalVat,proto3" json:"total_vat,omitempty"`
	TotalExclVat   float64    `protobuf:"fixed64,3,opt,name=total_excl_vat,json=totalExclVat,proto3" json:"total_excl_vat,omitempty"`
	OrderDate      *date.Date `protobuf:"bytes,4,opt,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	PaymentDueDate *date.Date `protobuf:"bytes,5,opt,name=payment_due_date,json=paymentDueDate,proto3" json:"payment_due_date,omitempty"`
	DocumentType   string     `protobuf:"bytes,6,opt,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	Currency       string     `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	// NOTE(mde): Should be removed because it is renamed to credit_card_last_four
	CreditCardNumber            string     `protobuf:"bytes,8,opt,name=credit_card_number,json=creditCardNumber,proto3" json:"credit_card_number,omitempty"`
	PaymentMethod               string     `protobuf:"bytes,9,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	OcrLineDkType               string     `protobuf:"bytes,10,opt,name=ocr_line_dk_type,json=ocrLineDkType,proto3" json:"ocr_line_dk_type,omitempty"`
	OcrLineDkPaymentId          string     `protobuf:"bytes,11,opt,name=ocr_line_dk_payment_id,json=ocrLineDkPaymentId,proto3" json:"ocr_line_dk_payment_id,omitempty"`
	OcrLineDkCreditorId         string     `protobuf:"bytes,12,opt,name=ocr_line_dk_creditor_id,json=ocrLineDkCreditorId,proto3" json:"ocr_line_dk_creditor_id,omitempty"`
	OcrLineSePaymentId          string     `protobuf:"bytes,13,opt,name=ocr_line_se_payment_id,json=ocrLineSePaymentId,proto3" json:"ocr_line_se_payment_id,omitempty"`
	OcrLineSeBankgiroCreditorId string     `protobuf:"bytes,14,opt,name=ocr_line_se_bankgiro_creditor_id,json=ocrLineSeBankgiroCreditorId,proto3" json:"ocr_line_se_bankgiro_creditor_id,omitempty"`
	OcrLineSePlusgiroCreditorId string     `protobuf:"bytes,15,opt,name=ocr_line_se_plusgiro_creditor_id,json=ocrLineSePlusgiroCreditorId,proto3" json:"ocr_line_se_plusgiro_creditor_id,omitempty"`
	OcrLineNoPaymentId          string     `protobuf:"bytes,16,opt,name=ocr_line_no_payment_id,json=ocrLineNoPaymentId,proto3" json:"ocr_line_no_payment_id,omitempty"`
	OcrLineFiPaymentId          string     `protobuf:"bytes,17,opt,name=ocr_line_fi_payment_id,json=ocrLineFiPaymentId,proto3" json:"ocr_line_fi_payment_id,omitempty"`
	OcrLineNlPaymentId          string     `protobuf:"bytes,18,opt,name=ocr_line_nl_payment_id,json=ocrLineNlPaymentId,proto3" json:"ocr_line_nl_payment_id,omitempty"`
	SupplierCorporateId         string     `protobuf:"bytes,19,opt,name=supplier_corporate_id,json=supplierCorporateId,proto3" json:"supplier_corporate_id,omitempty"`
	SupplierCountryCode         string     `protobuf:"bytes,20,opt,name=supplier_country_code,json=supplierCountryCode,proto3" json:"supplier_country_code,omitempty"`
	InvoiceNumber               string     `protobuf:"bytes,21,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	Iban                        string     `protobuf:"bytes,22,opt,name=iban,proto3" json:"iban,omitempty"`
	BankAccountNumber           string     `protobuf:"bytes,23,opt,name=bank_account_number,json=bankAccountNumber,proto3" json:"bank_account_number,omitempty"`
	BankRegistrationNumber      string     `protobuf:"bytes,24,opt,name=bank_registration_number,json=bankRegistrationNumber,proto3" json:"bank_registration_number,omitempty"`
	SupplierName                string     `protobuf:"bytes,25,opt,name=supplier_name,json=supplierName,proto3" json:"supplier_name,omitempty"`
	Bic                         string     `protobuf:"bytes,26,opt,name=bic,proto3" json:"bic,omitempty"`
	DocumentNumber              string     `protobuf:"bytes,27,opt,name=document_number,json=documentNumber,proto3" json:"document_number,omitempty"`
	DocumentDate                *date.Date `protobuf:"bytes,28,opt,name=document_date,json=documentDate,proto3" json:"document_date,omitempty"`
	OrderNumber                 string     `protobuf:"bytes,29,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	SupplierVatNumber           string     `protobuf:"bytes,30,opt,name=supplier_vat_number,json=supplierVatNumber,proto3" json:"supplier_vat_number,omitempty"`
	SupplierOrganisationNumber  string     `protobuf:"bytes,31,opt,name=supplier_organisation_number,json=supplierOrganisationNumber,proto3" json:"supplier_organisation_number,omitempty"`
	SupplierAddress             string     `protobuf:"bytes,32,opt,name=supplier_address,json=supplierAddress,proto3" json:"supplier_address,omitempty"`
	CreditCardLastFour          string     `protobuf:"bytes,33,opt,name=credit_card_last_four,json=creditCardLastFour,proto3" json:"credit_card_last_four,omitempty"`
	CustomerNumber              string     `protobuf:"bytes,34,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ReceiverOrderNumber         string     `protobuf:"bytes,35,opt,name=receiver_order_number,json=receiverOrderNumber,proto3" json:"receiver_order_number,omitempty"`
	OcrLineBePaymentId          string     `protobuf:"bytes,36,opt,name=ocr_line_be_payment_id,json=ocrLineBePaymentId,proto3" json:"ocr_line_be_payment_id,omitempty"`
	ReceiverAddress             string     `protobuf:"bytes,37,opt,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
	ReceiverCountryCode         string     `protobuf:"bytes,38,opt,name=receiver_country_code,json=receiverCountryCode,proto3" json:"receiver_country_code,omitempty"`
	ReceiverName                string     `protobuf:"bytes,39,opt,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`
	ReceiverVatNumber           string     `protobuf:"bytes,40,opt,name=receiver_vat_number,json=receiverVatNumber,proto3" json:"receiver_vat_number,omitempty"`
}

func (x *FeatureGenRequest_TruthLabels) Reset() {
	*x = FeatureGenRequest_TruthLabels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_mlservice_v2_mlservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureGenRequest_TruthLabels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureGenRequest_TruthLabels) ProtoMessage() {}

func (x *FeatureGenRequest_TruthLabels) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_mlservice_v2_mlservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureGenRequest_TruthLabels.ProtoReflect.Descriptor instead.
func (*FeatureGenRequest_TruthLabels) Descriptor() ([]byte, []int) {
	return file_ssn_mlservice_v2_mlservice_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FeatureGenRequest_TruthLabels) GetTotalInclVat() float64 {
	if x != nil {
		return x.TotalInclVat
	}
	return 0
}

func (x *FeatureGenRequest_TruthLabels) GetTotalVat() float64 {
	if x != nil {
		return x.TotalVat
	}
	return 0
}

func (x *FeatureGenRequest_TruthLabels) GetTotalExclVat() float64 {
	if x != nil {
		return x.TotalExclVat
	}
	return 0
}

func (x *FeatureGenRequest_TruthLabels) GetOrderDate() *date.Date {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *FeatureGenRequest_TruthLabels) GetPaymentDueDate() *date.Date {
	if x != nil {
		return x.PaymentDueDate
	}
	return nil
}

func (x *FeatureGenRequest_TruthLabels) GetDocumentType() string {
	if x != nil {
		return x.DocumentType
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetCreditCardNumber() string {
	if x != nil {
		return x.CreditCardNumber
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetOcrLineDkType() string {
	if x != nil {
		return x.OcrLineDkType
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetOcrLineDkPaymentId() string {
	if x != nil {
		return x.OcrLineDkPaymentId
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetOcrLineDkCreditorId() string {
	if x != nil {
		return x.OcrLineDkCreditorId
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetOcrLineSePaymentId() string {
	if x != nil {
		return x.OcrLineSePaymentId
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetOcrLineSeBankgiroCreditorId() string {
	if x != nil {
		return x.OcrLineSeBankgiroCreditorId
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetOcrLineSePlusgiroCreditorId() string {
	if x != nil {
		return x.OcrLineSePlusgiroCreditorId
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetOcrLineNoPaymentId() string {
	if x != nil {
		return x.OcrLineNoPaymentId
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetOcrLineFiPaymentId() string {
	if x != nil {
		return x.OcrLineFiPaymentId
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetOcrLineNlPaymentId() string {
	if x != nil {
		return x.OcrLineNlPaymentId
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetSupplierCorporateId() string {
	if x != nil {
		return x.SupplierCorporateId
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetSupplierCountryCode() string {
	if x != nil {
		return x.SupplierCountryCode
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetInvoiceNumber() string {
	if x != nil {
		return x.InvoiceNumber
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetIban() string {
	if x != nil {
		return x.Iban
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetBankAccountNumber() string {
	if x != nil {
		return x.BankAccountNumber
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetBankRegistrationNumber() string {
	if x != nil {
		return x.BankRegistrationNumber
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetSupplierName() string {
	if x != nil {
		return x.SupplierName
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetBic() string {
	if x != nil {
		return x.Bic
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetDocumentNumber() string {
	if x != nil {
		return x.DocumentNumber
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetDocumentDate() *date.Date {
	if x != nil {
		return x.DocumentDate
	}
	return nil
}

func (x *FeatureGenRequest_TruthLabels) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetSupplierVatNumber() string {
	if x != nil {
		return x.SupplierVatNumber
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetSupplierOrganisationNumber() string {
	if x != nil {
		return x.SupplierOrganisationNumber
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetSupplierAddress() string {
	if x != nil {
		return x.SupplierAddress
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetCreditCardLastFour() string {
	if x != nil {
		return x.CreditCardLastFour
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetReceiverOrderNumber() string {
	if x != nil {
		return x.ReceiverOrderNumber
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetOcrLineBePaymentId() string {
	if x != nil {
		return x.OcrLineBePaymentId
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetReceiverCountryCode() string {
	if x != nil {
		return x.ReceiverCountryCode
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetReceiverName() string {
	if x != nil {
		return x.ReceiverName
	}
	return ""
}

func (x *FeatureGenRequest_TruthLabels) GetReceiverVatNumber() string {
	if x != nil {
		return x.ReceiverVatNumber
	}
	return ""
}

var File_ssn_mlservice_v2_mlservice_proto protoreflect.FileDescriptor

var file_ssn_mlservice_v2_mlservice_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x73, 0x6e, 0x2f, 0x6d, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x32, 0x2f, 0x6d, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x73, 0x73, 0x6e, 0x2e, 0x6d, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x32, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x73,
	0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x73, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x2f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x10, 0x0a, 0x11, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0c,
	0x74, 0x72, 0x75, 0x74, 0x68, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x6d, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x75, 0x74, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x74, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x41, 0x0a, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x73, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x1a, 0xc9, 0x0e, 0x0a, 0x0b, 0x54, 0x72, 0x75, 0x74, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x63, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x27, 0x0a, 0x10, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x63, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x44, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x16, 0x6f, 0x63,
	0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c,
	0x69, 0x6e, 0x65, 0x44, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x17, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x20, 0x6f, 0x63, 0x72, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x67, 0x69, 0x72, 0x6f,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x42, 0x61, 0x6e,
	0x6b, 0x67, 0x69, 0x72, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x45, 0x0a, 0x20, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x5f, 0x70,
	0x6c, 0x75, 0x73, 0x67, 0x69, 0x72, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x6f, 0x63, 0x72, 0x4c, 0x69,
	0x6e, 0x65, 0x53, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x67, 0x69, 0x72, 0x6f, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x4e,
	0x6f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x16, 0x6f, 0x63,
	0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c,
	0x69, 0x6e, 0x65, 0x46, 0x69, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x6c, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x70, 0x6f,
	0x72, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x62, 0x61, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x63, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x62, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x56, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1c, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x75, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x62, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65,
	0x42, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x56, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x1a, 0x0a, 0x12, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x47, 0x0a, 0x0e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x14, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x5f, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x70,
	0x4e, 0x4d, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x22, 0x8b, 0x15, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x10,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x39,
	0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x76, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x63,
	0x6c, 0x56, 0x61, 0x74, 0x12, 0x47, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a,
	0x15, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3a, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x41, 0x0a, 0x12,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x10, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x10, 0x6f,
	0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6f, 0x63, 0x72, 0x4c,
	0x69, 0x6e, 0x65, 0x44, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x16, 0x6f, 0x63, 0x72,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x12,
	0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x49, 0x0a, 0x17, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64,
	0x6b, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x13, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e,
	0x65, 0x44, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x47, 0x0a,
	0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x20, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x67, 0x69, 0x72, 0x6f, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x1b, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65,
	0x42, 0x61, 0x6e, 0x6b, 0x67, 0x69, 0x72, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x5a, 0x0a, 0x20, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x67, 0x69, 0x72, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x1b, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x50, 0x6c, 0x75, 0x73,
	0x67, 0x69, 0x72, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x47,
	0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x12, 0x6f, 0x63,
	0x72, 0x4c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x47, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x6c, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6c,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x69, 0x62, 0x61,
	0x6e, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x04, 0x69, 0x62,
	0x61, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x43, 0x0a, 0x13, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x18, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x16, 0x62,
	0x61, 0x6e, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x03, 0x62, 0x69, 0x63, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x03, 0x62, 0x69, 0x63, 0x12, 0x3c, 0x0a, 0x0f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0d, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0d,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x56, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x1c, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x1a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x46, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x18, 0x22, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x12, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x75, 0x72, 0x12, 0x3c, 0x0a, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x23, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x13, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x47, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x65,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x42,
	0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x10, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x26,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x15, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x13,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a,
	0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x56, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0xba, 0x01, 0x0a, 0x18, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x65,
	0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x53, 0x0a, 0x13, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x73, 0x6e, 0x2e, 0x6d, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x73, 0x6e, 0x2e, 0x6d, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x98, 0x02, 0x0a, 0x09, 0x4d, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a,
	0x0a, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x65, 0x6e, 0x12, 0x23, 0x2e, 0x73, 0x73,
	0x6e, 0x2e, 0x6d, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x6d, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x12, 0x20, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x6d, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x6d, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x47, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x73,
	0x6e, 0x2e, 0x6d, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x6d, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xcd, 0x01, 0x0a, 0x19, 0x61,
	0x69, 0x2e, 0x76, 0x69, 0x73, 0x6d, 0x61, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x6d, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x42, 0x0e, 0x4d, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63,
	0x2f, 0x76, 0x6d, 0x6c, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f,
	0x73, 0x73, 0x6e, 0x2f, 0x6d, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x32,
	0x3b, 0x6d, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x53, 0x4d, 0x58,
	0xaa, 0x02, 0x10, 0x53, 0x73, 0x6e, 0x2e, 0x4d, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x56, 0x32, 0xca, 0x02, 0x10, 0x53, 0x73, 0x6e, 0x5c, 0x4d, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x1c, 0x53, 0x73, 0x6e, 0x5c, 0x4d, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x53, 0x73, 0x6e, 0x3a, 0x3a, 0x4d, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_ssn_mlservice_v2_mlservice_proto_rawDescOnce sync.Once
	file_ssn_mlservice_v2_mlservice_proto_rawDescData = file_ssn_mlservice_v2_mlservice_proto_rawDesc
)

func file_ssn_mlservice_v2_mlservice_proto_rawDescGZIP() []byte {
	file_ssn_mlservice_v2_mlservice_proto_rawDescOnce.Do(func() {
		file_ssn_mlservice_v2_mlservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_ssn_mlservice_v2_mlservice_proto_rawDescData)
	})
	return file_ssn_mlservice_v2_mlservice_proto_rawDescData
}

var file_ssn_mlservice_v2_mlservice_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ssn_mlservice_v2_mlservice_proto_goTypes = []interface{}{
	(*FeatureGenRequest)(nil),             // 0: ssn.mlservice.v2.FeatureGenRequest
	(*FeatureGenResponse)(nil),            // 1: ssn.mlservice.v2.FeatureGenResponse
	(*PredictRequest)(nil),                // 2: ssn.mlservice.v2.PredictRequest
	(*PredictResponse)(nil),               // 3: ssn.mlservice.v2.PredictResponse
	(*FeatureGenPredictRequest)(nil),      // 4: ssn.mlservice.v2.FeatureGenPredictRequest
	(*FeatureGenRequest_TruthLabels)(nil), // 5: ssn.mlservice.v2.FeatureGenRequest.TruthLabels
	(*_type.TextAnnotation)(nil),          // 6: ssn.type.TextAnnotation
	(*_type.Candidate)(nil),               // 7: ssn.type.Candidate
	(*_type.LineCandidate)(nil),           // 8: ssn.type.LineCandidate
	(*date.Date)(nil),                     // 9: google.type.Date
}
var file_ssn_mlservice_v2_mlservice_proto_depIdxs = []int32{
	5,  // 0: ssn.mlservice.v2.FeatureGenRequest.truth_labels:type_name -> ssn.mlservice.v2.FeatureGenRequest.TruthLabels
	6,  // 1: ssn.mlservice.v2.FeatureGenRequest.text_annotation:type_name -> ssn.type.TextAnnotation
	7,  // 2: ssn.mlservice.v2.PredictResponse.order_date:type_name -> ssn.type.Candidate
	7,  // 3: ssn.mlservice.v2.PredictResponse.payment_due_date:type_name -> ssn.type.Candidate
	7,  // 4: ssn.mlservice.v2.PredictResponse.currency:type_name -> ssn.type.Candidate
	7,  // 5: ssn.mlservice.v2.PredictResponse.total_vat:type_name -> ssn.type.Candidate
	7,  // 6: ssn.mlservice.v2.PredictResponse.total_incl_vat:type_name -> ssn.type.Candidate
	7,  // 7: ssn.mlservice.v2.PredictResponse.total_excl_vat:type_name -> ssn.type.Candidate
	7,  // 8: ssn.mlservice.v2.PredictResponse.supplier_corporate_id:type_name -> ssn.type.Candidate
	7,  // 9: ssn.mlservice.v2.PredictResponse.supplier_country_code:type_name -> ssn.type.Candidate
	7,  // 10: ssn.mlservice.v2.PredictResponse.document_type:type_name -> ssn.type.Candidate
	7,  // 11: ssn.mlservice.v2.PredictResponse.payment_method:type_name -> ssn.type.Candidate
	7,  // 12: ssn.mlservice.v2.PredictResponse.credit_card_number:type_name -> ssn.type.Candidate
	7,  // 13: ssn.mlservice.v2.PredictResponse.invoice_number:type_name -> ssn.type.Candidate
	7,  // 14: ssn.mlservice.v2.PredictResponse.ocr_line_dk_type:type_name -> ssn.type.Candidate
	7,  // 15: ssn.mlservice.v2.PredictResponse.ocr_line_dk_payment_id:type_name -> ssn.type.Candidate
	7,  // 16: ssn.mlservice.v2.PredictResponse.ocr_line_dk_creditor_id:type_name -> ssn.type.Candidate
	7,  // 17: ssn.mlservice.v2.PredictResponse.ocr_line_se_payment_id:type_name -> ssn.type.Candidate
	7,  // 18: ssn.mlservice.v2.PredictResponse.ocr_line_se_bankgiro_creditor_id:type_name -> ssn.type.Candidate
	7,  // 19: ssn.mlservice.v2.PredictResponse.ocr_line_se_plusgiro_creditor_id:type_name -> ssn.type.Candidate
	7,  // 20: ssn.mlservice.v2.PredictResponse.ocr_line_no_payment_id:type_name -> ssn.type.Candidate
	7,  // 21: ssn.mlservice.v2.PredictResponse.ocr_line_fi_payment_id:type_name -> ssn.type.Candidate
	7,  // 22: ssn.mlservice.v2.PredictResponse.ocr_line_nl_payment_id:type_name -> ssn.type.Candidate
	7,  // 23: ssn.mlservice.v2.PredictResponse.iban:type_name -> ssn.type.Candidate
	8,  // 24: ssn.mlservice.v2.PredictResponse.lines:type_name -> ssn.type.LineCandidate
	7,  // 25: ssn.mlservice.v2.PredictResponse.bank_account_number:type_name -> ssn.type.Candidate
	7,  // 26: ssn.mlservice.v2.PredictResponse.bank_registration_number:type_name -> ssn.type.Candidate
	7,  // 27: ssn.mlservice.v2.PredictResponse.bic:type_name -> ssn.type.Candidate
	7,  // 28: ssn.mlservice.v2.PredictResponse.document_number:type_name -> ssn.type.Candidate
	7,  // 29: ssn.mlservice.v2.PredictResponse.document_date:type_name -> ssn.type.Candidate
	7,  // 30: ssn.mlservice.v2.PredictResponse.order_number:type_name -> ssn.type.Candidate
	7,  // 31: ssn.mlservice.v2.PredictResponse.supplier_name:type_name -> ssn.type.Candidate
	7,  // 32: ssn.mlservice.v2.PredictResponse.supplier_vat_number:type_name -> ssn.type.Candidate
	7,  // 33: ssn.mlservice.v2.PredictResponse.supplier_organisation_number:type_name -> ssn.type.Candidate
	7,  // 34: ssn.mlservice.v2.PredictResponse.supplier_address:type_name -> ssn.type.Candidate
	7,  // 35: ssn.mlservice.v2.PredictResponse.credit_card_last_four:type_name -> ssn.type.Candidate
	7,  // 36: ssn.mlservice.v2.PredictResponse.customer_number:type_name -> ssn.type.Candidate
	7,  // 37: ssn.mlservice.v2.PredictResponse.receiver_order_number:type_name -> ssn.type.Candidate
	7,  // 38: ssn.mlservice.v2.PredictResponse.ocr_line_be_payment_id:type_name -> ssn.type.Candidate
	7,  // 39: ssn.mlservice.v2.PredictResponse.receiver_address:type_name -> ssn.type.Candidate
	7,  // 40: ssn.mlservice.v2.PredictResponse.receiver_country_code:type_name -> ssn.type.Candidate
	7,  // 41: ssn.mlservice.v2.PredictResponse.receiver_name:type_name -> ssn.type.Candidate
	7,  // 42: ssn.mlservice.v2.PredictResponse.receiver_vat_number:type_name -> ssn.type.Candidate
	0,  // 43: ssn.mlservice.v2.FeatureGenPredictRequest.feature_gen_request:type_name -> ssn.mlservice.v2.FeatureGenRequest
	2,  // 44: ssn.mlservice.v2.FeatureGenPredictRequest.predict_request:type_name -> ssn.mlservice.v2.PredictRequest
	9,  // 45: ssn.mlservice.v2.FeatureGenRequest.TruthLabels.order_date:type_name -> google.type.Date
	9,  // 46: ssn.mlservice.v2.FeatureGenRequest.TruthLabels.payment_due_date:type_name -> google.type.Date
	9,  // 47: ssn.mlservice.v2.FeatureGenRequest.TruthLabels.document_date:type_name -> google.type.Date
	0,  // 48: ssn.mlservice.v2.MlService.FeatureGen:input_type -> ssn.mlservice.v2.FeatureGenRequest
	2,  // 49: ssn.mlservice.v2.MlService.Predict:input_type -> ssn.mlservice.v2.PredictRequest
	4,  // 50: ssn.mlservice.v2.MlService.FeatureGenPredict:input_type -> ssn.mlservice.v2.FeatureGenPredictRequest
	1,  // 51: ssn.mlservice.v2.MlService.FeatureGen:output_type -> ssn.mlservice.v2.FeatureGenResponse
	3,  // 52: ssn.mlservice.v2.MlService.Predict:output_type -> ssn.mlservice.v2.PredictResponse
	3,  // 53: ssn.mlservice.v2.MlService.FeatureGenPredict:output_type -> ssn.mlservice.v2.PredictResponse
	51, // [51:54] is the sub-list for method output_type
	48, // [48:51] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_ssn_mlservice_v2_mlservice_proto_init() }
func file_ssn_mlservice_v2_mlservice_proto_init() {
	if File_ssn_mlservice_v2_mlservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ssn_mlservice_v2_mlservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureGenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_mlservice_v2_mlservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureGenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_mlservice_v2_mlservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_mlservice_v2_mlservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_mlservice_v2_mlservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureGenPredictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_mlservice_v2_mlservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureGenRequest_TruthLabels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ssn_mlservice_v2_mlservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ssn_mlservice_v2_mlservice_proto_goTypes,
		DependencyIndexes: file_ssn_mlservice_v2_mlservice_proto_depIdxs,
		MessageInfos:      file_ssn_mlservice_v2_mlservice_proto_msgTypes,
	}.Build()
	File_ssn_mlservice_v2_mlservice_proto = out.File
	file_ssn_mlservice_v2_mlservice_proto_rawDesc = nil
	file_ssn_mlservice_v2_mlservice_proto_goTypes = nil
	file_ssn_mlservice_v2_mlservice_proto_depIdxs = nil
}
