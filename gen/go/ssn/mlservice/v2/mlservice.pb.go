// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ssn/mlservice/v2/mlservice.proto

package mlservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _type "github.com/e-conomic/vmlapis/gen/go/ssn/type"
import example "github.com/tensorflow/tensorflow/tensorflow/go/core/example"
import date "google.golang.org/genproto/googleapis/type/date"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FeatureGenRequest struct {
	TruthLabels          *FeatureGenRequest_TruthLabels `protobuf:"bytes,1,opt,name=truth_labels,json=truthLabels,proto3" json:"truth_labels,omitempty"`
	TextAnnotation       *_type.TextAnnotation          `protobuf:"bytes,2,opt,name=text_annotation,json=textAnnotation,proto3" json:"text_annotation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *FeatureGenRequest) Reset()         { *m = FeatureGenRequest{} }
func (m *FeatureGenRequest) String() string { return proto.CompactTextString(m) }
func (*FeatureGenRequest) ProtoMessage()    {}
func (*FeatureGenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_mlservice_76161abb0c5fa59e, []int{0}
}
func (m *FeatureGenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureGenRequest.Unmarshal(m, b)
}
func (m *FeatureGenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureGenRequest.Marshal(b, m, deterministic)
}
func (dst *FeatureGenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureGenRequest.Merge(dst, src)
}
func (m *FeatureGenRequest) XXX_Size() int {
	return xxx_messageInfo_FeatureGenRequest.Size(m)
}
func (m *FeatureGenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureGenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureGenRequest proto.InternalMessageInfo

func (m *FeatureGenRequest) GetTruthLabels() *FeatureGenRequest_TruthLabels {
	if m != nil {
		return m.TruthLabels
	}
	return nil
}

func (m *FeatureGenRequest) GetTextAnnotation() *_type.TextAnnotation {
	if m != nil {
		return m.TextAnnotation
	}
	return nil
}

type FeatureGenRequest_TruthLabels struct {
	TotalInclVat                float32    `protobuf:"fixed32,1,opt,name=total_incl_vat,json=totalInclVat,proto3" json:"total_incl_vat,omitempty"`
	TotalVat                    float32    `protobuf:"fixed32,2,opt,name=total_vat,json=totalVat,proto3" json:"total_vat,omitempty"`
	TotalExclVat                float32    `protobuf:"fixed32,3,opt,name=total_excl_vat,json=totalExclVat,proto3" json:"total_excl_vat,omitempty"`
	OrderDate                   *date.Date `protobuf:"bytes,4,opt,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	PaymentDueDate              *date.Date `protobuf:"bytes,5,opt,name=payment_due_date,json=paymentDueDate,proto3" json:"payment_due_date,omitempty"`
	DocumentType                string     `protobuf:"bytes,6,opt,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	Currency                    string     `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	CreditCardNumber            string     `protobuf:"bytes,8,opt,name=credit_card_number,json=creditCardNumber,proto3" json:"credit_card_number,omitempty"`
	PaymentMethod               string     `protobuf:"bytes,9,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	OcrLineDkType               string     `protobuf:"bytes,10,opt,name=ocr_line_dk_type,json=ocrLineDkType,proto3" json:"ocr_line_dk_type,omitempty"`
	OcrLineDkPaymentId          string     `protobuf:"bytes,11,opt,name=ocr_line_dk_payment_id,json=ocrLineDkPaymentId,proto3" json:"ocr_line_dk_payment_id,omitempty"`
	OcrLineDkCreditorId         string     `protobuf:"bytes,12,opt,name=ocr_line_dk_creditor_id,json=ocrLineDkCreditorId,proto3" json:"ocr_line_dk_creditor_id,omitempty"`
	OcrLineSePaymentId          string     `protobuf:"bytes,13,opt,name=ocr_line_se_payment_id,json=ocrLineSePaymentId,proto3" json:"ocr_line_se_payment_id,omitempty"`
	OcrLineSeBankgiroCreditorId string     `protobuf:"bytes,14,opt,name=ocr_line_se_bankgiro_creditor_id,json=ocrLineSeBankgiroCreditorId,proto3" json:"ocr_line_se_bankgiro_creditor_id,omitempty"`
	OcrLineSePlusgiroCreditorId string     `protobuf:"bytes,15,opt,name=ocr_line_se_plusgiro_creditor_id,json=ocrLineSePlusgiroCreditorId,proto3" json:"ocr_line_se_plusgiro_creditor_id,omitempty"`
	OcrLineNoPaymentId          string     `protobuf:"bytes,16,opt,name=ocr_line_no_payment_id,json=ocrLineNoPaymentId,proto3" json:"ocr_line_no_payment_id,omitempty"`
	OcrLineFiPaymentId          string     `protobuf:"bytes,17,opt,name=ocr_line_fi_payment_id,json=ocrLineFiPaymentId,proto3" json:"ocr_line_fi_payment_id,omitempty"`
	SupplierName                string     `protobuf:"bytes,18,opt,name=supplier_name,json=supplierName,proto3" json:"supplier_name,omitempty"`
	SupplierCorporateId         string     `protobuf:"bytes,19,opt,name=supplier_corporate_id,json=supplierCorporateId,proto3" json:"supplier_corporate_id,omitempty"`
	SupplierCountryCode         string     `protobuf:"bytes,20,opt,name=supplier_country_code,json=supplierCountryCode,proto3" json:"supplier_country_code,omitempty"`
	InvoiceNumber               string     `protobuf:"bytes,21,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}   `json:"-"`
	XXX_unrecognized            []byte     `json:"-"`
	XXX_sizecache               int32      `json:"-"`
}

func (m *FeatureGenRequest_TruthLabels) Reset()         { *m = FeatureGenRequest_TruthLabels{} }
func (m *FeatureGenRequest_TruthLabels) String() string { return proto.CompactTextString(m) }
func (*FeatureGenRequest_TruthLabels) ProtoMessage()    {}
func (*FeatureGenRequest_TruthLabels) Descriptor() ([]byte, []int) {
	return fileDescriptor_mlservice_76161abb0c5fa59e, []int{0, 0}
}
func (m *FeatureGenRequest_TruthLabels) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureGenRequest_TruthLabels.Unmarshal(m, b)
}
func (m *FeatureGenRequest_TruthLabels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureGenRequest_TruthLabels.Marshal(b, m, deterministic)
}
func (dst *FeatureGenRequest_TruthLabels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureGenRequest_TruthLabels.Merge(dst, src)
}
func (m *FeatureGenRequest_TruthLabels) XXX_Size() int {
	return xxx_messageInfo_FeatureGenRequest_TruthLabels.Size(m)
}
func (m *FeatureGenRequest_TruthLabels) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureGenRequest_TruthLabels.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureGenRequest_TruthLabels proto.InternalMessageInfo

func (m *FeatureGenRequest_TruthLabels) GetTotalInclVat() float32 {
	if m != nil {
		return m.TotalInclVat
	}
	return 0
}

func (m *FeatureGenRequest_TruthLabels) GetTotalVat() float32 {
	if m != nil {
		return m.TotalVat
	}
	return 0
}

func (m *FeatureGenRequest_TruthLabels) GetTotalExclVat() float32 {
	if m != nil {
		return m.TotalExclVat
	}
	return 0
}

func (m *FeatureGenRequest_TruthLabels) GetOrderDate() *date.Date {
	if m != nil {
		return m.OrderDate
	}
	return nil
}

func (m *FeatureGenRequest_TruthLabels) GetPaymentDueDate() *date.Date {
	if m != nil {
		return m.PaymentDueDate
	}
	return nil
}

func (m *FeatureGenRequest_TruthLabels) GetDocumentType() string {
	if m != nil {
		return m.DocumentType
	}
	return ""
}

func (m *FeatureGenRequest_TruthLabels) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *FeatureGenRequest_TruthLabels) GetCreditCardNumber() string {
	if m != nil {
		return m.CreditCardNumber
	}
	return ""
}

func (m *FeatureGenRequest_TruthLabels) GetPaymentMethod() string {
	if m != nil {
		return m.PaymentMethod
	}
	return ""
}

func (m *FeatureGenRequest_TruthLabels) GetOcrLineDkType() string {
	if m != nil {
		return m.OcrLineDkType
	}
	return ""
}

func (m *FeatureGenRequest_TruthLabels) GetOcrLineDkPaymentId() string {
	if m != nil {
		return m.OcrLineDkPaymentId
	}
	return ""
}

func (m *FeatureGenRequest_TruthLabels) GetOcrLineDkCreditorId() string {
	if m != nil {
		return m.OcrLineDkCreditorId
	}
	return ""
}

func (m *FeatureGenRequest_TruthLabels) GetOcrLineSePaymentId() string {
	if m != nil {
		return m.OcrLineSePaymentId
	}
	return ""
}

func (m *FeatureGenRequest_TruthLabels) GetOcrLineSeBankgiroCreditorId() string {
	if m != nil {
		return m.OcrLineSeBankgiroCreditorId
	}
	return ""
}

func (m *FeatureGenRequest_TruthLabels) GetOcrLineSePlusgiroCreditorId() string {
	if m != nil {
		return m.OcrLineSePlusgiroCreditorId
	}
	return ""
}

func (m *FeatureGenRequest_TruthLabels) GetOcrLineNoPaymentId() string {
	if m != nil {
		return m.OcrLineNoPaymentId
	}
	return ""
}

func (m *FeatureGenRequest_TruthLabels) GetOcrLineFiPaymentId() string {
	if m != nil {
		return m.OcrLineFiPaymentId
	}
	return ""
}

func (m *FeatureGenRequest_TruthLabels) GetSupplierName() string {
	if m != nil {
		return m.SupplierName
	}
	return ""
}

func (m *FeatureGenRequest_TruthLabels) GetSupplierCorporateId() string {
	if m != nil {
		return m.SupplierCorporateId
	}
	return ""
}

func (m *FeatureGenRequest_TruthLabels) GetSupplierCountryCode() string {
	if m != nil {
		return m.SupplierCountryCode
	}
	return ""
}

func (m *FeatureGenRequest_TruthLabels) GetInvoiceNumber() string {
	if m != nil {
		return m.InvoiceNumber
	}
	return ""
}

type FeatureGenResponse struct {
	Example              *example.Example `protobuf:"bytes,1,opt,name=example,proto3" json:"example,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *FeatureGenResponse) Reset()         { *m = FeatureGenResponse{} }
func (m *FeatureGenResponse) String() string { return proto.CompactTextString(m) }
func (*FeatureGenResponse) ProtoMessage()    {}
func (*FeatureGenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_mlservice_76161abb0c5fa59e, []int{1}
}
func (m *FeatureGenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureGenResponse.Unmarshal(m, b)
}
func (m *FeatureGenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureGenResponse.Marshal(b, m, deterministic)
}
func (dst *FeatureGenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureGenResponse.Merge(dst, src)
}
func (m *FeatureGenResponse) XXX_Size() int {
	return xxx_messageInfo_FeatureGenResponse.Size(m)
}
func (m *FeatureGenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureGenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureGenResponse proto.InternalMessageInfo

func (m *FeatureGenResponse) GetExample() *example.Example {
	if m != nil {
		return m.Example
	}
	return nil
}

type PredictRequest struct {
	Example              *example.Example `protobuf:"bytes,1,opt,name=example,proto3" json:"example,omitempty"`
	TopNMostConfident    uint32           `protobuf:"varint,2,opt,name=top_n_most_confident,json=topNMostConfident,proto3" json:"top_n_most_confident,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PredictRequest) Reset()         { *m = PredictRequest{} }
func (m *PredictRequest) String() string { return proto.CompactTextString(m) }
func (*PredictRequest) ProtoMessage()    {}
func (*PredictRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_mlservice_76161abb0c5fa59e, []int{2}
}
func (m *PredictRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PredictRequest.Unmarshal(m, b)
}
func (m *PredictRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PredictRequest.Marshal(b, m, deterministic)
}
func (dst *PredictRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PredictRequest.Merge(dst, src)
}
func (m *PredictRequest) XXX_Size() int {
	return xxx_messageInfo_PredictRequest.Size(m)
}
func (m *PredictRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PredictRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PredictRequest proto.InternalMessageInfo

func (m *PredictRequest) GetExample() *example.Example {
	if m != nil {
		return m.Example
	}
	return nil
}

func (m *PredictRequest) GetTopNMostConfident() uint32 {
	if m != nil {
		return m.TopNMostConfident
	}
	return 0
}

// maps to FieldsPrediction
type PredictResponse struct {
	OrderDate                   []*_type.Candidate `protobuf:"bytes,1,rep,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	PaymentDueDate              []*_type.Candidate `protobuf:"bytes,2,rep,name=payment_due_date,json=paymentDueDate,proto3" json:"payment_due_date,omitempty"`
	Currency                    []*_type.Candidate `protobuf:"bytes,3,rep,name=currency,proto3" json:"currency,omitempty"`
	TotalVat                    []*_type.Candidate `protobuf:"bytes,4,rep,name=total_vat,json=totalVat,proto3" json:"total_vat,omitempty"`
	TotalInclVat                []*_type.Candidate `protobuf:"bytes,5,rep,name=total_incl_vat,json=totalInclVat,proto3" json:"total_incl_vat,omitempty"`
	TotalExclVat                []*_type.Candidate `protobuf:"bytes,6,rep,name=total_excl_vat,json=totalExclVat,proto3" json:"total_excl_vat,omitempty"`
	SupplierCorporateId         []*_type.Candidate `protobuf:"bytes,7,rep,name=supplier_corporate_id,json=supplierCorporateId,proto3" json:"supplier_corporate_id,omitempty"`
	SupplierCountryCode         []*_type.Candidate `protobuf:"bytes,8,rep,name=supplier_country_code,json=supplierCountryCode,proto3" json:"supplier_country_code,omitempty"`
	DocumentType                []*_type.Candidate `protobuf:"bytes,9,rep,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	PaymentMethod               []*_type.Candidate `protobuf:"bytes,10,rep,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	CreditCardNumber            []*_type.Candidate `protobuf:"bytes,11,rep,name=credit_card_number,json=creditCardNumber,proto3" json:"credit_card_number,omitempty"`
	InvoiceNumber               []*_type.Candidate `protobuf:"bytes,12,rep,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	OcrLineDkType               []*_type.Candidate `protobuf:"bytes,13,rep,name=ocr_line_dk_type,json=ocrLineDkType,proto3" json:"ocr_line_dk_type,omitempty"`
	OcrLineDkPaymentId          []*_type.Candidate `protobuf:"bytes,14,rep,name=ocr_line_dk_payment_id,json=ocrLineDkPaymentId,proto3" json:"ocr_line_dk_payment_id,omitempty"`
	OcrLineDkCreditorId         []*_type.Candidate `protobuf:"bytes,15,rep,name=ocr_line_dk_creditor_id,json=ocrLineDkCreditorId,proto3" json:"ocr_line_dk_creditor_id,omitempty"`
	OcrLineSePaymentId          []*_type.Candidate `protobuf:"bytes,16,rep,name=ocr_line_se_payment_id,json=ocrLineSePaymentId,proto3" json:"ocr_line_se_payment_id,omitempty"`
	OcrLineSeBankgiroCreditorId []*_type.Candidate `protobuf:"bytes,17,rep,name=ocr_line_se_bankgiro_creditor_id,json=ocrLineSeBankgiroCreditorId,proto3" json:"ocr_line_se_bankgiro_creditor_id,omitempty"`
	OcrLineSePlusgiroCreditorId []*_type.Candidate `protobuf:"bytes,18,rep,name=ocr_line_se_plusgiro_creditor_id,json=ocrLineSePlusgiroCreditorId,proto3" json:"ocr_line_se_plusgiro_creditor_id,omitempty"`
	OcrLineNoPaymentId          []*_type.Candidate `protobuf:"bytes,19,rep,name=ocr_line_no_payment_id,json=ocrLineNoPaymentId,proto3" json:"ocr_line_no_payment_id,omitempty"`
	OcrLineFiPaymentId          []*_type.Candidate `protobuf:"bytes,20,rep,name=ocr_line_fi_payment_id,json=ocrLineFiPaymentId,proto3" json:"ocr_line_fi_payment_id,omitempty"`
	OcrLineNlPaymentId          []*_type.Candidate `protobuf:"bytes,21,rep,name=ocr_line_nl_payment_id,json=ocrLineNlPaymentId,proto3" json:"ocr_line_nl_payment_id,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}           `json:"-"`
	XXX_unrecognized            []byte             `json:"-"`
	XXX_sizecache               int32              `json:"-"`
}

func (m *PredictResponse) Reset()         { *m = PredictResponse{} }
func (m *PredictResponse) String() string { return proto.CompactTextString(m) }
func (*PredictResponse) ProtoMessage()    {}
func (*PredictResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_mlservice_76161abb0c5fa59e, []int{3}
}
func (m *PredictResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PredictResponse.Unmarshal(m, b)
}
func (m *PredictResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PredictResponse.Marshal(b, m, deterministic)
}
func (dst *PredictResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PredictResponse.Merge(dst, src)
}
func (m *PredictResponse) XXX_Size() int {
	return xxx_messageInfo_PredictResponse.Size(m)
}
func (m *PredictResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PredictResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PredictResponse proto.InternalMessageInfo

func (m *PredictResponse) GetOrderDate() []*_type.Candidate {
	if m != nil {
		return m.OrderDate
	}
	return nil
}

func (m *PredictResponse) GetPaymentDueDate() []*_type.Candidate {
	if m != nil {
		return m.PaymentDueDate
	}
	return nil
}

func (m *PredictResponse) GetCurrency() []*_type.Candidate {
	if m != nil {
		return m.Currency
	}
	return nil
}

func (m *PredictResponse) GetTotalVat() []*_type.Candidate {
	if m != nil {
		return m.TotalVat
	}
	return nil
}

func (m *PredictResponse) GetTotalInclVat() []*_type.Candidate {
	if m != nil {
		return m.TotalInclVat
	}
	return nil
}

func (m *PredictResponse) GetTotalExclVat() []*_type.Candidate {
	if m != nil {
		return m.TotalExclVat
	}
	return nil
}

func (m *PredictResponse) GetSupplierCorporateId() []*_type.Candidate {
	if m != nil {
		return m.SupplierCorporateId
	}
	return nil
}

func (m *PredictResponse) GetSupplierCountryCode() []*_type.Candidate {
	if m != nil {
		return m.SupplierCountryCode
	}
	return nil
}

func (m *PredictResponse) GetDocumentType() []*_type.Candidate {
	if m != nil {
		return m.DocumentType
	}
	return nil
}

func (m *PredictResponse) GetPaymentMethod() []*_type.Candidate {
	if m != nil {
		return m.PaymentMethod
	}
	return nil
}

func (m *PredictResponse) GetCreditCardNumber() []*_type.Candidate {
	if m != nil {
		return m.CreditCardNumber
	}
	return nil
}

func (m *PredictResponse) GetInvoiceNumber() []*_type.Candidate {
	if m != nil {
		return m.InvoiceNumber
	}
	return nil
}

func (m *PredictResponse) GetOcrLineDkType() []*_type.Candidate {
	if m != nil {
		return m.OcrLineDkType
	}
	return nil
}

func (m *PredictResponse) GetOcrLineDkPaymentId() []*_type.Candidate {
	if m != nil {
		return m.OcrLineDkPaymentId
	}
	return nil
}

func (m *PredictResponse) GetOcrLineDkCreditorId() []*_type.Candidate {
	if m != nil {
		return m.OcrLineDkCreditorId
	}
	return nil
}

func (m *PredictResponse) GetOcrLineSePaymentId() []*_type.Candidate {
	if m != nil {
		return m.OcrLineSePaymentId
	}
	return nil
}

func (m *PredictResponse) GetOcrLineSeBankgiroCreditorId() []*_type.Candidate {
	if m != nil {
		return m.OcrLineSeBankgiroCreditorId
	}
	return nil
}

func (m *PredictResponse) GetOcrLineSePlusgiroCreditorId() []*_type.Candidate {
	if m != nil {
		return m.OcrLineSePlusgiroCreditorId
	}
	return nil
}

func (m *PredictResponse) GetOcrLineNoPaymentId() []*_type.Candidate {
	if m != nil {
		return m.OcrLineNoPaymentId
	}
	return nil
}

func (m *PredictResponse) GetOcrLineFiPaymentId() []*_type.Candidate {
	if m != nil {
		return m.OcrLineFiPaymentId
	}
	return nil
}

func (m *PredictResponse) GetOcrLineNlPaymentId() []*_type.Candidate {
	if m != nil {
		return m.OcrLineNlPaymentId
	}
	return nil
}

type FeatureGenPredictRequest struct {
	FeatureGenRequest    *FeatureGenRequest `protobuf:"bytes,1,opt,name=feature_gen_request,json=featureGenRequest,proto3" json:"feature_gen_request,omitempty"`
	PredictRequest       *PredictRequest    `protobuf:"bytes,2,opt,name=predict_request,json=predictRequest,proto3" json:"predict_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FeatureGenPredictRequest) Reset()         { *m = FeatureGenPredictRequest{} }
func (m *FeatureGenPredictRequest) String() string { return proto.CompactTextString(m) }
func (*FeatureGenPredictRequest) ProtoMessage()    {}
func (*FeatureGenPredictRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_mlservice_76161abb0c5fa59e, []int{4}
}
func (m *FeatureGenPredictRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureGenPredictRequest.Unmarshal(m, b)
}
func (m *FeatureGenPredictRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureGenPredictRequest.Marshal(b, m, deterministic)
}
func (dst *FeatureGenPredictRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureGenPredictRequest.Merge(dst, src)
}
func (m *FeatureGenPredictRequest) XXX_Size() int {
	return xxx_messageInfo_FeatureGenPredictRequest.Size(m)
}
func (m *FeatureGenPredictRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureGenPredictRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureGenPredictRequest proto.InternalMessageInfo

func (m *FeatureGenPredictRequest) GetFeatureGenRequest() *FeatureGenRequest {
	if m != nil {
		return m.FeatureGenRequest
	}
	return nil
}

func (m *FeatureGenPredictRequest) GetPredictRequest() *PredictRequest {
	if m != nil {
		return m.PredictRequest
	}
	return nil
}

func init() {
	proto.RegisterType((*FeatureGenRequest)(nil), "ssn.mlservice.v2.FeatureGenRequest")
	proto.RegisterType((*FeatureGenRequest_TruthLabels)(nil), "ssn.mlservice.v2.FeatureGenRequest.TruthLabels")
	proto.RegisterType((*FeatureGenResponse)(nil), "ssn.mlservice.v2.FeatureGenResponse")
	proto.RegisterType((*PredictRequest)(nil), "ssn.mlservice.v2.PredictRequest")
	proto.RegisterType((*PredictResponse)(nil), "ssn.mlservice.v2.PredictResponse")
	proto.RegisterType((*FeatureGenPredictRequest)(nil), "ssn.mlservice.v2.FeatureGenPredictRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MlServiceClient is the client API for MlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MlServiceClient interface {
	FeatureGen(ctx context.Context, in *FeatureGenRequest, opts ...grpc.CallOption) (*FeatureGenResponse, error)
	Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictResponse, error)
	// Convinienve method
	FeatureGenPredict(ctx context.Context, in *FeatureGenPredictRequest, opts ...grpc.CallOption) (*PredictResponse, error)
}

type mlServiceClient struct {
	cc *grpc.ClientConn
}

func NewMlServiceClient(cc *grpc.ClientConn) MlServiceClient {
	return &mlServiceClient{cc}
}

func (c *mlServiceClient) FeatureGen(ctx context.Context, in *FeatureGenRequest, opts ...grpc.CallOption) (*FeatureGenResponse, error) {
	out := new(FeatureGenResponse)
	err := c.cc.Invoke(ctx, "/ssn.mlservice.v2.MlService/FeatureGen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlServiceClient) Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictResponse, error) {
	out := new(PredictResponse)
	err := c.cc.Invoke(ctx, "/ssn.mlservice.v2.MlService/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlServiceClient) FeatureGenPredict(ctx context.Context, in *FeatureGenPredictRequest, opts ...grpc.CallOption) (*PredictResponse, error) {
	out := new(PredictResponse)
	err := c.cc.Invoke(ctx, "/ssn.mlservice.v2.MlService/FeatureGenPredict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MlServiceServer is the server API for MlService service.
type MlServiceServer interface {
	FeatureGen(context.Context, *FeatureGenRequest) (*FeatureGenResponse, error)
	Predict(context.Context, *PredictRequest) (*PredictResponse, error)
	// Convinienve method
	FeatureGenPredict(context.Context, *FeatureGenPredictRequest) (*PredictResponse, error)
}

func RegisterMlServiceServer(s *grpc.Server, srv MlServiceServer) {
	s.RegisterService(&_MlService_serviceDesc, srv)
}

func _MlService_FeatureGen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureGenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlServiceServer).FeatureGen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssn.mlservice.v2.MlService/FeatureGen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlServiceServer).FeatureGen(ctx, req.(*FeatureGenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlService_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlServiceServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssn.mlservice.v2.MlService/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlServiceServer).Predict(ctx, req.(*PredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlService_FeatureGenPredict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureGenPredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlServiceServer).FeatureGenPredict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssn.mlservice.v2.MlService/FeatureGenPredict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlServiceServer).FeatureGenPredict(ctx, req.(*FeatureGenPredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MlService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ssn.mlservice.v2.MlService",
	HandlerType: (*MlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FeatureGen",
			Handler:    _MlService_FeatureGen_Handler,
		},
		{
			MethodName: "Predict",
			Handler:    _MlService_Predict_Handler,
		},
		{
			MethodName: "FeatureGenPredict",
			Handler:    _MlService_FeatureGenPredict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ssn/mlservice/v2/mlservice.proto",
}

func init() {
	proto.RegisterFile("ssn/mlservice/v2/mlservice.proto", fileDescriptor_mlservice_76161abb0c5fa59e)
}

var fileDescriptor_mlservice_76161abb0c5fa59e = []byte{
	// 1038 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x5f, 0x6f, 0xe2, 0xc6,
	0x17, 0x55, 0xc8, 0x6e, 0x08, 0xc3, 0xff, 0x21, 0xd9, 0x9f, 0xc5, 0x4a, 0x3f, 0x51, 0xb2, 0xab,
	0xae, 0xaa, 0x16, 0x56, 0xb4, 0x0f, 0xdd, 0x6d, 0xfb, 0x90, 0x25, 0x59, 0x84, 0xb4, 0x41, 0x91,
	0x13, 0xb5, 0x52, 0x5e, 0x2c, 0x63, 0x5f, 0xb2, 0x56, 0xcc, 0x8c, 0x3b, 0x1e, 0x53, 0xf8, 0x1a,
	0x7d, 0x6a, 0xbf, 0x4a, 0x3f, 0x53, 0x3f, 0x44, 0xe5, 0x19, 0xff, 0x19, 0x03, 0x06, 0xf6, 0x29,
	0xf1, 0xbd, 0xe7, 0x9c, 0x7b, 0x8d, 0x87, 0x73, 0x0c, 0xea, 0xf8, 0x3e, 0xe9, 0xcf, 0x5d, 0x1f,
	0xd8, 0xc2, 0xb1, 0xa0, 0xbf, 0x18, 0xa4, 0x17, 0x3d, 0x8f, 0x51, 0x4e, 0x71, 0xc3, 0xf7, 0x49,
	0x2f, 0x2d, 0x2e, 0x06, 0xed, 0x17, 0x8f, 0x94, 0x3e, 0xba, 0xd0, 0xe7, 0x2b, 0x0f, 0xfa, 0xb6,
	0xc9, 0x23, 0x64, 0x5b, 0x0b, 0xb5, 0x44, 0xd1, 0x32, 0x89, 0xed, 0x28, 0x9d, 0xff, 0x27, 0x1d,
	0x0e, 0x4b, 0x6e, 0x98, 0x84, 0x50, 0x6e, 0x72, 0x87, 0x92, 0xa8, 0xff, 0x9a, 0x03, 0xf1, 0x29,
	0x9b, 0xb9, 0xf4, 0x8f, 0xbe, 0x45, 0x19, 0xf4, 0x61, 0x69, 0xce, 0x3d, 0x37, 0xf9, 0x2b, 0x61,
	0xdd, 0xbf, 0x4b, 0xa8, 0xf9, 0x11, 0x4c, 0x1e, 0x30, 0x18, 0x01, 0xd1, 0xe1, 0xf7, 0x00, 0x7c,
	0x8e, 0x75, 0x54, 0xe1, 0x2c, 0xe0, 0x9f, 0x0d, 0xd7, 0x9c, 0x82, 0xeb, 0x6b, 0x47, 0x9d, 0xa3,
	0x37, 0xe5, 0x41, 0xbf, 0xb7, 0xbe, 0x77, 0x6f, 0x83, 0xda, 0xbb, 0x0f, 0x79, 0x9f, 0x04, 0x4d,
	0x2f, 0xf3, 0xf4, 0x02, 0x5f, 0xa2, 0xfa, 0xda, 0xa6, 0x5a, 0x41, 0xc8, 0x6a, 0x42, 0x36, 0xbc,
	0x95, 0xde, 0x3d, 0x2c, 0xf9, 0x65, 0xd2, 0xd7, 0x6b, 0x3c, 0x73, 0xdd, 0xfe, 0xb7, 0x88, 0xca,
	0x8a, 0x3e, 0x7e, 0x85, 0x6a, 0x9c, 0x72, 0xd3, 0x35, 0x1c, 0x62, 0xb9, 0xc6, 0xc2, 0xe4, 0x62,
	0xd1, 0x82, 0x5e, 0x11, 0xd5, 0x31, 0xb1, 0xdc, 0x5f, 0x4d, 0x8e, 0x5f, 0xa2, 0x92, 0x44, 0x85,
	0x80, 0x82, 0x00, 0x9c, 0x8a, 0x42, 0xd8, 0x4c, 0x24, 0x60, 0x19, 0x49, 0x1c, 0x2b, 0x12, 0xd7,
	0x4b, 0x29, 0xf1, 0x16, 0x21, 0xca, 0x6c, 0x60, 0x46, 0xf8, 0x00, 0xb4, 0x67, 0x62, 0xed, 0x66,
	0x4f, 0x3e, 0x33, 0xb9, 0xf9, 0x95, 0xc9, 0x41, 0x2f, 0x09, 0x50, 0xf8, 0x2f, 0xfe, 0x09, 0x35,
	0x3c, 0x73, 0x35, 0x07, 0xc2, 0x0d, 0x3b, 0x00, 0xc9, 0x7b, 0x9e, 0xc7, 0xab, 0x45, 0xd0, 0xab,
	0x00, 0x04, 0xf9, 0x02, 0x55, 0x6d, 0x6a, 0x05, 0x82, 0x1d, 0xa2, 0xb4, 0x93, 0xce, 0xd1, 0x9b,
	0x92, 0x5e, 0x89, 0x8b, 0xf7, 0x2b, 0x0f, 0x70, 0x1b, 0x9d, 0x5a, 0x01, 0x63, 0x40, 0xac, 0x95,
	0x56, 0x14, 0xfd, 0xe4, 0x1a, 0x7f, 0x8b, 0xb0, 0xc5, 0xc0, 0x76, 0xb8, 0x61, 0x99, 0xcc, 0x36,
	0x48, 0x30, 0x9f, 0x02, 0xd3, 0x4e, 0x05, 0xaa, 0x21, 0x3b, 0x43, 0x93, 0xd9, 0x13, 0x51, 0xc7,
	0xaf, 0x51, 0xbc, 0x80, 0x31, 0x07, 0xfe, 0x99, 0xda, 0x5a, 0x49, 0x20, 0xab, 0x51, 0xf5, 0x46,
	0x14, 0xf1, 0xd7, 0xa8, 0x41, 0x2d, 0x66, 0xb8, 0x0e, 0x01, 0xc3, 0x7e, 0x92, 0x8b, 0x21, 0x09,
	0xa4, 0x16, 0xfb, 0xe4, 0x10, 0xb8, 0x7a, 0x12, 0x9b, 0x0d, 0xd0, 0x0b, 0x15, 0x18, 0x6b, 0x3b,
	0xb6, 0x56, 0x16, 0x70, 0x9c, 0xc0, 0x6f, 0x65, 0x6b, 0x6c, 0xe3, 0x1f, 0xd0, 0xff, 0x54, 0x8e,
	0xdc, 0x91, 0xb2, 0x90, 0x54, 0x11, 0xa4, 0x56, 0x42, 0x1a, 0x46, 0xbd, 0xb1, 0x9d, 0x99, 0xe4,
	0x83, 0x3a, 0xa9, 0x9a, 0x99, 0x74, 0x07, 0xe9, 0xa4, 0x6b, 0xd4, 0x51, 0x39, 0x53, 0x93, 0x3c,
	0x3d, 0x3a, 0x8c, 0x66, 0x46, 0xd6, 0x04, 0xfb, 0x65, 0xc2, 0xfe, 0x10, 0x81, 0x94, 0xd1, 0x6b,
	0x32, 0x9e, 0x1b, 0xf8, 0x1b, 0x32, 0xf5, 0x35, 0x99, 0xdb, 0x08, 0x94, 0x73, 0x07, 0x84, 0xaa,
	0x77, 0xd0, 0xc8, 0xdc, 0xc1, 0x84, 0xa6, 0x77, 0xa0, 0x72, 0x66, 0x8e, 0xca, 0x69, 0x66, 0x38,
	0x1f, 0x9d, 0x94, 0x73, 0x81, 0xaa, 0x7e, 0xe0, 0x79, 0xae, 0x03, 0xcc, 0x20, 0xe6, 0x1c, 0x34,
	0x2c, 0x8f, 0x54, 0x5c, 0x9c, 0x98, 0xf3, 0xf0, 0xc1, 0x9d, 0x27, 0x20, 0x8b, 0x32, 0x8f, 0x32,
	0x93, 0x43, 0xa8, 0xdb, 0x92, 0x8f, 0x20, 0x6e, 0x0e, 0xe3, 0x9e, 0x58, 0x46, 0xe5, 0x04, 0x84,
	0xb3, 0x95, 0x61, 0x51, 0x1b, 0xb4, 0xb3, 0x75, 0x8e, 0xe8, 0x0d, 0xa9, 0x0d, 0xe1, 0x81, 0x73,
	0xc8, 0x82, 0x3a, 0x16, 0xc4, 0x47, 0xf3, 0x5c, 0x9e, 0xa3, 0xa8, 0x2a, 0xcf, 0x65, 0x77, 0x88,
	0xb0, 0xea, 0x2f, 0xbe, 0x47, 0x89, 0x0f, 0xf8, 0x3b, 0x54, 0x8c, 0x2c, 0x2c, 0xb2, 0xa5, 0x56,
	0x2f, 0xb5, 0xba, 0xde, 0xb5, 0x6c, 0xe9, 0x31, 0xa6, 0xeb, 0xa1, 0xda, 0x6d, 0xf8, 0x71, 0x5b,
	0x3c, 0x36, 0xb7, 0x2f, 0x13, 0xc0, 0x7d, 0x74, 0xc6, 0xa9, 0x67, 0x10, 0x63, 0x4e, 0x7d, 0x6e,
	0x58, 0x94, 0xcc, 0x1c, 0x1b, 0x88, 0x74, 0x92, 0xaa, 0xde, 0xe4, 0xd4, 0x9b, 0xdc, 0x50, 0x9f,
	0x0f, 0xe3, 0x46, 0xf7, 0xcf, 0x32, 0xaa, 0x27, 0x23, 0xa3, 0xa5, 0x07, 0x19, 0x03, 0x39, 0xea,
	0x1c, 0x8b, 0xb1, 0x89, 0xef, 0x0d, 0x63, 0x73, 0x57, 0x2d, 0xe4, 0x97, 0x2d, 0x16, 0x52, 0xc8,
	0x67, 0xae, 0x9b, 0x48, 0x5f, 0xf1, 0x87, 0xe3, 0x7c, 0x5a, 0x6a, 0x1a, 0x6f, 0x55, 0x9f, 0x7c,
	0xb6, 0x83, 0x91, 0x98, 0xe7, 0xbb, 0x0d, 0xff, 0x7d, 0x9e, 0x4f, 0xcb, 0x9a, 0xf2, 0xbb, 0x0d,
	0xdf, 0x3d, 0xd9, 0x47, 0x8d, 0xcd, 0x78, 0x94, 0x77, 0x4a, 0x8b, 0xf9, 0x0a, 0x5b, 0x8f, 0xee,
	0x28, 0xef, 0xe8, 0x9e, 0x1e, 0x24, 0x94, 0x9e, 0xe7, 0x1f, 0xd7, 0xfd, 0xba, 0xb4, 0xe3, 0x5e,
	0x32, 0x26, 0xfe, 0x7e, 0xc3, 0x7a, 0x51, 0x3e, 0x75, 0xcd, 0x8f, 0x2f, 0xb7, 0x9a, 0x7c, 0x39,
	0x9f, 0xbf, 0xe9, 0xfc, 0xef, 0x37, 0xbe, 0x88, 0x95, 0x1d, 0xe3, 0x33, 0xdf, 0x4e, 0xfc, 0xf3,
	0x96, 0x38, 0xa8, 0xee, 0x60, 0x67, 0x33, 0x62, 0x94, 0x9b, 0x11, 0xb5, 0x7c, 0x8d, 0x6d, 0xc1,
	0x31, 0xce, 0x0f, 0x8e, 0xfa, 0x8e, 0xc7, 0xb8, 0x2d, 0x4d, 0x46, 0xb9, 0x69, 0xd2, 0xd8, 0xbf,
	0x93, 0x1a, 0x31, 0x0f, 0x07, 0x44, 0x4c, 0x33, 0x5f, 0x72, 0x67, 0xee, 0x3c, 0x1c, 0x90, 0x3b,
	0xf8, 0x10, 0xed, 0x2d, 0x61, 0x34, 0xca, 0x0d, 0xa3, 0xd6, 0xfe, 0x0f, 0x40, 0x4d, 0xa8, 0x51,
	0x6e, 0x42, 0x9d, 0xed, 0x17, 0x52, 0x63, 0x2b, 0xb3, 0x91, 0xab, 0x0a, 0x9d, 0x1f, 0xb0, 0x91,
	0x9b, 0x08, 0x75, 0xff, 0x39, 0x42, 0x5a, 0x1a, 0x26, 0x6b, 0x89, 0x70, 0x87, 0x5a, 0x33, 0xd9,
	0x33, 0x1e, 0x81, 0x18, 0x4c, 0x96, 0xa3, 0x74, 0xb8, 0x38, 0xe0, 0xad, 0x57, 0x6f, 0xce, 0x36,
	0xde, 0xa1, 0xc7, 0xa8, 0xee, 0xc9, 0x31, 0x89, 0xa0, 0x7c, 0xdf, 0xed, 0x6c, 0x0a, 0x66, 0xf7,
	0xd1, 0x6b, 0x5e, 0xe6, 0x7a, 0xf0, 0x57, 0x01, 0x95, 0x6e, 0xdc, 0x3b, 0x89, 0xc7, 0xbf, 0x21,
	0x94, 0x2e, 0x80, 0x0f, 0x59, 0xaf, 0xfd, 0x6a, 0x37, 0x28, 0x0a, 0xa9, 0x09, 0x2a, 0x46, 0x8b,
	0xe0, 0xbd, 0x3b, 0xb6, 0xbf, 0xda, 0x81, 0x88, 0xf4, 0xa6, 0xea, 0x4f, 0x8b, 0x58, 0xf9, 0x9b,
	0x5d, 0xab, 0x7c, 0xf1, 0x8c, 0x0f, 0xe5, 0x87, 0x52, 0xd2, 0x9f, 0x9e, 0x88, 0xdf, 0x34, 0xdf,
	0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x96, 0x2f, 0x59, 0x16, 0x82, 0x0d, 0x00, 0x00,
}
