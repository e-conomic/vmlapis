// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ssn/type/geometry.proto

package _type

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Vertex with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Vertex) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for X

	// no validation rules for Y

	return nil
}

// VertexValidationError is the validation error returned by Vertex.Validate if
// the designated constraints aren't met.
type VertexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VertexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VertexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VertexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VertexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VertexValidationError) ErrorName() string { return "VertexValidationError" }

// Error satisfies the builtin error interface
func (e VertexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVertex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VertexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VertexValidationError{}

// Validate checks the field values on NormalizedVertex with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *NormalizedVertex) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for X

	// no validation rules for Y

	return nil
}

// NormalizedVertexValidationError is the validation error returned by
// NormalizedVertex.Validate if the designated constraints aren't met.
type NormalizedVertexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NormalizedVertexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NormalizedVertexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NormalizedVertexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NormalizedVertexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NormalizedVertexValidationError) ErrorName() string { return "NormalizedVertexValidationError" }

// Error satisfies the builtin error interface
func (e NormalizedVertexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNormalizedVertex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NormalizedVertexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NormalizedVertexValidationError{}

// Validate checks the field values on BoundingPoly with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BoundingPoly) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVertices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BoundingPolyValidationError{
					field:  fmt.Sprintf("Vertices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNormalizedVertices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BoundingPolyValidationError{
					field:  fmt.Sprintf("NormalizedVertices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BoundingPolyValidationError is the validation error returned by
// BoundingPoly.Validate if the designated constraints aren't met.
type BoundingPolyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BoundingPolyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BoundingPolyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BoundingPolyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BoundingPolyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BoundingPolyValidationError) ErrorName() string { return "BoundingPolyValidationError" }

// Error satisfies the builtin error interface
func (e BoundingPolyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBoundingPoly.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BoundingPolyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BoundingPolyValidationError{}
