// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: ssn/type/document_annotation.proto

package ssntype

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StandardFieldAnnotator int32

const (
	StandardField_UNKNOWN StandardFieldAnnotator = 0
	StandardField_OCR     StandardFieldAnnotator = 1
	StandardField_ML      StandardFieldAnnotator = 2
	StandardField_RULE    StandardFieldAnnotator = 3
)

// Enum value maps for StandardFieldAnnotator.
var (
	StandardFieldAnnotator_name = map[int32]string{
		0: "UNKNOWN",
		1: "OCR",
		2: "ML",
		3: "RULE",
	}
	StandardFieldAnnotator_value = map[string]int32{
		"UNKNOWN": 0,
		"OCR":     1,
		"ML":      2,
		"RULE":    3,
	}
)

func (x StandardFieldAnnotator) Enum() *StandardFieldAnnotator {
	p := new(StandardFieldAnnotator)
	*p = x
	return p
}

func (x StandardFieldAnnotator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardFieldAnnotator) Descriptor() protoreflect.EnumDescriptor {
	return file_ssn_type_document_annotation_proto_enumTypes[0].Descriptor()
}

func (StandardFieldAnnotator) Type() protoreflect.EnumType {
	return &file_ssn_type_document_annotation_proto_enumTypes[0]
}

func (x StandardFieldAnnotator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StandardFieldAnnotator.Descriptor instead.
func (StandardFieldAnnotator) EnumDescriptor() ([]byte, []int) {
	return file_ssn_type_document_annotation_proto_rawDescGZIP(), []int{1, 0}
}

type DocumentAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// orderDate
	// ISO 8601 date string, ie. a string of the format "YYYY-MM-DD"
	// Example: "2019-12-31"
	OrderDate *StandardField `protobuf:"bytes,1,opt,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	// paymentDueDate
	// ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
	// Example: "2019-12-31"
	PaymentDueDate *StandardField `protobuf:"bytes,2,opt,name=payment_due_date,json=paymentDueDate,proto3" json:"payment_due_date,omitempty"`
	// currency
	// ISO 4217 string, ie. a 3-letter capitalized string
	// Example: "NOK"
	Currency *StandardField `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	// totalVat
	// A string that parses as a two-decimal number
	// Example: "10.0" or "11.11"
	TotalVat *StandardField `protobuf:"bytes,4,opt,name=total_vat,json=totalVat,proto3" json:"total_vat,omitempty"`
	// totalInclVat
	// A string that parses as a two-decimal number
	// Example: "10.0" or "11.11"
	TotalInclVat *StandardField `protobuf:"bytes,5,opt,name=total_incl_vat,json=totalInclVat,proto3" json:"total_incl_vat,omitempty"`
	// totalExclVat
	// A string that parses as a two-decimal number
	// Example: "10.0" or "11.11"
	TotalExclVat *StandardField `protobuf:"bytes,6,opt,name=total_excl_vat,json=totalExclVat,proto3" json:"total_excl_vat,omitempty"`
	// supplierCountryCode
	// ISO 3166-1 alpha-2 string, ei. a two-letter capitalized string
	// Example: "NO"
	SupplierCountryCode *StandardField `protobuf:"bytes,8,opt,name=supplier_country_code,json=supplierCountryCode,proto3" json:"supplier_country_code,omitempty"`
	// documentType
	// Either "Receipt" or "Invoice"
	DocumentType *StandardField `protobuf:"bytes,9,opt,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	// paymentMethod
	// Either "Cash" or "CreditCard"
	PaymentMethod *StandardField `protobuf:"bytes,10,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	// creditCardNumber
	// Four digits
	// Example: "0012"
	CreditCardLastFour *StandardField `protobuf:"bytes,11,opt,name=credit_card_last_four,json=creditCardLastFour,proto3" json:"credit_card_last_four,omitempty"`
	// example: "71"
	OcrLineDkType *StandardField `protobuf:"bytes,14,opt,name=ocr_line_dk_type,json=ocrLineDkType,proto3" json:"ocr_line_dk_type,omitempty"`
	// example: "000002879094031"
	OcrLineDkPaymentId *StandardField `protobuf:"bytes,15,opt,name=ocr_line_dk_payment_id,json=ocrLineDkPaymentId,proto3" json:"ocr_line_dk_payment_id,omitempty"`
	// example: "86570807"
	OcrLineDkCreditorId *StandardField `protobuf:"bytes,16,opt,name=ocr_line_dk_creditor_id,json=ocrLineDkCreditorId,proto3" json:"ocr_line_dk_creditor_id,omitempty"`
	// example: "050765098"
	OcrLineSePaymentId *StandardField `protobuf:"bytes,17,opt,name=ocr_line_se_payment_id,json=ocrLineSePaymentId,proto3" json:"ocr_line_se_payment_id,omitempty"`
	// example: "2654507"
	OcrLineSeBankgiroCreditorId *StandardField `protobuf:"bytes,18,opt,name=ocr_line_se_bankgiro_creditor_id,json=ocrLineSeBankgiroCreditorId,proto3" json:"ocr_line_se_bankgiro_creditor_id,omitempty"`
	// example: "5000872"
	OcrLineSePlusgiroCreditorId *StandardField `protobuf:"bytes,19,opt,name=ocr_line_se_plusgiro_creditor_id,json=ocrLineSePlusgiroCreditorId,proto3" json:"ocr_line_se_plusgiro_creditor_id,omitempty"`
	// example: "12345678903"
	OcrLineNoPaymentId *StandardField `protobuf:"bytes,20,opt,name=ocr_line_no_payment_id,json=ocrLineNoPaymentId,proto3" json:"ocr_line_no_payment_id,omitempty"`
	// example: "0817937867870002"
	OcrLineFiPaymentId *StandardField `protobuf:"bytes,21,opt,name=ocr_line_fi_payment_id,json=ocrLineFiPaymentId,proto3" json:"ocr_line_fi_payment_id,omitempty"`
	// example: "00000159220010146012"
	OcrLineNlPaymentId *StandardField `protobuf:"bytes,22,opt,name=ocr_line_nl_payment_id,json=ocrLineNlPaymentId,proto3" json:"ocr_line_nl_payment_id,omitempty"`
	OcrLineBePaymentId *StandardField `protobuf:"bytes,40,opt,name=ocr_line_be_payment_id,json=ocrLineBePaymentId,proto3" json:"ocr_line_be_payment_id,omitempty"`
	// The first two letters are a country code. The next two digits are
	// check digits for the ISO 7064 Mod 97, 10 checksum
	// example: "DK50 0040 0440 1162 43", "NO8330001234567"
	Iban *StandardField `protobuf:"bytes,25,opt,name=iban,proto3" json:"iban,omitempty"`
	// Country specific bank account number
	BankAccountNumber *StandardField `protobuf:"bytes,28,opt,name=bank_account_number,json=bankAccountNumber,proto3" json:"bank_account_number,omitempty"`
	// Country specific bank registration number
	BankRegistrationNumber *StandardField `protobuf:"bytes,29,opt,name=bank_registration_number,json=bankRegistrationNumber,proto3" json:"bank_registration_number,omitempty"`
	// Returns business identifier code
	Bic *StandardField `protobuf:"bytes,30,opt,name=bic,proto3" json:"bic,omitempty"`
	// Represents identifier of the document
	DocumentNumber *StandardField `protobuf:"bytes,31,opt,name=document_number,json=documentNumber,proto3" json:"document_number,omitempty"`
	// Returns document date
	DocumentDate *StandardField `protobuf:"bytes,32,opt,name=document_date,json=documentDate,proto3" json:"document_date,omitempty"`
	// Represents the identifier that supplier assigned to the order
	OrderNumber *StandardField `protobuf:"bytes,33,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	// Returns supplier name
	SupplierName *StandardField `protobuf:"bytes,34,opt,name=supplier_name,json=supplierName,proto3" json:"supplier_name,omitempty"`
	// [EXPERIMENTAL]
	// Returns supplier VAT number
	SupplierVatNumber *StandardField `protobuf:"bytes,35,opt,name=supplier_vat_number,json=supplierVatNumber,proto3" json:"supplier_vat_number,omitempty"`
	// [EXPERIMENTAL]
	// Returns the business ID or organisation number of the supplier
	SupplierOrganisationNumber *StandardField `protobuf:"bytes,36,opt,name=supplier_organisation_number,json=supplierOrganisationNumber,proto3" json:"supplier_organisation_number,omitempty"`
	// [EXPERIMENTAL]
	// Returns supplier address
	SupplierAddress *StandardField `protobuf:"bytes,37,opt,name=supplier_address,json=supplierAddress,proto3" json:"supplier_address,omitempty"`
	// [EXPERIMENTAL]
	// Returns customer identifier/number
	CustomerNumber *StandardField `protobuf:"bytes,38,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	// Equivalent of order number for receiver
	ReceiverOrderNumber *StandardField `protobuf:"bytes,39,opt,name=receiver_order_number,json=receiverOrderNumber,proto3" json:"receiver_order_number,omitempty"`
	// Equivalent of address for receiver
	ReceiverAddress *StandardField `protobuf:"bytes,41,opt,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
	// Equivalent of country code for receiver
	ReceiverCountryCode *StandardField `protobuf:"bytes,42,opt,name=receiver_country_code,json=receiverCountryCode,proto3" json:"receiver_country_code,omitempty"`
	// Equivalent of supplier name for receiver
	ReceiverName *StandardField `protobuf:"bytes,43,opt,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`
	// Equivalent of VAT number for receiver
	ReceiverVatNumber *StandardField `protobuf:"bytes,44,opt,name=receiver_vat_number,json=receiverVatNumber,proto3" json:"receiver_vat_number,omitempty"`
	// Answer Candidates for the questions asked in th request about the document
	// Each Answer is question and answer pair with page number and confidence
	PageTexts *StandardField `protobuf:"bytes,47,opt,name=page_texts,json=pageTexts,proto3" json:"page_texts,omitempty"`
	// Order Reference
	OrderReference *StandardField `protobuf:"bytes,51,opt,name=order_reference,json=orderReference,proto3" json:"order_reference,omitempty"`
}

func (x *DocumentAnnotation) Reset() {
	*x = DocumentAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_type_document_annotation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentAnnotation) ProtoMessage() {}

func (x *DocumentAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_type_document_annotation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentAnnotation.ProtoReflect.Descriptor instead.
func (*DocumentAnnotation) Descriptor() ([]byte, []int) {
	return file_ssn_type_document_annotation_proto_rawDescGZIP(), []int{0}
}

func (x *DocumentAnnotation) GetOrderDate() *StandardField {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *DocumentAnnotation) GetPaymentDueDate() *StandardField {
	if x != nil {
		return x.PaymentDueDate
	}
	return nil
}

func (x *DocumentAnnotation) GetCurrency() *StandardField {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *DocumentAnnotation) GetTotalVat() *StandardField {
	if x != nil {
		return x.TotalVat
	}
	return nil
}

func (x *DocumentAnnotation) GetTotalInclVat() *StandardField {
	if x != nil {
		return x.TotalInclVat
	}
	return nil
}

func (x *DocumentAnnotation) GetTotalExclVat() *StandardField {
	if x != nil {
		return x.TotalExclVat
	}
	return nil
}

func (x *DocumentAnnotation) GetSupplierCountryCode() *StandardField {
	if x != nil {
		return x.SupplierCountryCode
	}
	return nil
}

func (x *DocumentAnnotation) GetDocumentType() *StandardField {
	if x != nil {
		return x.DocumentType
	}
	return nil
}

func (x *DocumentAnnotation) GetPaymentMethod() *StandardField {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *DocumentAnnotation) GetCreditCardLastFour() *StandardField {
	if x != nil {
		return x.CreditCardLastFour
	}
	return nil
}

func (x *DocumentAnnotation) GetOcrLineDkType() *StandardField {
	if x != nil {
		return x.OcrLineDkType
	}
	return nil
}

func (x *DocumentAnnotation) GetOcrLineDkPaymentId() *StandardField {
	if x != nil {
		return x.OcrLineDkPaymentId
	}
	return nil
}

func (x *DocumentAnnotation) GetOcrLineDkCreditorId() *StandardField {
	if x != nil {
		return x.OcrLineDkCreditorId
	}
	return nil
}

func (x *DocumentAnnotation) GetOcrLineSePaymentId() *StandardField {
	if x != nil {
		return x.OcrLineSePaymentId
	}
	return nil
}

func (x *DocumentAnnotation) GetOcrLineSeBankgiroCreditorId() *StandardField {
	if x != nil {
		return x.OcrLineSeBankgiroCreditorId
	}
	return nil
}

func (x *DocumentAnnotation) GetOcrLineSePlusgiroCreditorId() *StandardField {
	if x != nil {
		return x.OcrLineSePlusgiroCreditorId
	}
	return nil
}

func (x *DocumentAnnotation) GetOcrLineNoPaymentId() *StandardField {
	if x != nil {
		return x.OcrLineNoPaymentId
	}
	return nil
}

func (x *DocumentAnnotation) GetOcrLineFiPaymentId() *StandardField {
	if x != nil {
		return x.OcrLineFiPaymentId
	}
	return nil
}

func (x *DocumentAnnotation) GetOcrLineNlPaymentId() *StandardField {
	if x != nil {
		return x.OcrLineNlPaymentId
	}
	return nil
}

func (x *DocumentAnnotation) GetOcrLineBePaymentId() *StandardField {
	if x != nil {
		return x.OcrLineBePaymentId
	}
	return nil
}

func (x *DocumentAnnotation) GetIban() *StandardField {
	if x != nil {
		return x.Iban
	}
	return nil
}

func (x *DocumentAnnotation) GetBankAccountNumber() *StandardField {
	if x != nil {
		return x.BankAccountNumber
	}
	return nil
}

func (x *DocumentAnnotation) GetBankRegistrationNumber() *StandardField {
	if x != nil {
		return x.BankRegistrationNumber
	}
	return nil
}

func (x *DocumentAnnotation) GetBic() *StandardField {
	if x != nil {
		return x.Bic
	}
	return nil
}

func (x *DocumentAnnotation) GetDocumentNumber() *StandardField {
	if x != nil {
		return x.DocumentNumber
	}
	return nil
}

func (x *DocumentAnnotation) GetDocumentDate() *StandardField {
	if x != nil {
		return x.DocumentDate
	}
	return nil
}

func (x *DocumentAnnotation) GetOrderNumber() *StandardField {
	if x != nil {
		return x.OrderNumber
	}
	return nil
}

func (x *DocumentAnnotation) GetSupplierName() *StandardField {
	if x != nil {
		return x.SupplierName
	}
	return nil
}

func (x *DocumentAnnotation) GetSupplierVatNumber() *StandardField {
	if x != nil {
		return x.SupplierVatNumber
	}
	return nil
}

func (x *DocumentAnnotation) GetSupplierOrganisationNumber() *StandardField {
	if x != nil {
		return x.SupplierOrganisationNumber
	}
	return nil
}

func (x *DocumentAnnotation) GetSupplierAddress() *StandardField {
	if x != nil {
		return x.SupplierAddress
	}
	return nil
}

func (x *DocumentAnnotation) GetCustomerNumber() *StandardField {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *DocumentAnnotation) GetReceiverOrderNumber() *StandardField {
	if x != nil {
		return x.ReceiverOrderNumber
	}
	return nil
}

func (x *DocumentAnnotation) GetReceiverAddress() *StandardField {
	if x != nil {
		return x.ReceiverAddress
	}
	return nil
}

func (x *DocumentAnnotation) GetReceiverCountryCode() *StandardField {
	if x != nil {
		return x.ReceiverCountryCode
	}
	return nil
}

func (x *DocumentAnnotation) GetReceiverName() *StandardField {
	if x != nil {
		return x.ReceiverName
	}
	return nil
}

func (x *DocumentAnnotation) GetReceiverVatNumber() *StandardField {
	if x != nil {
		return x.ReceiverVatNumber
	}
	return nil
}

func (x *DocumentAnnotation) GetPageTexts() *StandardField {
	if x != nil {
		return x.PageTexts
	}
	return nil
}

func (x *DocumentAnnotation) GetOrderReference() *StandardField {
	if x != nil {
		return x.OrderReference
	}
	return nil
}

type StandardField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageRef uint32                 `protobuf:"varint,1,opt,name=page_ref,json=pageRef,proto3" json:"page_ref,omitempty"`
	Value   string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type    StandardFieldAnnotator `protobuf:"varint,3,opt,name=type,proto3,enum=ssn.type.StandardFieldAnnotator" json:"type,omitempty"`
}

func (x *StandardField) Reset() {
	*x = StandardField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_type_document_annotation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardField) ProtoMessage() {}

func (x *StandardField) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_type_document_annotation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardField.ProtoReflect.Descriptor instead.
func (*StandardField) Descriptor() ([]byte, []int) {
	return file_ssn_type_document_annotation_proto_rawDescGZIP(), []int{1}
}

func (x *StandardField) GetPageRef() uint32 {
	if x != nil {
		return x.PageRef
	}
	return 0
}

func (x *StandardField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *StandardField) GetType() StandardFieldAnnotator {
	if x != nil {
		return x.Type
	}
	return StandardField_UNKNOWN
}

var File_ssn_type_document_annotation_proto protoreflect.FileDescriptor

var file_ssn_type_document_annotation_proto_rawDesc = []byte{
	0x0a, 0x22, 0x73, 0x73, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa5,
	0x15, 0x0a, 0x12, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a,
	0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x33, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x45, 0x78, 0x63, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x4b, 0x0a, 0x15, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x4a, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x12, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x75, 0x72,
	0x12, 0x40, 0x0a, 0x10, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x0d, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4b, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64,
	0x6b, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x12, 0x6f, 0x63, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x44, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x4d, 0x0a, 0x17, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x13, 0x6f, 0x63, 0x72, 0x4c, 0x69,
	0x6e, 0x65, 0x44, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x4b,
	0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65,
	0x53, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x20, 0x6f,
	0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x67,
	0x69, 0x72, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x1b,
	0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x67, 0x69, 0x72,
	0x6f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x20, 0x6f,
	0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x67,
	0x69, 0x72, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x1b,
	0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x67, 0x69, 0x72,
	0x6f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x16, 0x6f,
	0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x12,
	0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x4b, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62,
	0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x12, 0x6f, 0x63, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x42, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x12, 0x47, 0x0a, 0x13,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x18, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x16, 0x62, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x03, 0x62, 0x69, 0x63, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x03,
	0x62, 0x69, 0x63, 0x12, 0x40, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a,
	0x13, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x56, 0x61, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x1a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x76, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x56, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x33, 0x0a, 0x09, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x43,
	0x52, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x55, 0x4c, 0x45, 0x10, 0x03, 0x42, 0xa3, 0x01, 0x0a, 0x11, 0x61, 0x69, 0x2e, 0x76, 0x69, 0x73,
	0x6d, 0x61, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x42, 0x17, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x2f, 0x76, 0x6d, 0x6c,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x73, 0x6e, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x3b, 0x73, 0x73, 0x6e, 0x74, 0x79, 0x70, 0x65, 0xa2, 0x02, 0x03, 0x53,
	0x54, 0x58, 0xaa, 0x02, 0x08, 0x53, 0x73, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0xca, 0x02, 0x08,
	0x53, 0x73, 0x6e, 0x5c, 0x54, 0x79, 0x70, 0x65, 0xe2, 0x02, 0x14, 0x53, 0x73, 0x6e, 0x5c, 0x54,
	0x79, 0x70, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x09, 0x53, 0x73, 0x6e, 0x3a, 0x3a, 0x54, 0x79, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ssn_type_document_annotation_proto_rawDescOnce sync.Once
	file_ssn_type_document_annotation_proto_rawDescData = file_ssn_type_document_annotation_proto_rawDesc
)

func file_ssn_type_document_annotation_proto_rawDescGZIP() []byte {
	file_ssn_type_document_annotation_proto_rawDescOnce.Do(func() {
		file_ssn_type_document_annotation_proto_rawDescData = protoimpl.X.CompressGZIP(file_ssn_type_document_annotation_proto_rawDescData)
	})
	return file_ssn_type_document_annotation_proto_rawDescData
}

var file_ssn_type_document_annotation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ssn_type_document_annotation_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ssn_type_document_annotation_proto_goTypes = []interface{}{
	(StandardFieldAnnotator)(0), // 0: ssn.type.StandardField.annotator
	(*DocumentAnnotation)(nil),  // 1: ssn.type.DocumentAnnotation
	(*StandardField)(nil),       // 2: ssn.type.StandardField
}
var file_ssn_type_document_annotation_proto_depIdxs = []int32{
	2,  // 0: ssn.type.DocumentAnnotation.order_date:type_name -> ssn.type.StandardField
	2,  // 1: ssn.type.DocumentAnnotation.payment_due_date:type_name -> ssn.type.StandardField
	2,  // 2: ssn.type.DocumentAnnotation.currency:type_name -> ssn.type.StandardField
	2,  // 3: ssn.type.DocumentAnnotation.total_vat:type_name -> ssn.type.StandardField
	2,  // 4: ssn.type.DocumentAnnotation.total_incl_vat:type_name -> ssn.type.StandardField
	2,  // 5: ssn.type.DocumentAnnotation.total_excl_vat:type_name -> ssn.type.StandardField
	2,  // 6: ssn.type.DocumentAnnotation.supplier_country_code:type_name -> ssn.type.StandardField
	2,  // 7: ssn.type.DocumentAnnotation.document_type:type_name -> ssn.type.StandardField
	2,  // 8: ssn.type.DocumentAnnotation.payment_method:type_name -> ssn.type.StandardField
	2,  // 9: ssn.type.DocumentAnnotation.credit_card_last_four:type_name -> ssn.type.StandardField
	2,  // 10: ssn.type.DocumentAnnotation.ocr_line_dk_type:type_name -> ssn.type.StandardField
	2,  // 11: ssn.type.DocumentAnnotation.ocr_line_dk_payment_id:type_name -> ssn.type.StandardField
	2,  // 12: ssn.type.DocumentAnnotation.ocr_line_dk_creditor_id:type_name -> ssn.type.StandardField
	2,  // 13: ssn.type.DocumentAnnotation.ocr_line_se_payment_id:type_name -> ssn.type.StandardField
	2,  // 14: ssn.type.DocumentAnnotation.ocr_line_se_bankgiro_creditor_id:type_name -> ssn.type.StandardField
	2,  // 15: ssn.type.DocumentAnnotation.ocr_line_se_plusgiro_creditor_id:type_name -> ssn.type.StandardField
	2,  // 16: ssn.type.DocumentAnnotation.ocr_line_no_payment_id:type_name -> ssn.type.StandardField
	2,  // 17: ssn.type.DocumentAnnotation.ocr_line_fi_payment_id:type_name -> ssn.type.StandardField
	2,  // 18: ssn.type.DocumentAnnotation.ocr_line_nl_payment_id:type_name -> ssn.type.StandardField
	2,  // 19: ssn.type.DocumentAnnotation.ocr_line_be_payment_id:type_name -> ssn.type.StandardField
	2,  // 20: ssn.type.DocumentAnnotation.iban:type_name -> ssn.type.StandardField
	2,  // 21: ssn.type.DocumentAnnotation.bank_account_number:type_name -> ssn.type.StandardField
	2,  // 22: ssn.type.DocumentAnnotation.bank_registration_number:type_name -> ssn.type.StandardField
	2,  // 23: ssn.type.DocumentAnnotation.bic:type_name -> ssn.type.StandardField
	2,  // 24: ssn.type.DocumentAnnotation.document_number:type_name -> ssn.type.StandardField
	2,  // 25: ssn.type.DocumentAnnotation.document_date:type_name -> ssn.type.StandardField
	2,  // 26: ssn.type.DocumentAnnotation.order_number:type_name -> ssn.type.StandardField
	2,  // 27: ssn.type.DocumentAnnotation.supplier_name:type_name -> ssn.type.StandardField
	2,  // 28: ssn.type.DocumentAnnotation.supplier_vat_number:type_name -> ssn.type.StandardField
	2,  // 29: ssn.type.DocumentAnnotation.supplier_organisation_number:type_name -> ssn.type.StandardField
	2,  // 30: ssn.type.DocumentAnnotation.supplier_address:type_name -> ssn.type.StandardField
	2,  // 31: ssn.type.DocumentAnnotation.customer_number:type_name -> ssn.type.StandardField
	2,  // 32: ssn.type.DocumentAnnotation.receiver_order_number:type_name -> ssn.type.StandardField
	2,  // 33: ssn.type.DocumentAnnotation.receiver_address:type_name -> ssn.type.StandardField
	2,  // 34: ssn.type.DocumentAnnotation.receiver_country_code:type_name -> ssn.type.StandardField
	2,  // 35: ssn.type.DocumentAnnotation.receiver_name:type_name -> ssn.type.StandardField
	2,  // 36: ssn.type.DocumentAnnotation.receiver_vat_number:type_name -> ssn.type.StandardField
	2,  // 37: ssn.type.DocumentAnnotation.page_texts:type_name -> ssn.type.StandardField
	2,  // 38: ssn.type.DocumentAnnotation.order_reference:type_name -> ssn.type.StandardField
	0,  // 39: ssn.type.StandardField.type:type_name -> ssn.type.StandardField.annotator
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_ssn_type_document_annotation_proto_init() }
func file_ssn_type_document_annotation_proto_init() {
	if File_ssn_type_document_annotation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ssn_type_document_annotation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_type_document_annotation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandardField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ssn_type_document_annotation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ssn_type_document_annotation_proto_goTypes,
		DependencyIndexes: file_ssn_type_document_annotation_proto_depIdxs,
		EnumInfos:         file_ssn_type_document_annotation_proto_enumTypes,
		MessageInfos:      file_ssn_type_document_annotation_proto_msgTypes,
	}.Build()
	File_ssn_type_document_annotation_proto = out.File
	file_ssn_type_document_annotation_proto_rawDesc = nil
	file_ssn_type_document_annotation_proto_goTypes = nil
	file_ssn_type_document_annotation_proto_depIdxs = nil
}
