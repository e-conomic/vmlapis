// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ssn/type/text_annotation.proto

package ssntype

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _text_annotation_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on TextAnnotation with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TextAnnotation) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TextAnnotationValidationError{
					field:  fmt.Sprintf("Pages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Text

	return nil
}

// TextAnnotationValidationError is the validation error returned by
// TextAnnotation.Validate if the designated constraints aren't met.
type TextAnnotationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextAnnotationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextAnnotationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextAnnotationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextAnnotationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextAnnotationValidationError) ErrorName() string { return "TextAnnotationValidationError" }

// Error satisfies the builtin error interface
func (e TextAnnotationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTextAnnotation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextAnnotationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextAnnotationValidationError{}

// Validate checks the field values on Page with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Page) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProperty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PageValidationError{
				field:  "Property",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Width

	// no validation rules for Height

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Confidence

	return nil
}

// PageValidationError is the validation error returned by Page.Validate if the
// designated constraints aren't met.
type PageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageValidationError) ErrorName() string { return "PageValidationError" }

// Error satisfies the builtin error interface
func (e PageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageValidationError{}

// Validate checks the field values on Block with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Block) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProperty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlockValidationError{
				field:  "Property",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBoundingBox()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlockValidationError{
				field:  "BoundingBox",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetParagraphs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BlockValidationError{
					field:  fmt.Sprintf("Paragraphs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for BlockType

	// no validation rules for Confidence

	return nil
}

// BlockValidationError is the validation error returned by Block.Validate if
// the designated constraints aren't met.
type BlockValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockValidationError) ErrorName() string { return "BlockValidationError" }

// Error satisfies the builtin error interface
func (e BlockValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlock.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockValidationError{}

// Validate checks the field values on Paragraph with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Paragraph) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProperty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParagraphValidationError{
				field:  "Property",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBoundingBox()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParagraphValidationError{
				field:  "BoundingBox",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetWords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParagraphValidationError{
					field:  fmt.Sprintf("Words[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Confidence

	return nil
}

// ParagraphValidationError is the validation error returned by
// Paragraph.Validate if the designated constraints aren't met.
type ParagraphValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParagraphValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParagraphValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParagraphValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParagraphValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParagraphValidationError) ErrorName() string { return "ParagraphValidationError" }

// Error satisfies the builtin error interface
func (e ParagraphValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParagraph.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParagraphValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParagraphValidationError{}

// Validate checks the field values on Word with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Word) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProperty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WordValidationError{
				field:  "Property",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBoundingBox()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WordValidationError{
				field:  "BoundingBox",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSymbols() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WordValidationError{
					field:  fmt.Sprintf("Symbols[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Confidence

	return nil
}

// WordValidationError is the validation error returned by Word.Validate if the
// designated constraints aren't met.
type WordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordValidationError) ErrorName() string { return "WordValidationError" }

// Error satisfies the builtin error interface
func (e WordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordValidationError{}

// Validate checks the field values on Symbol with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Symbol) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProperty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SymbolValidationError{
				field:  "Property",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBoundingBox()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SymbolValidationError{
				field:  "BoundingBox",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Text

	// no validation rules for Confidence

	return nil
}

// SymbolValidationError is the validation error returned by Symbol.Validate if
// the designated constraints aren't met.
type SymbolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SymbolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SymbolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SymbolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SymbolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SymbolValidationError) ErrorName() string { return "SymbolValidationError" }

// Error satisfies the builtin error interface
func (e SymbolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSymbol.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SymbolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SymbolValidationError{}

// Validate checks the field values on TextAnnotation_DetectedLanguage with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TextAnnotation_DetectedLanguage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for LanguageCode

	// no validation rules for Confidence

	return nil
}

// TextAnnotation_DetectedLanguageValidationError is the validation error
// returned by TextAnnotation_DetectedLanguage.Validate if the designated
// constraints aren't met.
type TextAnnotation_DetectedLanguageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextAnnotation_DetectedLanguageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextAnnotation_DetectedLanguageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextAnnotation_DetectedLanguageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextAnnotation_DetectedLanguageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextAnnotation_DetectedLanguageValidationError) ErrorName() string {
	return "TextAnnotation_DetectedLanguageValidationError"
}

// Error satisfies the builtin error interface
func (e TextAnnotation_DetectedLanguageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTextAnnotation_DetectedLanguage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextAnnotation_DetectedLanguageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextAnnotation_DetectedLanguageValidationError{}

// Validate checks the field values on TextAnnotation_DetectedBreak with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TextAnnotation_DetectedBreak) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for IsPrefix

	return nil
}

// TextAnnotation_DetectedBreakValidationError is the validation error returned
// by TextAnnotation_DetectedBreak.Validate if the designated constraints
// aren't met.
type TextAnnotation_DetectedBreakValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextAnnotation_DetectedBreakValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextAnnotation_DetectedBreakValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextAnnotation_DetectedBreakValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextAnnotation_DetectedBreakValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextAnnotation_DetectedBreakValidationError) ErrorName() string {
	return "TextAnnotation_DetectedBreakValidationError"
}

// Error satisfies the builtin error interface
func (e TextAnnotation_DetectedBreakValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTextAnnotation_DetectedBreak.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextAnnotation_DetectedBreakValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextAnnotation_DetectedBreakValidationError{}

// Validate checks the field values on TextAnnotation_TextProperty with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TextAnnotation_TextProperty) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetDetectedLanguages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TextAnnotation_TextPropertyValidationError{
					field:  fmt.Sprintf("DetectedLanguages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetDetectedBreak()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TextAnnotation_TextPropertyValidationError{
				field:  "DetectedBreak",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TextAnnotation_TextPropertyValidationError is the validation error returned
// by TextAnnotation_TextProperty.Validate if the designated constraints
// aren't met.
type TextAnnotation_TextPropertyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextAnnotation_TextPropertyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextAnnotation_TextPropertyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextAnnotation_TextPropertyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextAnnotation_TextPropertyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextAnnotation_TextPropertyValidationError) ErrorName() string {
	return "TextAnnotation_TextPropertyValidationError"
}

// Error satisfies the builtin error interface
func (e TextAnnotation_TextPropertyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTextAnnotation_TextProperty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextAnnotation_TextPropertyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextAnnotation_TextPropertyValidationError{}
