// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: ssn/annotator/v1/annotator.proto

package annotator

import (
	_type "github.com/e-conomic/vmlapis/gen/go/ssn/type"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Feature_Type int32

const (
	// Run default feature set
	Feature_DEFAULT Feature_Type = 0
	// Return text annotation
	Feature_TEXT_ANNOTATION Feature_Type = 1
	// Run order date detection
	Feature_ORDER_DATE Feature_Type = 2
	// Run due date detection
	Feature_PAYMENT_DUE_DATE Feature_Type = 3
	// Run currency detection
	Feature_CURRENCY Feature_Type = 4
	// Run total vat detection
	Feature_TOTAL_VAT Feature_Type = 5
	// Run total incl vat detection
	Feature_TOTAL_INCL_VAT Feature_Type = 6
	// Run total excl vat detection
	Feature_TOTAL_EXCL_VAT Feature_Type = 7
	// Run supplier corporate id detection
	Feature_SUPPLIER_CORPORATE_ID Feature_Type = 8
	// Run country code detection
	Feature_SUPPLIER_COUNTRY_CODE Feature_Type = 9
	// Run document type detection
	Feature_DOCUMENT_TYPE Feature_Type = 10
	// Run pyment method detection
	Feature_PAYMENT_METHOD Feature_Type = 11
	// Run credit card number detection
	Feature_CREDIT_CARD_LAST_FOUR Feature_Type = 12
	// Run invoice number detection
	Feature_INVOICE_NUMBER Feature_Type = 13
	// Run danish ocr line detection, for the type
	Feature_OCR_LINE_DK_TYPE Feature_Type = 14
	// Run danish ocr line detection, for the payment id
	Feature_OCR_LINE_DK_PAYMENT_ID Feature_Type = 15
	// Run danish ocr line detection, for the creditor id
	Feature_OCR_LINE_DK_CREDITOR_ID Feature_Type = 16
	// Run swedish ocr line detection for the payment id
	Feature_OCR_LINE_SE_PAYMENT_ID Feature_Type = 17
	// Run swedish ocr line detection for the bankgiro creditor id
	Feature_OCR_LINE_SE_BANKGIRO_CREDITOR_ID Feature_Type = 18
	// Run swedish ocr line detection for the plusgiro creditor id
	Feature_OCR_LINE_SE_PLUSGIRO_CREDITOR_ID Feature_Type = 19
	// Run norwegian ocr line detection or the payment id
	Feature_OCR_LINE_NO_PAYMENT_ID Feature_Type = 20
	// Run finish ocr line detection or the payment id
	Feature_OCR_LINE_FI_PAYMENT_ID Feature_Type = 21
	// Run dutch ocr line detection for the payment id
	Feature_OCR_LINE_NL_PAYMENT_ID Feature_Type = 22
	// Return document text
	Feature_TEXT Feature_Type = 23
	// Run IBAN detection
	Feature_IBAN Feature_Type = 24
	// Run LINES detection
	Feature_LINES Feature_Type = 25
	// Run first page of PDF to PNG conversion
	Feature_PREVIEW Feature_Type = 26
)

// Enum value maps for Feature_Type.
var (
	Feature_Type_name = map[int32]string{
		0:  "DEFAULT",
		1:  "TEXT_ANNOTATION",
		2:  "ORDER_DATE",
		3:  "PAYMENT_DUE_DATE",
		4:  "CURRENCY",
		5:  "TOTAL_VAT",
		6:  "TOTAL_INCL_VAT",
		7:  "TOTAL_EXCL_VAT",
		8:  "SUPPLIER_CORPORATE_ID",
		9:  "SUPPLIER_COUNTRY_CODE",
		10: "DOCUMENT_TYPE",
		11: "PAYMENT_METHOD",
		12: "CREDIT_CARD_LAST_FOUR",
		13: "INVOICE_NUMBER",
		14: "OCR_LINE_DK_TYPE",
		15: "OCR_LINE_DK_PAYMENT_ID",
		16: "OCR_LINE_DK_CREDITOR_ID",
		17: "OCR_LINE_SE_PAYMENT_ID",
		18: "OCR_LINE_SE_BANKGIRO_CREDITOR_ID",
		19: "OCR_LINE_SE_PLUSGIRO_CREDITOR_ID",
		20: "OCR_LINE_NO_PAYMENT_ID",
		21: "OCR_LINE_FI_PAYMENT_ID",
		22: "OCR_LINE_NL_PAYMENT_ID",
		23: "TEXT",
		24: "IBAN",
		25: "LINES",
		26: "PREVIEW",
	}
	Feature_Type_value = map[string]int32{
		"DEFAULT":                          0,
		"TEXT_ANNOTATION":                  1,
		"ORDER_DATE":                       2,
		"PAYMENT_DUE_DATE":                 3,
		"CURRENCY":                         4,
		"TOTAL_VAT":                        5,
		"TOTAL_INCL_VAT":                   6,
		"TOTAL_EXCL_VAT":                   7,
		"SUPPLIER_CORPORATE_ID":            8,
		"SUPPLIER_COUNTRY_CODE":            9,
		"DOCUMENT_TYPE":                    10,
		"PAYMENT_METHOD":                   11,
		"CREDIT_CARD_LAST_FOUR":            12,
		"INVOICE_NUMBER":                   13,
		"OCR_LINE_DK_TYPE":                 14,
		"OCR_LINE_DK_PAYMENT_ID":           15,
		"OCR_LINE_DK_CREDITOR_ID":          16,
		"OCR_LINE_SE_PAYMENT_ID":           17,
		"OCR_LINE_SE_BANKGIRO_CREDITOR_ID": 18,
		"OCR_LINE_SE_PLUSGIRO_CREDITOR_ID": 19,
		"OCR_LINE_NO_PAYMENT_ID":           20,
		"OCR_LINE_FI_PAYMENT_ID":           21,
		"OCR_LINE_NL_PAYMENT_ID":           22,
		"TEXT":                             23,
		"IBAN":                             24,
		"LINES":                            25,
		"PREVIEW":                          26,
	}
)

func (x Feature_Type) Enum() *Feature_Type {
	p := new(Feature_Type)
	*p = x
	return p
}

func (x Feature_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Feature_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ssn_annotator_v1_annotator_proto_enumTypes[0].Descriptor()
}

func (Feature_Type) Type() protoreflect.EnumType {
	return &file_ssn_annotator_v1_annotator_proto_enumTypes[0]
}

func (x Feature_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Feature_Type.Descriptor instead.
func (Feature_Type) EnumDescriptor() ([]byte, []int) {
	return file_ssn_annotator_v1_annotator_proto_rawDescGZIP(), []int{0, 0}
}

type Feature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The feature type.
	Type Feature_Type `protobuf:"varint,1,opt,name=type,proto3,enum=ssn.annotator.v1.Feature_Type" json:"type,omitempty"`
	// Maximum number of results of this type. Does not apply to
	// `TEXT_ANNOTATION` or `DOCUMENT_TYPE`.
	MaxResults int32 `protobuf:"varint,2,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
	// The minimum confidence for predictions that the caller wants returned
	MinConfidence _type.Confidence_Level `protobuf:"varint,3,opt,name=min_confidence,json=minConfidence,proto3,enum=ssn.type.Confidence_Level" json:"min_confidence,omitempty"`
}

func (x *Feature) Reset() {
	*x = Feature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_annotator_v1_annotator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_annotator_v1_annotator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_ssn_annotator_v1_annotator_proto_rawDescGZIP(), []int{0}
}

func (x *Feature) GetType() Feature_Type {
	if x != nil {
		return x.Type
	}
	return Feature_DEFAULT
}

func (x *Feature) GetMaxResults() int32 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

func (x *Feature) GetMinConfidence() _type.Confidence_Level {
	if x != nil {
		return x.MinConfidence
	}
	return _type.Confidence_UNKNOWN
}

type DocumentAnnotatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Document *Document  `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	Features []*Feature `protobuf:"bytes,2,rep,name=features,proto3" json:"features,omitempty"`
	Tags     []string   `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Tier     _type.Tier `protobuf:"varint,4,opt,name=tier,proto3,enum=ssn.type.Tier" json:"tier,omitempty"`
}

func (x *DocumentAnnotatorRequest) Reset() {
	*x = DocumentAnnotatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_annotator_v1_annotator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentAnnotatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentAnnotatorRequest) ProtoMessage() {}

func (x *DocumentAnnotatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_annotator_v1_annotator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentAnnotatorRequest.ProtoReflect.Descriptor instead.
func (*DocumentAnnotatorRequest) Descriptor() ([]byte, []int) {
	return file_ssn_annotator_v1_annotator_proto_rawDescGZIP(), []int{1}
}

func (x *DocumentAnnotatorRequest) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *DocumentAnnotatorRequest) GetFeatures() []*Feature {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *DocumentAnnotatorRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DocumentAnnotatorRequest) GetTier() _type.Tier {
	if x != nil {
		return x.Tier
	}
	return _type.Tier_DEFAULT
}

type DocumentAnnotatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// orderDate
	// ISO 8601 date string, ie. a string of the format "YYYY-MM-DD"
	// Example: "2019-12-31"
	OrderDate []*_type.Candidate `protobuf:"bytes,1,rep,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	// paymentDueDate
	// ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
	// Example: "2019-12-31"
	PaymentDueDate []*_type.Candidate `protobuf:"bytes,2,rep,name=payment_due_date,json=paymentDueDate,proto3" json:"payment_due_date,omitempty"`
	// currency
	// ISO 4217 string, ie. a 3-letter capitalized string
	// Example: "NOK"
	Currency []*_type.Candidate `protobuf:"bytes,3,rep,name=currency,proto3" json:"currency,omitempty"`
	// totalVat
	// A string that parses as a two-decimal number
	// Example: "10.0" or "11.11"
	TotalVat []*_type.Candidate `protobuf:"bytes,4,rep,name=total_vat,json=totalVat,proto3" json:"total_vat,omitempty"`
	// totalInclVat
	// A string that parses as a two-decimal number
	// Example: "10.0" or "11.11"
	TotalInclVat []*_type.Candidate `protobuf:"bytes,5,rep,name=total_incl_vat,json=totalInclVat,proto3" json:"total_incl_vat,omitempty"`
	// totalExclVat
	// A string that parses as a two-decimal number
	// Example: "10.0" or "11.11"
	TotalExclVat []*_type.Candidate `protobuf:"bytes,6,rep,name=total_excl_vat,json=totalExclVat,proto3" json:"total_excl_vat,omitempty"`
	// supplierCorporateId
	// The company VAT number
	// Example: "123456789B01" (for Dutch companies)
	// or "12345678" (for Norwegian companies)
	// Note: The field is repeated because multiple VAT numbers might exist.
	// If you have the VAT number of you customer, you can use this information
	// to find out which VAT number belongs to the supplier of the invoice.
	SupplierCorporateId []*_type.Candidate `protobuf:"bytes,7,rep,name=supplier_corporate_id,json=supplierCorporateId,proto3" json:"supplier_corporate_id,omitempty"`
	// supplierCountryCode
	// ISO 3166-1 alpha-2 string, ei. a two-letter capitalized string
	// Example: "NO"
	SupplierCountryCode []*_type.Candidate `protobuf:"bytes,8,rep,name=supplier_country_code,json=supplierCountryCode,proto3" json:"supplier_country_code,omitempty"`
	// documentType
	// Either "Receipt" or "Invoice"
	DocumentType []*_type.Candidate `protobuf:"bytes,9,rep,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	// paymentMethod
	// Either "Cash" or "CreditCard"
	PaymentMethod []*_type.Candidate `protobuf:"bytes,10,rep,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	// creditCardNumber
	// Four digits
	// Example: "0012"
	CreditCardLastFour []*_type.Candidate `protobuf:"bytes,11,rep,name=credit_card_last_four,json=creditCardLastFour,proto3" json:"credit_card_last_four,omitempty"`
	// invoiceNumber
	// The supplier defined identifier af the invoice
	// Example: "12345-A99"
	InvoiceNumber []*_type.Candidate `protobuf:"bytes,12,rep,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	// Return text annotation
	TextAnnotation *_type.TextAnnotation `protobuf:"bytes,13,opt,name=text_annotation,json=textAnnotation,proto3" json:"text_annotation,omitempty"`
	// example: "71"
	OcrLineDkType []*_type.Candidate `protobuf:"bytes,14,rep,name=ocr_line_dk_type,json=ocrLineDkType,proto3" json:"ocr_line_dk_type,omitempty"`
	// example: "000002879094031"
	OcrLineDkPaymentId []*_type.Candidate `protobuf:"bytes,15,rep,name=ocr_line_dk_payment_id,json=ocrLineDkPaymentId,proto3" json:"ocr_line_dk_payment_id,omitempty"`
	//example: "86570807"
	OcrLineDkCreditorId []*_type.Candidate `protobuf:"bytes,16,rep,name=ocr_line_dk_creditor_id,json=ocrLineDkCreditorId,proto3" json:"ocr_line_dk_creditor_id,omitempty"`
	// example: "050765098"
	OcrLineSePaymentId []*_type.Candidate `protobuf:"bytes,17,rep,name=ocr_line_se_payment_id,json=ocrLineSePaymentId,proto3" json:"ocr_line_se_payment_id,omitempty"`
	// example: "2654507"
	OcrLineSeBankgiroCreditorId []*_type.Candidate `protobuf:"bytes,18,rep,name=ocr_line_se_bankgiro_creditor_id,json=ocrLineSeBankgiroCreditorId,proto3" json:"ocr_line_se_bankgiro_creditor_id,omitempty"`
	// example: "5000872"
	OcrLineSePlusgiroCreditorId []*_type.Candidate `protobuf:"bytes,19,rep,name=ocr_line_se_plusgiro_creditor_id,json=ocrLineSePlusgiroCreditorId,proto3" json:"ocr_line_se_plusgiro_creditor_id,omitempty"`
	// example: "12345678903"
	OcrLineNoPaymentId []*_type.Candidate `protobuf:"bytes,20,rep,name=ocr_line_no_payment_id,json=ocrLineNoPaymentId,proto3" json:"ocr_line_no_payment_id,omitempty"`
	// example: "0817937867870002"
	OcrLineFiPaymentId []*_type.Candidate `protobuf:"bytes,21,rep,name=ocr_line_fi_payment_id,json=ocrLineFiPaymentId,proto3" json:"ocr_line_fi_payment_id,omitempty"`
	// example: "00000159220010146012"
	OcrLineNlPaymentId []*_type.Candidate `protobuf:"bytes,22,rep,name=ocr_line_nl_payment_id,json=ocrLineNlPaymentId,proto3" json:"ocr_line_nl_payment_id,omitempty"`
	// Return a string containing the text from the document
	Text       string `protobuf:"bytes,23,opt,name=text,proto3" json:"text,omitempty"`
	FeedbackId string `protobuf:"bytes,24,opt,name=feedback_id,json=feedbackId,proto3" json:"feedback_id,omitempty"`
	// The first two letters are a country code. The next two digits are
	// check digits for the ISO 7064 Mod 97, 10 checksum
	// example: "DK50 0040 0440 1162 43", "NO8330001234567"
	Iban []*_type.Candidate `protobuf:"bytes,25,rep,name=iban,proto3" json:"iban,omitempty"`
	// Invoice lines represented in a form of text, amount and page reference
	// to state on which page the line was found
	Lines []*_type.LineCandidate `protobuf:"bytes,26,rep,name=lines,proto3" json:"lines,omitempty"`
	// Base64 encoded PNG image  of the first page of PDF document sent in request
	Preview string `protobuf:"bytes,27,opt,name=preview,proto3" json:"preview,omitempty"`
}

func (x *DocumentAnnotatorResponse) Reset() {
	*x = DocumentAnnotatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_annotator_v1_annotator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentAnnotatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentAnnotatorResponse) ProtoMessage() {}

func (x *DocumentAnnotatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_annotator_v1_annotator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentAnnotatorResponse.ProtoReflect.Descriptor instead.
func (*DocumentAnnotatorResponse) Descriptor() ([]byte, []int) {
	return file_ssn_annotator_v1_annotator_proto_rawDescGZIP(), []int{2}
}

func (x *DocumentAnnotatorResponse) GetOrderDate() []*_type.Candidate {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetPaymentDueDate() []*_type.Candidate {
	if x != nil {
		return x.PaymentDueDate
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetCurrency() []*_type.Candidate {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetTotalVat() []*_type.Candidate {
	if x != nil {
		return x.TotalVat
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetTotalInclVat() []*_type.Candidate {
	if x != nil {
		return x.TotalInclVat
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetTotalExclVat() []*_type.Candidate {
	if x != nil {
		return x.TotalExclVat
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetSupplierCorporateId() []*_type.Candidate {
	if x != nil {
		return x.SupplierCorporateId
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetSupplierCountryCode() []*_type.Candidate {
	if x != nil {
		return x.SupplierCountryCode
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetDocumentType() []*_type.Candidate {
	if x != nil {
		return x.DocumentType
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetPaymentMethod() []*_type.Candidate {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetCreditCardLastFour() []*_type.Candidate {
	if x != nil {
		return x.CreditCardLastFour
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetInvoiceNumber() []*_type.Candidate {
	if x != nil {
		return x.InvoiceNumber
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetTextAnnotation() *_type.TextAnnotation {
	if x != nil {
		return x.TextAnnotation
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetOcrLineDkType() []*_type.Candidate {
	if x != nil {
		return x.OcrLineDkType
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetOcrLineDkPaymentId() []*_type.Candidate {
	if x != nil {
		return x.OcrLineDkPaymentId
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetOcrLineDkCreditorId() []*_type.Candidate {
	if x != nil {
		return x.OcrLineDkCreditorId
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetOcrLineSePaymentId() []*_type.Candidate {
	if x != nil {
		return x.OcrLineSePaymentId
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetOcrLineSeBankgiroCreditorId() []*_type.Candidate {
	if x != nil {
		return x.OcrLineSeBankgiroCreditorId
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetOcrLineSePlusgiroCreditorId() []*_type.Candidate {
	if x != nil {
		return x.OcrLineSePlusgiroCreditorId
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetOcrLineNoPaymentId() []*_type.Candidate {
	if x != nil {
		return x.OcrLineNoPaymentId
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetOcrLineFiPaymentId() []*_type.Candidate {
	if x != nil {
		return x.OcrLineFiPaymentId
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetOcrLineNlPaymentId() []*_type.Candidate {
	if x != nil {
		return x.OcrLineNlPaymentId
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *DocumentAnnotatorResponse) GetFeedbackId() string {
	if x != nil {
		return x.FeedbackId
	}
	return ""
}

func (x *DocumentAnnotatorResponse) GetIban() []*_type.Candidate {
	if x != nil {
		return x.Iban
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetLines() []*_type.LineCandidate {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *DocumentAnnotatorResponse) GetPreview() string {
	if x != nil {
		return x.Preview
	}
	return ""
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Document content, represented as a stream of bytes.
	// Note: As with all `bytes` fields, protobuffers use a pure binary
	// representation, whereas JSON representations use base64.
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Google Cloud Storage image location, or publicly-accessible image
	// URL. If both `content` and `source` are provided for a document, `content`
	// takes precedence and is used to perform the scan request.
	Source *DocumentSource `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_annotator_v1_annotator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_annotator_v1_annotator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_ssn_annotator_v1_annotator_proto_rawDescGZIP(), []int{3}
}

func (x *Document) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Document) GetSource() *DocumentSource {
	if x != nil {
		return x.Source
	}
	return nil
}

type DocumentSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URI of the source document. Can be either:
	//
	// 1. A publicly-accessible image HTTP/HTTPS URL. When fetching images from
	//    HTTP/HTTPS URLs, We cannot guarantee that the request will be
	//    completed. Your request may fail if the specified host denies the
	//    request (e.g. due to request throttling or DOS prevention).
	//
	HttpUri string `protobuf:"bytes,1,opt,name=http_uri,json=httpUri,proto3" json:"http_uri,omitempty"`
}

func (x *DocumentSource) Reset() {
	*x = DocumentSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_annotator_v1_annotator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSource) ProtoMessage() {}

func (x *DocumentSource) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_annotator_v1_annotator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSource.ProtoReflect.Descriptor instead.
func (*DocumentSource) Descriptor() ([]byte, []int) {
	return file_ssn_annotator_v1_annotator_proto_rawDescGZIP(), []int{4}
}

func (x *DocumentSource) GetHttpUri() string {
	if x != nil {
		return x.HttpUri
	}
	return ""
}

var File_ssn_annotator_v1_annotator_proto protoreflect.FileDescriptor

var file_ssn_annotator_v1_annotator_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x73, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x73, 0x73, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x73, 0x73, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x73,
	0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x73,
	0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xfa, 0x05, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x73,
	0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x73, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xd6, 0x04, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x55, 0x45, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x56, 0x41,
	0x54, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x43,
	0x4c, 0x5f, 0x56, 0x41, 0x54, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x4f, 0x54, 0x41, 0x4c,
	0x5f, 0x45, 0x58, 0x43, 0x4c, 0x5f, 0x56, 0x41, 0x54, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x44, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0x09, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x52, 0x45, 0x44,
	0x49, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x52, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x43, 0x52, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x44, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0e, 0x12, 0x1a, 0x0a,
	0x16, 0x4f, 0x43, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x4b, 0x5f, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x43, 0x52,
	0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x4b, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x4f,
	0x52, 0x5f, 0x49, 0x44, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x43, 0x52, 0x5f, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x53, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44,
	0x10, 0x11, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x43, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53,
	0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x47, 0x49, 0x52, 0x4f, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49,
	0x54, 0x4f, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x12, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x43, 0x52, 0x5f,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x45, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x47, 0x49, 0x52, 0x4f,
	0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x13, 0x12, 0x1a,
	0x0a, 0x16, 0x4f, 0x43, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x43,
	0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x46, 0x49, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x44, 0x10, 0x15, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x43, 0x52, 0x5f, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x4e, 0x4c, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44,
	0x10, 0x16, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x17, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x42, 0x41, 0x4e, 0x10, 0x18, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x10,
	0x19, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x1a, 0x22, 0xc1,
	0x01, 0x0a, 0x18, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x73, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x22,
	0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73,
	0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x04, 0x74, 0x69,
	0x65, 0x72, 0x22, 0x8b, 0x0d, 0x0a, 0x19, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6c, 0x56, 0x61,
	0x74, 0x12, 0x39, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f,
	0x76, 0x61, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x47, 0x0a, 0x15,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38,
	0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x46, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x12, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x75, 0x72, 0x12, 0x3a, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x74, 0x65, 0x78,
	0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x10, 0x6f,
	0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6f, 0x63, 0x72, 0x4c,
	0x69, 0x6e, 0x65, 0x44, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x16, 0x6f, 0x63, 0x72,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x12,
	0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x49, 0x0a, 0x17, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64,
	0x6b, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x13, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e,
	0x65, 0x44, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x47, 0x0a,
	0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x20, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x67, 0x69, 0x72, 0x6f, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x1b, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65,
	0x42, 0x61, 0x6e, 0x6b, 0x67, 0x69, 0x72, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x5a, 0x0a, 0x20, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x67, 0x69, 0x72, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x1b, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x50, 0x6c, 0x75, 0x73,
	0x67, 0x69, 0x72, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x47,
	0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x12, 0x6f, 0x63,
	0x72, 0x4c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x47, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x6c, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6c,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x22, 0x5e, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x2b, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x74, 0x74, 0x70, 0x55, 0x72, 0x69, 0x32, 0xa3, 0x01,
	0x0a, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x8d, 0x01, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x3a, 0x01, 0x2a, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x2f, 0x76, 0x6d, 0x6c, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x73, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ssn_annotator_v1_annotator_proto_rawDescOnce sync.Once
	file_ssn_annotator_v1_annotator_proto_rawDescData = file_ssn_annotator_v1_annotator_proto_rawDesc
)

func file_ssn_annotator_v1_annotator_proto_rawDescGZIP() []byte {
	file_ssn_annotator_v1_annotator_proto_rawDescOnce.Do(func() {
		file_ssn_annotator_v1_annotator_proto_rawDescData = protoimpl.X.CompressGZIP(file_ssn_annotator_v1_annotator_proto_rawDescData)
	})
	return file_ssn_annotator_v1_annotator_proto_rawDescData
}

var file_ssn_annotator_v1_annotator_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ssn_annotator_v1_annotator_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_ssn_annotator_v1_annotator_proto_goTypes = []interface{}{
	(Feature_Type)(0),                 // 0: ssn.annotator.v1.Feature.Type
	(*Feature)(nil),                   // 1: ssn.annotator.v1.Feature
	(*DocumentAnnotatorRequest)(nil),  // 2: ssn.annotator.v1.DocumentAnnotatorRequest
	(*DocumentAnnotatorResponse)(nil), // 3: ssn.annotator.v1.DocumentAnnotatorResponse
	(*Document)(nil),                  // 4: ssn.annotator.v1.Document
	(*DocumentSource)(nil),            // 5: ssn.annotator.v1.DocumentSource
	(_type.Confidence_Level)(0),       // 6: ssn.type.Confidence.Level
	(_type.Tier)(0),                   // 7: ssn.type.Tier
	(*_type.Candidate)(nil),           // 8: ssn.type.Candidate
	(*_type.TextAnnotation)(nil),      // 9: ssn.type.TextAnnotation
	(*_type.LineCandidate)(nil),       // 10: ssn.type.LineCandidate
}
var file_ssn_annotator_v1_annotator_proto_depIdxs = []int32{
	0,  // 0: ssn.annotator.v1.Feature.type:type_name -> ssn.annotator.v1.Feature.Type
	6,  // 1: ssn.annotator.v1.Feature.min_confidence:type_name -> ssn.type.Confidence.Level
	4,  // 2: ssn.annotator.v1.DocumentAnnotatorRequest.document:type_name -> ssn.annotator.v1.Document
	1,  // 3: ssn.annotator.v1.DocumentAnnotatorRequest.features:type_name -> ssn.annotator.v1.Feature
	7,  // 4: ssn.annotator.v1.DocumentAnnotatorRequest.tier:type_name -> ssn.type.Tier
	8,  // 5: ssn.annotator.v1.DocumentAnnotatorResponse.order_date:type_name -> ssn.type.Candidate
	8,  // 6: ssn.annotator.v1.DocumentAnnotatorResponse.payment_due_date:type_name -> ssn.type.Candidate
	8,  // 7: ssn.annotator.v1.DocumentAnnotatorResponse.currency:type_name -> ssn.type.Candidate
	8,  // 8: ssn.annotator.v1.DocumentAnnotatorResponse.total_vat:type_name -> ssn.type.Candidate
	8,  // 9: ssn.annotator.v1.DocumentAnnotatorResponse.total_incl_vat:type_name -> ssn.type.Candidate
	8,  // 10: ssn.annotator.v1.DocumentAnnotatorResponse.total_excl_vat:type_name -> ssn.type.Candidate
	8,  // 11: ssn.annotator.v1.DocumentAnnotatorResponse.supplier_corporate_id:type_name -> ssn.type.Candidate
	8,  // 12: ssn.annotator.v1.DocumentAnnotatorResponse.supplier_country_code:type_name -> ssn.type.Candidate
	8,  // 13: ssn.annotator.v1.DocumentAnnotatorResponse.document_type:type_name -> ssn.type.Candidate
	8,  // 14: ssn.annotator.v1.DocumentAnnotatorResponse.payment_method:type_name -> ssn.type.Candidate
	8,  // 15: ssn.annotator.v1.DocumentAnnotatorResponse.credit_card_last_four:type_name -> ssn.type.Candidate
	8,  // 16: ssn.annotator.v1.DocumentAnnotatorResponse.invoice_number:type_name -> ssn.type.Candidate
	9,  // 17: ssn.annotator.v1.DocumentAnnotatorResponse.text_annotation:type_name -> ssn.type.TextAnnotation
	8,  // 18: ssn.annotator.v1.DocumentAnnotatorResponse.ocr_line_dk_type:type_name -> ssn.type.Candidate
	8,  // 19: ssn.annotator.v1.DocumentAnnotatorResponse.ocr_line_dk_payment_id:type_name -> ssn.type.Candidate
	8,  // 20: ssn.annotator.v1.DocumentAnnotatorResponse.ocr_line_dk_creditor_id:type_name -> ssn.type.Candidate
	8,  // 21: ssn.annotator.v1.DocumentAnnotatorResponse.ocr_line_se_payment_id:type_name -> ssn.type.Candidate
	8,  // 22: ssn.annotator.v1.DocumentAnnotatorResponse.ocr_line_se_bankgiro_creditor_id:type_name -> ssn.type.Candidate
	8,  // 23: ssn.annotator.v1.DocumentAnnotatorResponse.ocr_line_se_plusgiro_creditor_id:type_name -> ssn.type.Candidate
	8,  // 24: ssn.annotator.v1.DocumentAnnotatorResponse.ocr_line_no_payment_id:type_name -> ssn.type.Candidate
	8,  // 25: ssn.annotator.v1.DocumentAnnotatorResponse.ocr_line_fi_payment_id:type_name -> ssn.type.Candidate
	8,  // 26: ssn.annotator.v1.DocumentAnnotatorResponse.ocr_line_nl_payment_id:type_name -> ssn.type.Candidate
	8,  // 27: ssn.annotator.v1.DocumentAnnotatorResponse.iban:type_name -> ssn.type.Candidate
	10, // 28: ssn.annotator.v1.DocumentAnnotatorResponse.lines:type_name -> ssn.type.LineCandidate
	5,  // 29: ssn.annotator.v1.Document.source:type_name -> ssn.annotator.v1.DocumentSource
	2,  // 30: ssn.annotator.v1.DocumentAnnotator.AnnotateDocument:input_type -> ssn.annotator.v1.DocumentAnnotatorRequest
	3,  // 31: ssn.annotator.v1.DocumentAnnotator.AnnotateDocument:output_type -> ssn.annotator.v1.DocumentAnnotatorResponse
	31, // [31:32] is the sub-list for method output_type
	30, // [30:31] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_ssn_annotator_v1_annotator_proto_init() }
func file_ssn_annotator_v1_annotator_proto_init() {
	if File_ssn_annotator_v1_annotator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ssn_annotator_v1_annotator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_annotator_v1_annotator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentAnnotatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_annotator_v1_annotator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentAnnotatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_annotator_v1_annotator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_annotator_v1_annotator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ssn_annotator_v1_annotator_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ssn_annotator_v1_annotator_proto_goTypes,
		DependencyIndexes: file_ssn_annotator_v1_annotator_proto_depIdxs,
		EnumInfos:         file_ssn_annotator_v1_annotator_proto_enumTypes,
		MessageInfos:      file_ssn_annotator_v1_annotator_proto_msgTypes,
	}.Build()
	File_ssn_annotator_v1_annotator_proto = out.File
	file_ssn_annotator_v1_annotator_proto_rawDesc = nil
	file_ssn_annotator_v1_annotator_proto_goTypes = nil
	file_ssn_annotator_v1_annotator_proto_depIdxs = nil
}
