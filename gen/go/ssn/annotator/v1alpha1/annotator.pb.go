// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ssn/annotator/v1alpha1/annotator.proto

package annotator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/e-conomic/vmlapis/gen/go/lyft/validate"
import _type "github.com/e-conomic/vmlapis/gen/go/ssn/type"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Feature_Type int32

const (
	// Run default feature set
	Feature_DEFAULT Feature_Type = 0
	// Return text annotation
	Feature_TEXT_ANNOTATION Feature_Type = 1
	// Run order date detection
	Feature_ORDER_DATE Feature_Type = 2
	// Run due date detection
	Feature_PAYMENT_DUE_DATE Feature_Type = 3
	// Run currency detection
	Feature_CURRENCY Feature_Type = 4
	// Run total vat detection
	Feature_TOTAL_VAT Feature_Type = 5
	// Run total incl vat detection
	Feature_TOTAL_INCL_VAT Feature_Type = 6
	// Run total excl vat detection
	Feature_TOTAL_EXCL_VAT Feature_Type = 7
	// Run supplier corporate id detection
	Feature_SUPPLIER_CORPORATE_ID Feature_Type = 8
	// Run country code detection
	Feature_SUPPLIER_COUNTRY_CODE Feature_Type = 9
	// Run document type detection
	Feature_DOCUMENT_TYPE Feature_Type = 10
	// Run pyment method detection
	Feature_PAYMENT_METHOD Feature_Type = 11
	// Run credit card number detection
	Feature_CREDIT_CARD_NUMBER Feature_Type = 12
	// Run invoice number detection
	Feature_INVOICE_NUMBER Feature_Type = 13
	// Run danish ocr line detection, for the type
	Feature_OCR_LINE_DK_TYPE Feature_Type = 14
	// Run danish ocr line detection, for the payment id
	Feature_OCR_LINE_DK_PAYMENT_ID Feature_Type = 15
	// Run danish ocr line detection, for the creditor id
	Feature_OCR_LINE_DK_CREDITOR_ID Feature_Type = 16
	// Run swedish ocr line detection for the payment id
	Feature_OCR_LINE_SE_PAYMENT_ID Feature_Type = 17
	// Run swedish ocr line detection for the bankgiro creditor id
	Feature_OCR_LINE_SE_BANKGIRO_CREDITOR_ID Feature_Type = 18
	// Run swedish ocr line detection for the plusgiro creditor id
	Feature_OCR_LINE_SE_PLUSGIRO_CREDITOR_ID Feature_Type = 19
	// Run norwegian ocr line detection or the payment id
	Feature_OCR_LINE_NO_PAYMENT_ID Feature_Type = 20
	// Run finish ocr line detection or the payment id
	Feature_OCR_LINE_FI_PAYMENT_ID Feature_Type = 21
	// Run dutch ocr line detection for the payment id
	Feature_OCR_LINE_NL_PAYMENT_ID Feature_Type = 22
)

var Feature_Type_name = map[int32]string{
	0:  "DEFAULT",
	1:  "TEXT_ANNOTATION",
	2:  "ORDER_DATE",
	3:  "PAYMENT_DUE_DATE",
	4:  "CURRENCY",
	5:  "TOTAL_VAT",
	6:  "TOTAL_INCL_VAT",
	7:  "TOTAL_EXCL_VAT",
	8:  "SUPPLIER_CORPORATE_ID",
	9:  "SUPPLIER_COUNTRY_CODE",
	10: "DOCUMENT_TYPE",
	11: "PAYMENT_METHOD",
	12: "CREDIT_CARD_NUMBER",
	13: "INVOICE_NUMBER",
	14: "OCR_LINE_DK_TYPE",
	15: "OCR_LINE_DK_PAYMENT_ID",
	16: "OCR_LINE_DK_CREDITOR_ID",
	17: "OCR_LINE_SE_PAYMENT_ID",
	18: "OCR_LINE_SE_BANKGIRO_CREDITOR_ID",
	19: "OCR_LINE_SE_PLUSGIRO_CREDITOR_ID",
	20: "OCR_LINE_NO_PAYMENT_ID",
	21: "OCR_LINE_FI_PAYMENT_ID",
	22: "OCR_LINE_NL_PAYMENT_ID",
}
var Feature_Type_value = map[string]int32{
	"DEFAULT":                          0,
	"TEXT_ANNOTATION":                  1,
	"ORDER_DATE":                       2,
	"PAYMENT_DUE_DATE":                 3,
	"CURRENCY":                         4,
	"TOTAL_VAT":                        5,
	"TOTAL_INCL_VAT":                   6,
	"TOTAL_EXCL_VAT":                   7,
	"SUPPLIER_CORPORATE_ID":            8,
	"SUPPLIER_COUNTRY_CODE":            9,
	"DOCUMENT_TYPE":                    10,
	"PAYMENT_METHOD":                   11,
	"CREDIT_CARD_NUMBER":               12,
	"INVOICE_NUMBER":                   13,
	"OCR_LINE_DK_TYPE":                 14,
	"OCR_LINE_DK_PAYMENT_ID":           15,
	"OCR_LINE_DK_CREDITOR_ID":          16,
	"OCR_LINE_SE_PAYMENT_ID":           17,
	"OCR_LINE_SE_BANKGIRO_CREDITOR_ID": 18,
	"OCR_LINE_SE_PLUSGIRO_CREDITOR_ID": 19,
	"OCR_LINE_NO_PAYMENT_ID":           20,
	"OCR_LINE_FI_PAYMENT_ID":           21,
	"OCR_LINE_NL_PAYMENT_ID":           22,
}

func (x Feature_Type) String() string {
	return proto.EnumName(Feature_Type_name, int32(x))
}
func (Feature_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_annotator_a9d04567d9d5fc3f, []int{0, 0}
}

type Confidence_Level int32

const (
	Confidence_UNKNOWN   Confidence_Level = 0
	Confidence_VERY_LOW  Confidence_Level = 1
	Confidence_LOW       Confidence_Level = 2
	Confidence_MID       Confidence_Level = 3
	Confidence_HIGH      Confidence_Level = 4
	Confidence_VERY_HIGH Confidence_Level = 5
)

var Confidence_Level_name = map[int32]string{
	0: "UNKNOWN",
	1: "VERY_LOW",
	2: "LOW",
	3: "MID",
	4: "HIGH",
	5: "VERY_HIGH",
}
var Confidence_Level_value = map[string]int32{
	"UNKNOWN":   0,
	"VERY_LOW":  1,
	"LOW":       2,
	"MID":       3,
	"HIGH":      4,
	"VERY_HIGH": 5,
}

func (x Confidence_Level) String() string {
	return proto.EnumName(Confidence_Level_name, int32(x))
}
func (Confidence_Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_annotator_a9d04567d9d5fc3f, []int{5, 0}
}

type Feature struct {
	// The feature type.
	Type Feature_Type `protobuf:"varint,1,opt,name=type,proto3,enum=ssn.annotator.v1alpha1.Feature_Type" json:"type,omitempty"`
	// Maximum number of results of this type. Does not apply to
	// `TEXT_ANNOTATION` or `DOCUMENT_TYPE`.
	MaxResults int32 `protobuf:"varint,2,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
	// The minimum confidence for predictions that the caller wants returned
	MinConfidence        Confidence_Level `protobuf:"varint,3,opt,name=min_confidence,json=minConfidence,proto3,enum=ssn.annotator.v1alpha1.Confidence_Level" json:"min_confidence,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Feature) Reset()         { *m = Feature{} }
func (m *Feature) String() string { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()    {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_annotator_a9d04567d9d5fc3f, []int{0}
}
func (m *Feature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feature.Unmarshal(m, b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
}
func (dst *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(dst, src)
}
func (m *Feature) XXX_Size() int {
	return xxx_messageInfo_Feature.Size(m)
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetType() Feature_Type {
	if m != nil {
		return m.Type
	}
	return Feature_DEFAULT
}

func (m *Feature) GetMaxResults() int32 {
	if m != nil {
		return m.MaxResults
	}
	return 0
}

func (m *Feature) GetMinConfidence() Confidence_Level {
	if m != nil {
		return m.MinConfidence
	}
	return Confidence_UNKNOWN
}

type DocumentAnnotatorRequest struct {
	Document             *Document  `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	Features             []*Feature `protobuf:"bytes,2,rep,name=features,proto3" json:"features,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DocumentAnnotatorRequest) Reset()         { *m = DocumentAnnotatorRequest{} }
func (m *DocumentAnnotatorRequest) String() string { return proto.CompactTextString(m) }
func (*DocumentAnnotatorRequest) ProtoMessage()    {}
func (*DocumentAnnotatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_annotator_a9d04567d9d5fc3f, []int{1}
}
func (m *DocumentAnnotatorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DocumentAnnotatorRequest.Unmarshal(m, b)
}
func (m *DocumentAnnotatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DocumentAnnotatorRequest.Marshal(b, m, deterministic)
}
func (dst *DocumentAnnotatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentAnnotatorRequest.Merge(dst, src)
}
func (m *DocumentAnnotatorRequest) XXX_Size() int {
	return xxx_messageInfo_DocumentAnnotatorRequest.Size(m)
}
func (m *DocumentAnnotatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentAnnotatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentAnnotatorRequest proto.InternalMessageInfo

func (m *DocumentAnnotatorRequest) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *DocumentAnnotatorRequest) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

type DocumentAnnotatorResponse struct {
	// orderDate
	// ISO 8601 date string, ie. a string of the format "YYYY-MM-DD"
	// Example: "2019-12-31"
	OrderDate []*PredictedField `protobuf:"bytes,1,rep,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	// paymentDueDate
	// ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
	// Example: "2019-12-31"
	PaymentDueDate []*PredictedField `protobuf:"bytes,2,rep,name=payment_due_date,json=paymentDueDate,proto3" json:"payment_due_date,omitempty"`
	// currency
	// ISO 4217 string, ie. a 3-letter capitalized string
	// Example: "NOK"
	Currency []*PredictedField `protobuf:"bytes,3,rep,name=currency,proto3" json:"currency,omitempty"`
	// totalVat
	// A string that parses as a two-decimal number
	// Example: "10.0" or "11.11"
	TotalVat []*PredictedField `protobuf:"bytes,4,rep,name=total_vat,json=totalVat,proto3" json:"total_vat,omitempty"`
	// totalInclVat
	// A string that parses as a two-decimal number
	// Example: "10.0" or "11.11"
	TotalInclVat []*PredictedField `protobuf:"bytes,5,rep,name=total_incl_vat,json=totalInclVat,proto3" json:"total_incl_vat,omitempty"`
	// totalExclVat
	// A string that parses as a two-decimal number
	// Example: "10.0" or "11.11"
	TotalExclVat []*PredictedField `protobuf:"bytes,6,rep,name=total_excl_vat,json=totalExclVat,proto3" json:"total_excl_vat,omitempty"`
	// supplierCorporateId
	// The company VAT number
	// Example: "123456789B01" (for Dutch companies)
	// or "12345678" (for Norwegian companies)
	// Note: The field is repeated because multiple VAT numbers might exist.
	// If you have the VAT number of you customer, you can use this information
	// to find out which VAT number belongs to the supplier of the invoice.
	SupplierCorporateId []*PredictedField `protobuf:"bytes,7,rep,name=supplier_corporate_id,json=supplierCorporateId,proto3" json:"supplier_corporate_id,omitempty"`
	// supplierCountryCode
	// ISO 3166-1 alpha-2 string, ei. a two-letter capitalized string
	// Example: "NO"
	SupplierCountryCode []*PredictedField `protobuf:"bytes,8,rep,name=supplier_country_code,json=supplierCountryCode,proto3" json:"supplier_country_code,omitempty"`
	// documentType
	// Either "Receipt" or "Invoice"
	DocumentType []*PredictedField `protobuf:"bytes,9,rep,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	// paymentMethod
	// Either "Cash" or "CreditCard"
	PaymentMethod []*PredictedField `protobuf:"bytes,10,rep,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	// creditCardNumber
	// Four digits
	// Example: "0012"
	CreditCardNumber []*PredictedField `protobuf:"bytes,11,rep,name=credit_card_number,json=creditCardNumber,proto3" json:"credit_card_number,omitempty"`
	// invoiceNumber
	// The supplier defined identifier af the invoice
	// Example: "12345-A99"
	InvoiceNumber []*PredictedField `protobuf:"bytes,12,rep,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	// Return text annotation
	TextAnnotation *_type.TextAnnotation `protobuf:"bytes,13,opt,name=text_annotation,json=textAnnotation,proto3" json:"text_annotation,omitempty"`
	// example: "71"
	OcrLineDkType []*PredictedField `protobuf:"bytes,14,rep,name=ocr_line_dk_type,json=ocrLineDkType,proto3" json:"ocr_line_dk_type,omitempty"`
	// example: "000002879094031"
	OcrLineDkPaymentId []*PredictedField `protobuf:"bytes,15,rep,name=ocr_line_dk_payment_id,json=ocrLineDkPaymentId,proto3" json:"ocr_line_dk_payment_id,omitempty"`
	// example: "86570807"
	OcrLineDkCreditorId []*PredictedField `protobuf:"bytes,16,rep,name=ocr_line_dk_creditor_id,json=ocrLineDkCreditorId,proto3" json:"ocr_line_dk_creditor_id,omitempty"`
	// example: "050765098"
	OcrLineSePaymentId []*PredictedField `protobuf:"bytes,17,rep,name=ocr_line_se_payment_id,json=ocrLineSePaymentId,proto3" json:"ocr_line_se_payment_id,omitempty"`
	// example: "2654507"
	OcrLineSeBankgiroCreditorId []*PredictedField `protobuf:"bytes,18,rep,name=ocr_line_se_bankgiro_creditor_id,json=ocrLineSeBankgiroCreditorId,proto3" json:"ocr_line_se_bankgiro_creditor_id,omitempty"`
	// example: "5000872"
	OcrLineSePlusgiroCreditorId []*PredictedField `protobuf:"bytes,19,rep,name=ocr_line_se_plusgiro_creditor_id,json=ocrLineSePlusgiroCreditorId,proto3" json:"ocr_line_se_plusgiro_creditor_id,omitempty"`
	// example: "12345678903"
	OcrLineNoPaymentId []*PredictedField `protobuf:"bytes,20,rep,name=ocr_line_no_payment_id,json=ocrLineNoPaymentId,proto3" json:"ocr_line_no_payment_id,omitempty"`
	// example: "0817937867870002"
	OcrLineFiPaymentId []*PredictedField `protobuf:"bytes,21,rep,name=ocr_line_fi_payment_id,json=ocrLineFiPaymentId,proto3" json:"ocr_line_fi_payment_id,omitempty"`
	// example: "00000159220010146012"
	OcrLineNlPaymentId   []*PredictedField `protobuf:"bytes,22,rep,name=ocr_line_nl_payment_id,json=ocrLineNlPaymentId,proto3" json:"ocr_line_nl_payment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DocumentAnnotatorResponse) Reset()         { *m = DocumentAnnotatorResponse{} }
func (m *DocumentAnnotatorResponse) String() string { return proto.CompactTextString(m) }
func (*DocumentAnnotatorResponse) ProtoMessage()    {}
func (*DocumentAnnotatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_annotator_a9d04567d9d5fc3f, []int{2}
}
func (m *DocumentAnnotatorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DocumentAnnotatorResponse.Unmarshal(m, b)
}
func (m *DocumentAnnotatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DocumentAnnotatorResponse.Marshal(b, m, deterministic)
}
func (dst *DocumentAnnotatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentAnnotatorResponse.Merge(dst, src)
}
func (m *DocumentAnnotatorResponse) XXX_Size() int {
	return xxx_messageInfo_DocumentAnnotatorResponse.Size(m)
}
func (m *DocumentAnnotatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentAnnotatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentAnnotatorResponse proto.InternalMessageInfo

func (m *DocumentAnnotatorResponse) GetOrderDate() []*PredictedField {
	if m != nil {
		return m.OrderDate
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetPaymentDueDate() []*PredictedField {
	if m != nil {
		return m.PaymentDueDate
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetCurrency() []*PredictedField {
	if m != nil {
		return m.Currency
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetTotalVat() []*PredictedField {
	if m != nil {
		return m.TotalVat
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetTotalInclVat() []*PredictedField {
	if m != nil {
		return m.TotalInclVat
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetTotalExclVat() []*PredictedField {
	if m != nil {
		return m.TotalExclVat
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetSupplierCorporateId() []*PredictedField {
	if m != nil {
		return m.SupplierCorporateId
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetSupplierCountryCode() []*PredictedField {
	if m != nil {
		return m.SupplierCountryCode
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetDocumentType() []*PredictedField {
	if m != nil {
		return m.DocumentType
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetPaymentMethod() []*PredictedField {
	if m != nil {
		return m.PaymentMethod
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetCreditCardNumber() []*PredictedField {
	if m != nil {
		return m.CreditCardNumber
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetInvoiceNumber() []*PredictedField {
	if m != nil {
		return m.InvoiceNumber
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetTextAnnotation() *_type.TextAnnotation {
	if m != nil {
		return m.TextAnnotation
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetOcrLineDkType() []*PredictedField {
	if m != nil {
		return m.OcrLineDkType
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetOcrLineDkPaymentId() []*PredictedField {
	if m != nil {
		return m.OcrLineDkPaymentId
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetOcrLineDkCreditorId() []*PredictedField {
	if m != nil {
		return m.OcrLineDkCreditorId
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetOcrLineSePaymentId() []*PredictedField {
	if m != nil {
		return m.OcrLineSePaymentId
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetOcrLineSeBankgiroCreditorId() []*PredictedField {
	if m != nil {
		return m.OcrLineSeBankgiroCreditorId
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetOcrLineSePlusgiroCreditorId() []*PredictedField {
	if m != nil {
		return m.OcrLineSePlusgiroCreditorId
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetOcrLineNoPaymentId() []*PredictedField {
	if m != nil {
		return m.OcrLineNoPaymentId
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetOcrLineFiPaymentId() []*PredictedField {
	if m != nil {
		return m.OcrLineFiPaymentId
	}
	return nil
}

func (m *DocumentAnnotatorResponse) GetOcrLineNlPaymentId() []*PredictedField {
	if m != nil {
		return m.OcrLineNlPaymentId
	}
	return nil
}

type Document struct {
	// Document content, represented as a stream of bytes.
	// Note: As with all `bytes` fields, protobuffers use a pure binary
	// representation, whereas JSON representations use base64.
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Google Cloud Storage image location, or publicly-accessible image
	// URL. If both `content` and `source` are provided for a document, `content`
	// takes precedence and is used to perform the scan request.
	Source               *DocumentSource `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Document) Reset()         { *m = Document{} }
func (m *Document) String() string { return proto.CompactTextString(m) }
func (*Document) ProtoMessage()    {}
func (*Document) Descriptor() ([]byte, []int) {
	return fileDescriptor_annotator_a9d04567d9d5fc3f, []int{3}
}
func (m *Document) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Document.Unmarshal(m, b)
}
func (m *Document) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Document.Marshal(b, m, deterministic)
}
func (dst *Document) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Document.Merge(dst, src)
}
func (m *Document) XXX_Size() int {
	return xxx_messageInfo_Document.Size(m)
}
func (m *Document) XXX_DiscardUnknown() {
	xxx_messageInfo_Document.DiscardUnknown(m)
}

var xxx_messageInfo_Document proto.InternalMessageInfo

func (m *Document) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Document) GetSource() *DocumentSource {
	if m != nil {
		return m.Source
	}
	return nil
}

type DocumentSource struct {
	// The URI of the source document. Can be either:
	//
	// 1. A publicly-accessible image HTTP/HTTPS URL. When fetching images from
	//    HTTP/HTTPS URLs, We cannot guarantee that the request will be
	//    completed. Your request may fail if the specified host denies the
	//    request (e.g. due to request throttling or DOS prevention).
	//
	HttpUri              string   `protobuf:"bytes,1,opt,name=http_uri,json=httpUri,proto3" json:"http_uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DocumentSource) Reset()         { *m = DocumentSource{} }
func (m *DocumentSource) String() string { return proto.CompactTextString(m) }
func (*DocumentSource) ProtoMessage()    {}
func (*DocumentSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_annotator_a9d04567d9d5fc3f, []int{4}
}
func (m *DocumentSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DocumentSource.Unmarshal(m, b)
}
func (m *DocumentSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DocumentSource.Marshal(b, m, deterministic)
}
func (dst *DocumentSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentSource.Merge(dst, src)
}
func (m *DocumentSource) XXX_Size() int {
	return xxx_messageInfo_DocumentSource.Size(m)
}
func (m *DocumentSource) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentSource.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentSource proto.InternalMessageInfo

func (m *DocumentSource) GetHttpUri() string {
	if m != nil {
		return m.HttpUri
	}
	return ""
}

type Confidence struct {
	Level                Confidence_Level `protobuf:"varint,1,opt,name=level,proto3,enum=ssn.annotator.v1alpha1.Confidence_Level" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Confidence) Reset()         { *m = Confidence{} }
func (m *Confidence) String() string { return proto.CompactTextString(m) }
func (*Confidence) ProtoMessage()    {}
func (*Confidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_annotator_a9d04567d9d5fc3f, []int{5}
}
func (m *Confidence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Confidence.Unmarshal(m, b)
}
func (m *Confidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Confidence.Marshal(b, m, deterministic)
}
func (dst *Confidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Confidence.Merge(dst, src)
}
func (m *Confidence) XXX_Size() int {
	return xxx_messageInfo_Confidence.Size(m)
}
func (m *Confidence) XXX_DiscardUnknown() {
	xxx_messageInfo_Confidence.DiscardUnknown(m)
}

var xxx_messageInfo_Confidence proto.InternalMessageInfo

func (m *Confidence) GetLevel() Confidence_Level {
	if m != nil {
		return m.Level
	}
	return Confidence_UNKNOWN
}

// Message as prediction
type PredictedField struct {
	// The text as found on the document "1. Jan"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Normalized value 01-01-2019
	// Only set when value is returned nomalized
	NormalizedValue string `protobuf:"bytes,2,opt,name=normalized_value,json=normalizedValue,proto3" json:"normalized_value,omitempty"`
	// The confidence of the prediction being correct
	Confidence *Confidence `protobuf:"bytes,3,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// The bounding box for the block.
	// The vertices are in the order of top-left, top-right, bottom-right,
	// bottom-left. When a rotation of the bounding box is detected the rotation
	// is represented as around the top-left corner as defined when the text is
	// read in the 'natural' orientation.
	// For example:
	//
	// * when the text is horizontal it might look like:
	//
	//         0----1
	//         |    |
	//         3----2
	//
	// * when it's rotated 180 degrees around the top-left corner it becomes:
	//
	//         2----3
	//         |    |
	//         1----0
	//
	//   and the vertex order will still be (0, 1, 2, 3).
	BoundingBox          *_type.BoundingPoly `protobuf:"bytes,4,opt,name=bounding_box,json=boundingBox,proto3" json:"bounding_box,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PredictedField) Reset()         { *m = PredictedField{} }
func (m *PredictedField) String() string { return proto.CompactTextString(m) }
func (*PredictedField) ProtoMessage()    {}
func (*PredictedField) Descriptor() ([]byte, []int) {
	return fileDescriptor_annotator_a9d04567d9d5fc3f, []int{6}
}
func (m *PredictedField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PredictedField.Unmarshal(m, b)
}
func (m *PredictedField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PredictedField.Marshal(b, m, deterministic)
}
func (dst *PredictedField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PredictedField.Merge(dst, src)
}
func (m *PredictedField) XXX_Size() int {
	return xxx_messageInfo_PredictedField.Size(m)
}
func (m *PredictedField) XXX_DiscardUnknown() {
	xxx_messageInfo_PredictedField.DiscardUnknown(m)
}

var xxx_messageInfo_PredictedField proto.InternalMessageInfo

func (m *PredictedField) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *PredictedField) GetNormalizedValue() string {
	if m != nil {
		return m.NormalizedValue
	}
	return ""
}

func (m *PredictedField) GetConfidence() *Confidence {
	if m != nil {
		return m.Confidence
	}
	return nil
}

func (m *PredictedField) GetBoundingBox() *_type.BoundingPoly {
	if m != nil {
		return m.BoundingBox
	}
	return nil
}

func init() {
	proto.RegisterType((*Feature)(nil), "ssn.annotator.v1alpha1.Feature")
	proto.RegisterType((*DocumentAnnotatorRequest)(nil), "ssn.annotator.v1alpha1.DocumentAnnotatorRequest")
	proto.RegisterType((*DocumentAnnotatorResponse)(nil), "ssn.annotator.v1alpha1.DocumentAnnotatorResponse")
	proto.RegisterType((*Document)(nil), "ssn.annotator.v1alpha1.Document")
	proto.RegisterType((*DocumentSource)(nil), "ssn.annotator.v1alpha1.DocumentSource")
	proto.RegisterType((*Confidence)(nil), "ssn.annotator.v1alpha1.Confidence")
	proto.RegisterType((*PredictedField)(nil), "ssn.annotator.v1alpha1.PredictedField")
	proto.RegisterEnum("ssn.annotator.v1alpha1.Feature_Type", Feature_Type_name, Feature_Type_value)
	proto.RegisterEnum("ssn.annotator.v1alpha1.Confidence_Level", Confidence_Level_name, Confidence_Level_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DocumentAnnotatorClient is the client API for DocumentAnnotator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DocumentAnnotatorClient interface {
	AnnotateDocument(ctx context.Context, in *DocumentAnnotatorRequest, opts ...grpc.CallOption) (*DocumentAnnotatorResponse, error)
}

type documentAnnotatorClient struct {
	cc *grpc.ClientConn
}

func NewDocumentAnnotatorClient(cc *grpc.ClientConn) DocumentAnnotatorClient {
	return &documentAnnotatorClient{cc}
}

func (c *documentAnnotatorClient) AnnotateDocument(ctx context.Context, in *DocumentAnnotatorRequest, opts ...grpc.CallOption) (*DocumentAnnotatorResponse, error) {
	out := new(DocumentAnnotatorResponse)
	err := c.cc.Invoke(ctx, "/ssn.annotator.v1alpha1.DocumentAnnotator/AnnotateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentAnnotatorServer is the server API for DocumentAnnotator service.
type DocumentAnnotatorServer interface {
	AnnotateDocument(context.Context, *DocumentAnnotatorRequest) (*DocumentAnnotatorResponse, error)
}

func RegisterDocumentAnnotatorServer(s *grpc.Server, srv DocumentAnnotatorServer) {
	s.RegisterService(&_DocumentAnnotator_serviceDesc, srv)
}

func _DocumentAnnotator_AnnotateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentAnnotatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentAnnotatorServer).AnnotateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssn.annotator.v1alpha1.DocumentAnnotator/AnnotateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentAnnotatorServer).AnnotateDocument(ctx, req.(*DocumentAnnotatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DocumentAnnotator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ssn.annotator.v1alpha1.DocumentAnnotator",
	HandlerType: (*DocumentAnnotatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnnotateDocument",
			Handler:    _DocumentAnnotator_AnnotateDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ssn/annotator/v1alpha1/annotator.proto",
}

func init() {
	proto.RegisterFile("ssn/annotator/v1alpha1/annotator.proto", fileDescriptor_annotator_a9d04567d9d5fc3f)
}

var fileDescriptor_annotator_a9d04567d9d5fc3f = []byte{
	// 1331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x97, 0xcd, 0x6e, 0xdb, 0xc6,
	0x16, 0xc7, 0x23, 0xcb, 0xb2, 0xe5, 0x23, 0x5b, 0xa6, 0xc7, 0x1f, 0x61, 0x9c, 0xe0, 0xc6, 0x10,
	0x82, 0xc0, 0xf7, 0x5e, 0x40, 0xbe, 0xf1, 0xdd, 0xb4, 0x69, 0x11, 0x40, 0x22, 0xe9, 0x84, 0xb0,
	0x44, 0x0a, 0x63, 0xca, 0x89, 0x83, 0x02, 0x03, 0x9a, 0x1c, 0x3b, 0x44, 0x28, 0x8e, 0xca, 0x0f,
	0x43, 0xca, 0xb2, 0x40, 0x9f, 0xa0, 0xe8, 0xaa, 0x8b, 0x2e, 0xfb, 0x04, 0xdd, 0x74, 0xd5, 0x47,
	0x28, 0xd0, 0x07, 0xe8, 0xa6, 0x9b, 0x6e, 0xfa, 0x0c, 0x05, 0x87, 0xa4, 0x44, 0x29, 0x71, 0x53,
	0x6a, 0xc7, 0x39, 0xe7, 0xfc, 0x7f, 0xe7, 0x70, 0x78, 0xc8, 0x39, 0x84, 0xc7, 0x41, 0xe0, 0x1d,
	0x99, 0x9e, 0xc7, 0x42, 0x33, 0x64, 0xfe, 0xd1, 0xcd, 0x13, 0xd3, 0x1d, 0xbe, 0x31, 0x9f, 0x4c,
	0x4d, 0xcd, 0xa1, 0xcf, 0x42, 0x86, 0xf6, 0x82, 0xc0, 0x6b, 0x4e, 0x8d, 0x59, 0xdc, 0xfe, 0x83,
	0x6b, 0xc6, 0xae, 0x5d, 0x7a, 0x64, 0x0e, 0x9d, 0x4c, 0xe3, 0x30, 0x2f, 0x48, 0x54, 0xfb, 0x0f,
	0xdc, 0xf1, 0x55, 0x78, 0x74, 0x63, 0xba, 0x8e, 0x6d, 0x86, 0x74, 0x72, 0x91, 0x7a, 0xef, 0xc6,
	0xb9, 0xc3, 0xf1, 0x90, 0x1e, 0x5d, 0x53, 0x36, 0xa0, 0xa1, 0x3f, 0x4e, 0x1d, 0xff, 0x9a, 0x38,
	0x42, 0x3a, 0x0a, 0xc9, 0x94, 0x9b, 0xf8, 0x1b, 0xbf, 0x55, 0x60, 0xf5, 0x84, 0x9a, 0x61, 0xe4,
	0x53, 0xf4, 0x09, 0x2c, 0xc7, 0x91, 0x62, 0xe9, 0xa0, 0x74, 0x58, 0x3f, 0x7e, 0xd4, 0xfc, 0x70,
	0x9d, 0xcd, 0x34, 0xbc, 0x69, 0x8c, 0x87, 0x14, 0x73, 0x05, 0x7a, 0x08, 0xb5, 0x81, 0x39, 0x22,
	0x3e, 0x0d, 0x22, 0x37, 0x0c, 0xc4, 0xa5, 0x83, 0xd2, 0x61, 0x05, 0xc3, 0xc0, 0x1c, 0xe1, 0xc4,
	0x82, 0x74, 0xa8, 0x0f, 0x1c, 0x8f, 0x58, 0xcc, 0xbb, 0x72, 0x6c, 0xea, 0x59, 0x54, 0x2c, 0xf3,
	0x24, 0x87, 0xb7, 0x25, 0x91, 0x26, 0x91, 0xcd, 0x0e, 0xbd, 0xa1, 0x2e, 0xde, 0x18, 0x38, 0xde,
	0xd4, 0xd8, 0xf8, 0x61, 0x19, 0x96, 0xe3, 0x02, 0x50, 0x0d, 0x56, 0x65, 0xe5, 0xa4, 0xd5, 0xef,
	0x18, 0xc2, 0x1d, 0xb4, 0x0d, 0x9b, 0x86, 0xf2, 0xca, 0x20, 0x2d, 0x4d, 0xd3, 0x8d, 0x96, 0xa1,
	0xea, 0x9a, 0x50, 0x42, 0x75, 0x00, 0x1d, 0xcb, 0x0a, 0x26, 0x72, 0xcb, 0x50, 0x84, 0x25, 0xb4,
	0x03, 0x42, 0xaf, 0x75, 0xd1, 0x55, 0x34, 0x83, 0xc8, 0x7d, 0x25, 0xb1, 0x96, 0xd1, 0x3a, 0x54,
	0xa5, 0x3e, 0xc6, 0x8a, 0x26, 0x5d, 0x08, 0xcb, 0x68, 0x03, 0xd6, 0x0c, 0xdd, 0x68, 0x75, 0xc8,
	0x79, 0xcb, 0x10, 0x2a, 0x08, 0x41, 0x3d, 0x59, 0xaa, 0x9a, 0x94, 0xd8, 0x56, 0xa6, 0x36, 0xe5,
	0x55, 0x6a, 0x5b, 0x45, 0xf7, 0x60, 0xf7, 0xac, 0xdf, 0xeb, 0x75, 0x54, 0x05, 0x13, 0x49, 0xc7,
	0x3d, 0x1d, 0xb7, 0x0c, 0x85, 0xa8, 0xb2, 0x50, 0x9d, 0x73, 0xf5, 0x35, 0x03, 0x5f, 0x10, 0x49,
	0x97, 0x15, 0x61, 0x0d, 0x6d, 0xc1, 0x86, 0xac, 0x4b, 0x7d, 0x5e, 0x91, 0x71, 0xd1, 0x53, 0x04,
	0x88, 0xe1, 0x59, 0x8d, 0x5d, 0xc5, 0x78, 0xa1, 0xcb, 0x42, 0x0d, 0xed, 0x01, 0x92, 0xb0, 0x22,
	0xab, 0x06, 0x91, 0x5a, 0x58, 0x26, 0x5a, 0xbf, 0xdb, 0x56, 0xb0, 0xb0, 0x1e, 0xc7, 0xaa, 0xda,
	0xb9, 0xae, 0x4a, 0x4a, 0x66, 0xdb, 0x88, 0xef, 0x51, 0x97, 0x30, 0xe9, 0xa8, 0x9a, 0x42, 0xe4,
	0xd3, 0x84, 0x5a, 0x47, 0xfb, 0xb0, 0x97, 0xb7, 0x66, 0x19, 0x54, 0x59, 0xd8, 0x44, 0xf7, 0xe1,
	0x6e, 0xde, 0x97, 0x64, 0xd2, 0x71, 0xec, 0x14, 0x66, 0x84, 0x67, 0x4a, 0x5e, 0xb8, 0x85, 0x1e,
	0xc1, 0x41, 0xde, 0xd7, 0x6e, 0x69, 0xa7, 0xcf, 0x55, 0xac, 0xcf, 0x10, 0xd0, 0x7c, 0x54, 0xaf,
	0xd3, 0x3f, 0x7b, 0x2f, 0x6a, 0x7b, 0x26, 0x8f, 0xa6, 0xe7, 0xf3, 0xec, 0xcc, 0xf8, 0x4e, 0xd4,
	0xbc, 0x6f, 0x77, 0x56, 0xd7, 0xc9, 0xfb, 0xf6, 0x1a, 0xdf, 0x96, 0x40, 0x94, 0x99, 0x15, 0x0d,
	0xa8, 0x17, 0xb6, 0xb2, 0x46, 0xc3, 0xf4, 0xcb, 0x88, 0x06, 0x21, 0xfa, 0x1c, 0xaa, 0x76, 0xea,
	0xe3, 0x6d, 0x5f, 0x3b, 0x3e, 0xb8, 0xad, 0x23, 0x33, 0x06, 0x9e, 0x28, 0xd0, 0x67, 0x50, 0xbd,
	0x4a, 0x5e, 0x86, 0xb8, 0xe7, 0xcb, 0x87, 0xb5, 0xe3, 0x87, 0x1f, 0x79, 0x69, 0xf0, 0x44, 0xd0,
	0xf8, 0xb3, 0x0e, 0xf7, 0x3e, 0x50, 0x57, 0x30, 0x64, 0x5e, 0x40, 0x91, 0x02, 0xc0, 0x7c, 0x9b,
	0xfa, 0x24, 0x7e, 0xc9, 0xc5, 0x12, 0x87, 0x3f, 0xbe, 0x0d, 0xde, 0xf3, 0xa9, 0xed, 0x58, 0x21,
	0xb5, 0x4f, 0x1c, 0xea, 0xda, 0x78, 0x8d, 0x2b, 0x65, 0x33, 0xa4, 0xa8, 0x07, 0xc2, 0xd0, 0x1c,
	0xc7, 0x29, 0x88, 0x1d, 0xd1, 0x04, 0xb6, 0x54, 0x08, 0x56, 0x4f, 0xf5, 0x72, 0x44, 0x39, 0xb1,
	0x0d, 0x55, 0x2b, 0xf2, 0x7d, 0xea, 0x59, 0x63, 0xb1, 0x5c, 0x88, 0x34, 0xd1, 0x21, 0x09, 0xd6,
	0x42, 0x16, 0x9a, 0x2e, 0xb9, 0x31, 0x43, 0x71, 0xb9, 0x18, 0x84, 0x0b, 0xcf, 0xcd, 0x10, 0x75,
	0xa0, 0x9e, 0x40, 0x1c, 0xcf, 0x4a, 0x48, 0x95, 0x42, 0xa4, 0x75, 0xae, 0x56, 0x3d, 0x6b, 0x96,
	0x46, 0x47, 0x29, 0x6d, 0x65, 0x01, 0x9a, 0x32, 0x4a, 0x68, 0xaf, 0x61, 0x37, 0x88, 0x86, 0x43,
	0xd7, 0xa1, 0x3e, 0xb1, 0x98, 0x3f, 0x64, 0xbe, 0x19, 0x52, 0xe2, 0xd8, 0xe2, 0x6a, 0x21, 0xe8,
	0x76, 0x06, 0x91, 0x32, 0x86, 0x6a, 0xcf, 0xb1, 0x23, 0x2f, 0xf4, 0xc7, 0xc4, 0x62, 0x36, 0x15,
	0xab, 0x8b, 0xb2, 0x39, 0x43, 0x62, 0x36, 0x45, 0xa7, 0xb0, 0x91, 0x35, 0x37, 0xe1, 0x47, 0xc1,
	0x5a, 0xb1, 0x4d, 0xc8, 0xc4, 0xfc, 0xcb, 0xdc, 0x85, 0xac, 0x77, 0xc8, 0x80, 0x86, 0x6f, 0x98,
	0x2d, 0x42, 0x21, 0xda, 0x46, 0xaa, 0xee, 0x72, 0x31, 0x32, 0x00, 0x59, 0x71, 0x40, 0x48, 0x2c,
	0xd3, 0xb7, 0x89, 0x17, 0x0d, 0x2e, 0xa9, 0x2f, 0xd6, 0x0a, 0x21, 0x85, 0x84, 0x20, 0x99, 0xbe,
	0xad, 0x71, 0x7d, 0x5c, 0xa4, 0xe3, 0xdd, 0x30, 0xc7, 0xa2, 0x19, 0x71, 0xbd, 0x58, 0x91, 0xa9,
	0x3a, 0xc5, 0xb5, 0x60, 0x73, 0xee, 0x9c, 0x15, 0x37, 0xf8, 0x67, 0x45, 0xe4, 0xbc, 0x78, 0x4f,
	0x9b, 0x06, 0x1d, 0x65, 0x2f, 0xbc, 0xc3, 0x3c, 0x5c, 0x0f, 0x67, 0xd6, 0x48, 0x07, 0x81, 0x59,
	0x3e, 0x71, 0x1d, 0x8f, 0x12, 0xfb, 0x6d, 0xf2, 0x18, 0xea, 0xc5, 0x6a, 0x62, 0x96, 0xdf, 0x71,
	0x3c, 0x2a, 0xbf, 0xe5, 0xcf, 0xe1, 0x35, 0xec, 0xe5, 0x81, 0xd9, 0x33, 0x71, 0x6c, 0x71, 0xb3,
	0x10, 0x16, 0x4d, 0xb0, 0xbd, 0x04, 0xa1, 0xda, 0xe8, 0x0b, 0xb8, 0x9b, 0x67, 0x27, 0xdb, 0xcb,
	0xfc, 0x18, 0x2e, 0x14, 0x6b, 0xc7, 0x09, 0x5c, 0x4a, 0x19, 0xbc, 0xd5, 0xa7, 0x95, 0x07, 0x34,
	0x5f, 0xf9, 0xd6, 0x42, 0x95, 0x9f, 0xd1, 0x69, 0xe5, 0x03, 0x38, 0xc8, 0xb3, 0x2f, 0x4d, 0xef,
	0xed, 0xb5, 0xe3, 0xb3, 0x99, 0x5b, 0x40, 0x85, 0xb2, 0xdc, 0x9f, 0x64, 0x69, 0xa7, 0xb0, 0xdc,
	0xad, 0xcc, 0xa5, 0x1b, 0xba, 0x51, 0xf0, 0x5e, 0xba, 0xed, 0x05, 0xd3, 0xf5, 0x52, 0xd8, 0x2d,
	0x3b, 0xe7, 0xb1, 0xfc, 0xce, 0xed, 0x2c, 0xb4, 0x73, 0x1a, 0x9b, 0xee, 0x5c, 0x9e, 0x7d, 0xe5,
	0xe4, 0xd9, 0xbb, 0x0b, 0xb1, 0x4f, 0x9c, 0x0f, 0xb3, 0x3d, 0x37, 0xcf, 0xde, 0x5b, 0xac, 0x6e,
	0x77, 0xc2, 0x6e, 0x0c, 0xa1, 0x9a, 0x9d, 0xb7, 0xe8, 0x11, 0xac, 0x5a, 0xcc, 0x0b, 0xb3, 0x63,
	0x7f, 0xbd, 0x0d, 0x3f, 0xfd, 0xf1, 0x73, 0xb9, 0xf2, 0xae, 0x2c, 0x7c, 0xbd, 0x84, 0x33, 0x17,
	0x7a, 0x06, 0x2b, 0x01, 0x8b, 0x7c, 0x8b, 0xf2, 0x89, 0xf6, 0x6f, 0xb2, 0x67, 0xdc, 0x33, 0x1e,
	0x8d, 0x53, 0x55, 0xe3, 0xbf, 0x50, 0x9f, 0xf5, 0xa0, 0x7b, 0x50, 0x7d, 0x13, 0x86, 0x43, 0x12,
	0xf9, 0x0e, 0x4f, 0xbc, 0x86, 0x57, 0xe3, 0x75, 0xdf, 0x77, 0x1a, 0xdf, 0x95, 0x00, 0xa6, 0x03,
	0x2e, 0x7a, 0x06, 0x15, 0x37, 0x1e, 0x7c, 0xd3, 0x69, 0xfc, 0x9f, 0x0f, 0xca, 0x89, 0xac, 0xd1,
	0x85, 0x0a, 0x5f, 0xc7, 0x03, 0x72, 0x5f, 0x3b, 0xd5, 0xf4, 0x97, 0x9a, 0x70, 0x27, 0x9e, 0x72,
	0xcf, 0x15, 0x7c, 0x41, 0x3a, 0xfa, 0x4b, 0xa1, 0x84, 0x56, 0xa1, 0x1c, 0x5f, 0x2c, 0xc5, 0x17,
	0x5d, 0x55, 0x16, 0xca, 0xa8, 0x0a, 0xcb, 0x2f, 0xd4, 0xe7, 0x2f, 0x92, 0x09, 0x98, 0x47, 0xf2,
	0x65, 0xa5, 0xf1, 0x4b, 0x09, 0xea, 0xb3, 0x7b, 0x8c, 0x76, 0xa0, 0x72, 0x63, 0xba, 0x11, 0x4d,
	0x6f, 0x24, 0x59, 0xa0, 0x7f, 0x83, 0xe0, 0x31, 0x7f, 0x60, 0xba, 0xce, 0x3b, 0x6a, 0x93, 0x24,
	0x60, 0x89, 0x07, 0x6c, 0x4e, 0xed, 0xe7, 0x3c, 0xb4, 0x0d, 0x30, 0xf7, 0x43, 0x50, 0x3b, 0x6e,
	0x7c, 0xfc, 0x3e, 0x71, 0x4e, 0x85, 0x3e, 0x85, 0xf5, 0x4b, 0x16, 0x79, 0xb6, 0xe3, 0x5d, 0x93,
	0x4b, 0x36, 0x12, 0x97, 0x39, 0x65, 0x6f, 0xfa, 0xb5, 0x6d, 0xa7, 0xde, 0x1e, 0x73, 0xc7, 0xb8,
	0x96, 0xc5, 0xb6, 0xd9, 0xe8, 0xf8, 0xc7, 0x12, 0x6c, 0xbd, 0x37, 0x80, 0xa1, 0xef, 0x4b, 0x20,
	0xa4, 0x2b, 0x3a, 0x69, 0x97, 0xff, 0x7d, 0xec, 0xc1, 0xcf, 0x0f, 0x96, 0xfb, 0x4f, 0x0a, 0x28,
	0x92, 0x91, 0xaf, 0xf1, 0xf8, 0xab, 0x5f, 0x7f, 0xff, 0x66, 0xe9, 0xa0, 0x71, 0x7f, 0xfa, 0xeb,
	0x98, 0x9d, 0xa7, 0x4f, 0x53, 0x10, 0x7d, 0x5a, 0xfa, 0x4f, 0xbb, 0xf6, 0x7a, 0x6d, 0xc2, 0xbd,
	0x5c, 0xe1, 0xbf, 0x71, 0xff, 0xff, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xc0, 0x08, 0x5e, 0x7d,
	0x0e, 0x00, 0x00,
}
