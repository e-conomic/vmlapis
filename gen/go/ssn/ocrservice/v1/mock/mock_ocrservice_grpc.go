// Code generated by MockGen. DO NOT EDIT.
// Source: gen/go/ssn/ocrservice/v1/ocrservice_grpc.pb.go

// Package mock_ocrservice is a generated GoMock package.
package mock_ocrservice

import (
	context "context"
	reflect "reflect"

	ocrservice "github.com/e-conomic/vmlapis/gen/go/ssn/ocrservice/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockOcrServiceClient is a mock of OcrServiceClient interface.
type MockOcrServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOcrServiceClientMockRecorder
}

// MockOcrServiceClientMockRecorder is the mock recorder for MockOcrServiceClient.
type MockOcrServiceClientMockRecorder struct {
	mock *MockOcrServiceClient
}

// NewMockOcrServiceClient creates a new mock instance.
func NewMockOcrServiceClient(ctrl *gomock.Controller) *MockOcrServiceClient {
	mock := &MockOcrServiceClient{ctrl: ctrl}
	mock.recorder = &MockOcrServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOcrServiceClient) EXPECT() *MockOcrServiceClientMockRecorder {
	return m.recorder
}

// GetTextAnnotation mocks base method.
func (m *MockOcrServiceClient) GetTextAnnotation(ctx context.Context, in *ocrservice.GetTextAnnotationRequest, opts ...grpc.CallOption) (*ocrservice.GetTextAnnotationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTextAnnotation", varargs...)
	ret0, _ := ret[0].(*ocrservice.GetTextAnnotationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextAnnotation indicates an expected call of GetTextAnnotation.
func (mr *MockOcrServiceClientMockRecorder) GetTextAnnotation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextAnnotation", reflect.TypeOf((*MockOcrServiceClient)(nil).GetTextAnnotation), varargs...)
}

// OcrScanImage mocks base method.
func (m *MockOcrServiceClient) OcrScanImage(ctx context.Context, in *ocrservice.OcrScanImageRequest, opts ...grpc.CallOption) (*ocrservice.OcrScanImageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OcrScanImage", varargs...)
	ret0, _ := ret[0].(*ocrservice.OcrScanImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OcrScanImage indicates an expected call of OcrScanImage.
func (mr *MockOcrServiceClientMockRecorder) OcrScanImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OcrScanImage", reflect.TypeOf((*MockOcrServiceClient)(nil).OcrScanImage), varargs...)
}

// MockOcrServiceServer is a mock of OcrServiceServer interface.
type MockOcrServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockOcrServiceServerMockRecorder
}

// MockOcrServiceServerMockRecorder is the mock recorder for MockOcrServiceServer.
type MockOcrServiceServerMockRecorder struct {
	mock *MockOcrServiceServer
}

// NewMockOcrServiceServer creates a new mock instance.
func NewMockOcrServiceServer(ctrl *gomock.Controller) *MockOcrServiceServer {
	mock := &MockOcrServiceServer{ctrl: ctrl}
	mock.recorder = &MockOcrServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOcrServiceServer) EXPECT() *MockOcrServiceServerMockRecorder {
	return m.recorder
}

// GetTextAnnotation mocks base method.
func (m *MockOcrServiceServer) GetTextAnnotation(arg0 context.Context, arg1 *ocrservice.GetTextAnnotationRequest) (*ocrservice.GetTextAnnotationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextAnnotation", arg0, arg1)
	ret0, _ := ret[0].(*ocrservice.GetTextAnnotationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextAnnotation indicates an expected call of GetTextAnnotation.
func (mr *MockOcrServiceServerMockRecorder) GetTextAnnotation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextAnnotation", reflect.TypeOf((*MockOcrServiceServer)(nil).GetTextAnnotation), arg0, arg1)
}

// OcrScanImage mocks base method.
func (m *MockOcrServiceServer) OcrScanImage(arg0 context.Context, arg1 *ocrservice.OcrScanImageRequest) (*ocrservice.OcrScanImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OcrScanImage", arg0, arg1)
	ret0, _ := ret[0].(*ocrservice.OcrScanImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OcrScanImage indicates an expected call of OcrScanImage.
func (mr *MockOcrServiceServerMockRecorder) OcrScanImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OcrScanImage", reflect.TypeOf((*MockOcrServiceServer)(nil).OcrScanImage), arg0, arg1)
}

// mustEmbedUnimplementedOcrServiceServer mocks base method.
func (m *MockOcrServiceServer) mustEmbedUnimplementedOcrServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOcrServiceServer")
}

// mustEmbedUnimplementedOcrServiceServer indicates an expected call of mustEmbedUnimplementedOcrServiceServer.
func (mr *MockOcrServiceServerMockRecorder) mustEmbedUnimplementedOcrServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOcrServiceServer", reflect.TypeOf((*MockOcrServiceServer)(nil).mustEmbedUnimplementedOcrServiceServer))
}

// MockUnsafeOcrServiceServer is a mock of UnsafeOcrServiceServer interface.
type MockUnsafeOcrServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOcrServiceServerMockRecorder
}

// MockUnsafeOcrServiceServerMockRecorder is the mock recorder for MockUnsafeOcrServiceServer.
type MockUnsafeOcrServiceServerMockRecorder struct {
	mock *MockUnsafeOcrServiceServer
}

// NewMockUnsafeOcrServiceServer creates a new mock instance.
func NewMockUnsafeOcrServiceServer(ctrl *gomock.Controller) *MockUnsafeOcrServiceServer {
	mock := &MockUnsafeOcrServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOcrServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOcrServiceServer) EXPECT() *MockUnsafeOcrServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOcrServiceServer mocks base method.
func (m *MockUnsafeOcrServiceServer) mustEmbedUnimplementedOcrServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOcrServiceServer")
}

// mustEmbedUnimplementedOcrServiceServer indicates an expected call of mustEmbedUnimplementedOcrServiceServer.
func (mr *MockUnsafeOcrServiceServerMockRecorder) mustEmbedUnimplementedOcrServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOcrServiceServer", reflect.TypeOf((*MockUnsafeOcrServiceServer)(nil).mustEmbedUnimplementedOcrServiceServer))
}
