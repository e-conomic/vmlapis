// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ssn/ocrservice/v1/ocrservice.proto

package ocrservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import v1 "google.golang.org/genproto/googleapis/cloud/vision/v1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OcrScanImageRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OcrScanImageRequest) Reset()         { *m = OcrScanImageRequest{} }
func (m *OcrScanImageRequest) String() string { return proto.CompactTextString(m) }
func (*OcrScanImageRequest) ProtoMessage()    {}
func (*OcrScanImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ocrservice_97260d6774ece136, []int{0}
}
func (m *OcrScanImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OcrScanImageRequest.Unmarshal(m, b)
}
func (m *OcrScanImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OcrScanImageRequest.Marshal(b, m, deterministic)
}
func (dst *OcrScanImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OcrScanImageRequest.Merge(dst, src)
}
func (m *OcrScanImageRequest) XXX_Size() int {
	return xxx_messageInfo_OcrScanImageRequest.Size(m)
}
func (m *OcrScanImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OcrScanImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OcrScanImageRequest proto.InternalMessageInfo

func (m *OcrScanImageRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type OcrScanImageResponse struct {
	TessHocr              string                    `protobuf:"bytes,1,opt,name=tess_hocr,json=tessHocr,proto3" json:"tess_hocr,omitempty"`
	ScaleFactor           float64                   `protobuf:"fixed64,2,opt,name=scale_factor,json=scaleFactor,proto3" json:"scale_factor,omitempty"`
	AnnotateImageResponse *v1.AnnotateImageResponse `protobuf:"bytes,3,opt,name=annotate_image_response,json=annotateImageResponse,proto3" json:"annotate_image_response,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                  `json:"-"`
	XXX_unrecognized      []byte                    `json:"-"`
	XXX_sizecache         int32                     `json:"-"`
}

func (m *OcrScanImageResponse) Reset()         { *m = OcrScanImageResponse{} }
func (m *OcrScanImageResponse) String() string { return proto.CompactTextString(m) }
func (*OcrScanImageResponse) ProtoMessage()    {}
func (*OcrScanImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ocrservice_97260d6774ece136, []int{1}
}
func (m *OcrScanImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OcrScanImageResponse.Unmarshal(m, b)
}
func (m *OcrScanImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OcrScanImageResponse.Marshal(b, m, deterministic)
}
func (dst *OcrScanImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OcrScanImageResponse.Merge(dst, src)
}
func (m *OcrScanImageResponse) XXX_Size() int {
	return xxx_messageInfo_OcrScanImageResponse.Size(m)
}
func (m *OcrScanImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OcrScanImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OcrScanImageResponse proto.InternalMessageInfo

func (m *OcrScanImageResponse) GetTessHocr() string {
	if m != nil {
		return m.TessHocr
	}
	return ""
}

func (m *OcrScanImageResponse) GetScaleFactor() float64 {
	if m != nil {
		return m.ScaleFactor
	}
	return 0
}

func (m *OcrScanImageResponse) GetAnnotateImageResponse() *v1.AnnotateImageResponse {
	if m != nil {
		return m.AnnotateImageResponse
	}
	return nil
}

func init() {
	proto.RegisterType((*OcrScanImageRequest)(nil), "ssn.ocrservice.v1.OcrScanImageRequest")
	proto.RegisterType((*OcrScanImageResponse)(nil), "ssn.ocrservice.v1.OcrScanImageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OcrServiceClient is the client API for OcrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OcrServiceClient interface {
	OcrScanImage(ctx context.Context, in *OcrScanImageRequest, opts ...grpc.CallOption) (*OcrScanImageResponse, error)
}

type ocrServiceClient struct {
	cc *grpc.ClientConn
}

func NewOcrServiceClient(cc *grpc.ClientConn) OcrServiceClient {
	return &ocrServiceClient{cc}
}

func (c *ocrServiceClient) OcrScanImage(ctx context.Context, in *OcrScanImageRequest, opts ...grpc.CallOption) (*OcrScanImageResponse, error) {
	out := new(OcrScanImageResponse)
	err := c.cc.Invoke(ctx, "/ssn.ocrservice.v1.OcrService/OcrScanImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcrServiceServer is the server API for OcrService service.
type OcrServiceServer interface {
	OcrScanImage(context.Context, *OcrScanImageRequest) (*OcrScanImageResponse, error)
}

func RegisterOcrServiceServer(s *grpc.Server, srv OcrServiceServer) {
	s.RegisterService(&_OcrService_serviceDesc, srv)
}

func _OcrService_OcrScanImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OcrScanImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcrServiceServer).OcrScanImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssn.ocrservice.v1.OcrService/OcrScanImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcrServiceServer).OcrScanImage(ctx, req.(*OcrScanImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OcrService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ssn.ocrservice.v1.OcrService",
	HandlerType: (*OcrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OcrScanImage",
			Handler:    _OcrService_OcrScanImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ssn/ocrservice/v1/ocrservice.proto",
}

func init() {
	proto.RegisterFile("ssn/ocrservice/v1/ocrservice.proto", fileDescriptor_ocrservice_97260d6774ece136)
}

var fileDescriptor_ocrservice_97260d6774ece136 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x89, 0x8a, 0xb8, 0xd9, 0x5e, 0x8c, 0x8a, 0x65, 0xbd, 0xd4, 0x1e, 0xb4, 0x82, 0xa6,
	0x74, 0xfd, 0x05, 0x7a, 0x10, 0x3d, 0x09, 0xf5, 0xe6, 0xa5, 0xc4, 0xec, 0x58, 0x0b, 0xdd, 0xcc,
	0x9a, 0xc9, 0xf6, 0xdf, 0xf9, 0xdf, 0xa4, 0x49, 0xc1, 0x2e, 0x2e, 0xec, 0x2d, 0xf9, 0x32, 0x6f,
	0xf2, 0xde, 0xe3, 0x29, 0x91, 0xc9, 0x51, 0x5b, 0x02, 0xdb, 0x35, 0x1a, 0xf2, 0xae, 0x18, 0xdd,
	0xe4, 0xca, 0xa2, 0x43, 0x71, 0x4c, 0x64, 0xe4, 0x88, 0x76, 0xc5, 0xec, 0xb6, 0x46, 0xac, 0x5b,
	0xc8, 0x75, 0x8b, 0xeb, 0x45, 0xde, 0x35, 0xd4, 0xa0, 0xe9, 0xb5, 0xcd, 0x52, 0xd5, 0x50, 0x29,
	0x63, 0xd0, 0x29, 0x87, 0x36, 0x2c, 0x48, 0x6f, 0xf8, 0xc9, 0xab, 0xb6, 0x6f, 0x5a, 0x99, 0x97,
	0xfe, 0xbd, 0x84, 0xef, 0x35, 0x90, 0x13, 0x82, 0x1f, 0x2c, 0x94, 0x53, 0x31, 0x4b, 0x58, 0x16,
	0x95, 0xfe, 0x9c, 0xfe, 0x30, 0x7e, 0xba, 0x39, 0x4b, 0x2b, 0x34, 0x04, 0xe2, 0x82, 0x4f, 0x1c,
	0x10, 0x55, 0x5f, 0xa8, 0xad, 0x57, 0x4c, 0xca, 0xa3, 0x1e, 0x3c, 0xa3, 0xb6, 0xe2, 0x92, 0x47,
	0xa4, 0x55, 0x0b, 0xd5, 0xa7, 0xd2, 0x0e, 0x6d, 0xbc, 0x97, 0xb0, 0x8c, 0x95, 0x53, 0xcf, 0x9e,
	0x3c, 0x12, 0xc0, 0xcf, 0x07, 0x5b, 0x50, 0x05, 0x97, 0x76, 0x58, 0x1d, 0xef, 0x27, 0x2c, 0x9b,
	0xce, 0xef, 0x64, 0xc8, 0x24, 0x7d, 0x26, 0x19, 0x32, 0xc9, 0xae, 0x90, 0x0f, 0x83, 0x6c, 0xc3,
	0x4f, 0x79, 0xa6, 0xb6, 0xe1, 0xf9, 0x92, 0xf3, 0xde, 0x7e, 0x68, 0x4a, 0x54, 0x3c, 0x1a, 0x87,
	0x11, 0x57, 0xf2, 0x5f, 0x95, 0x72, 0x4b, 0x33, 0xb3, 0xeb, 0x9d, 0x73, 0xe1, 0xbb, 0xc7, 0xe8,
	0x9d, 0xff, 0x4d, 0x7d, 0x1c, 0xfa, 0xba, 0xef, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x36,
	0x80, 0xc9, 0xd5, 0x01, 0x00, 0x00,
}
