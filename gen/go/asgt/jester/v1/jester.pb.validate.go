// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: asgt/jester/v1/jester.proto

package jester

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	asgttype "github.com/e-conomic/vmlapis/gen/go/asgt/type"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = asgttype.Confidence_Level(0)
)

// define the regex for a UUID once up-front
var _jester_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SuggestionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SuggestionResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPredictions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuggestionResponseValidationError{
					field:  fmt.Sprintf("Predictions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestionResponseValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SuggestionResponseValidationError is the validation error returned by
// SuggestionResponse.Validate if the designated constraints aren't met.
type SuggestionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionResponseValidationError) ErrorName() string {
	return "SuggestionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionResponseValidationError{}

// Validate checks the field values on SuggestionOptions with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SuggestionOptions) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SuggestionLimit

	// no validation rules for MinConfidence

	return nil
}

// SuggestionOptionsValidationError is the validation error returned by
// SuggestionOptions.Validate if the designated constraints aren't met.
type SuggestionOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionOptionsValidationError) ErrorName() string {
	return "SuggestionOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionOptionsValidationError{}

// Validate checks the field values on SuggestionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SuggestionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Type

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SuggestionRequestValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SuggestionRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SuggestionRequestValidationError is the validation error returned by
// SuggestionRequest.Validate if the designated constraints aren't met.
type SuggestionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestionRequestValidationError) ErrorName() string {
	return "SuggestionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestionRequestValidationError{}
