// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package suggester

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SuggesterClient is the client API for Suggester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuggesterClient interface {
	// Suggest target values for some input using a dataset, returning an empty result if no model exists
	Suggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error)
	// Suggest target values for multiple inputs using a dataset, returning an empty result if no model exists
	BatchSuggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error)
	// Suggest target values for multiple inputs using the most recently trained model in a dataset
	ModelBatchSuggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error)
}

type suggesterClient struct {
	cc grpc.ClientConnInterface
}

func NewSuggesterClient(cc grpc.ClientConnInterface) SuggesterClient {
	return &suggesterClient{cc}
}

func (c *suggesterClient) Suggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error) {
	out := new(SuggestResponse)
	err := c.cc.Invoke(ctx, "/asgt.v2alpha.suggester.Suggester/Suggest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggesterClient) BatchSuggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error) {
	out := new(SuggestResponse)
	err := c.cc.Invoke(ctx, "/asgt.v2alpha.suggester.Suggester/BatchSuggest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggesterClient) ModelBatchSuggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error) {
	out := new(SuggestResponse)
	err := c.cc.Invoke(ctx, "/asgt.v2alpha.suggester.Suggester/ModelBatchSuggest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuggesterServer is the server API for Suggester service.
// All implementations must embed UnimplementedSuggesterServer
// for forward compatibility
type SuggesterServer interface {
	// Suggest target values for some input using a dataset, returning an empty result if no model exists
	Suggest(context.Context, *SuggestRequest) (*SuggestResponse, error)
	// Suggest target values for multiple inputs using a dataset, returning an empty result if no model exists
	BatchSuggest(context.Context, *SuggestRequest) (*SuggestResponse, error)
	// Suggest target values for multiple inputs using the most recently trained model in a dataset
	ModelBatchSuggest(context.Context, *SuggestRequest) (*SuggestResponse, error)
	mustEmbedUnimplementedSuggesterServer()
}

// UnimplementedSuggesterServer must be embedded to have forward compatible implementations.
type UnimplementedSuggesterServer struct {
}

func (*UnimplementedSuggesterServer) Suggest(context.Context, *SuggestRequest) (*SuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suggest not implemented")
}
func (*UnimplementedSuggesterServer) BatchSuggest(context.Context, *SuggestRequest) (*SuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSuggest not implemented")
}
func (*UnimplementedSuggesterServer) ModelBatchSuggest(context.Context, *SuggestRequest) (*SuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelBatchSuggest not implemented")
}
func (*UnimplementedSuggesterServer) mustEmbedUnimplementedSuggesterServer() {}

func RegisterSuggesterServer(s *grpc.Server, srv SuggesterServer) {
	s.RegisterService(&_Suggester_serviceDesc, srv)
}

func _Suggester_Suggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggesterServer).Suggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.v2alpha.suggester.Suggester/Suggest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggesterServer).Suggest(ctx, req.(*SuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suggester_BatchSuggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggesterServer).BatchSuggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.v2alpha.suggester.Suggester/BatchSuggest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggesterServer).BatchSuggest(ctx, req.(*SuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suggester_ModelBatchSuggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggesterServer).ModelBatchSuggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.v2alpha.suggester.Suggester/ModelBatchSuggest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggesterServer).ModelBatchSuggest(ctx, req.(*SuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Suggester_serviceDesc = grpc.ServiceDesc{
	ServiceName: "asgt.v2alpha.suggester.Suggester",
	HandlerType: (*SuggesterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Suggest",
			Handler:    _Suggester_Suggest_Handler,
		},
		{
			MethodName: "BatchSuggest",
			Handler:    _Suggester_BatchSuggest_Handler,
		},
		{
			MethodName: "ModelBatchSuggest",
			Handler:    _Suggester_ModelBatchSuggest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "asgt/v2alpha/suggester.proto",
}
