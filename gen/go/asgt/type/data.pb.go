// Code generated by protoc-gen-go. DO NOT EDIT.
// source: asgt/type/data.proto

package _type

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Invoice struct {
	IssueDate *timestamp.Timestamp `protobuf:"bytes,1,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	// supplier of the invoice. Used in electronic-invoice-line requests.
	Supplier *Supplier `protobuf:"bytes,2,opt,name=supplier,proto3" json:"supplier,omitempty"`
	// reference to the customer. Used in electronic-invoice-line requests.
	CustomerRef string `protobuf:"bytes,3,opt,name=customer_ref,json=customerRef,proto3" json:"customer_ref,omitempty"`
	// invoice text from the SmartScan product. Used in scanned-invoice requests.
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// name of the currency as a string. Used in electronic-invoice-line requests.
	Currency string `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	// total of the invoice. Used in electronic-invoice-line requests.
	Total                float32  `protobuf:"fixed32,7,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Invoice) Reset()         { *m = Invoice{} }
func (m *Invoice) String() string { return proto.CompactTextString(m) }
func (*Invoice) ProtoMessage()    {}
func (*Invoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_75fe01dbf4b9a5ba, []int{0}
}
func (m *Invoice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Invoice.Unmarshal(m, b)
}
func (m *Invoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Invoice.Marshal(b, m, deterministic)
}
func (dst *Invoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Invoice.Merge(dst, src)
}
func (m *Invoice) XXX_Size() int {
	return xxx_messageInfo_Invoice.Size(m)
}
func (m *Invoice) XXX_DiscardUnknown() {
	xxx_messageInfo_Invoice.DiscardUnknown(m)
}

var xxx_messageInfo_Invoice proto.InternalMessageInfo

func (m *Invoice) GetIssueDate() *timestamp.Timestamp {
	if m != nil {
		return m.IssueDate
	}
	return nil
}

func (m *Invoice) GetSupplier() *Supplier {
	if m != nil {
		return m.Supplier
	}
	return nil
}

func (m *Invoice) GetCustomerRef() string {
	if m != nil {
		return m.CustomerRef
	}
	return ""
}

func (m *Invoice) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Invoice) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Invoice) GetTotal() float32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type InvoiceLine struct {
	// text of the invoice line. Used in electronic-invoice-line requests.
	Text string `protobuf:"bytes,8,opt,name=text,proto3" json:"text,omitempty"`
	// id of the product (item). Used in electronic-invoice-line requests.
	ItemId               string   `protobuf:"bytes,9,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvoiceLine) Reset()         { *m = InvoiceLine{} }
func (m *InvoiceLine) String() string { return proto.CompactTextString(m) }
func (*InvoiceLine) ProtoMessage()    {}
func (*InvoiceLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_75fe01dbf4b9a5ba, []int{1}
}
func (m *InvoiceLine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvoiceLine.Unmarshal(m, b)
}
func (m *InvoiceLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvoiceLine.Marshal(b, m, deterministic)
}
func (dst *InvoiceLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvoiceLine.Merge(dst, src)
}
func (m *InvoiceLine) XXX_Size() int {
	return xxx_messageInfo_InvoiceLine.Size(m)
}
func (m *InvoiceLine) XXX_DiscardUnknown() {
	xxx_messageInfo_InvoiceLine.DiscardUnknown(m)
}

var xxx_messageInfo_InvoiceLine proto.InternalMessageInfo

func (m *InvoiceLine) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *InvoiceLine) GetItemId() string {
	if m != nil {
		return m.ItemId
	}
	return ""
}

type Supplier struct {
	//  id of the supplier; not nullable
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name of the supplier
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// global id of the supplier
	GlobalId             string   `protobuf:"bytes,5,opt,name=global_id,json=globalId,proto3" json:"global_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Supplier) Reset()         { *m = Supplier{} }
func (m *Supplier) String() string { return proto.CompactTextString(m) }
func (*Supplier) ProtoMessage()    {}
func (*Supplier) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_75fe01dbf4b9a5ba, []int{2}
}
func (m *Supplier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Supplier.Unmarshal(m, b)
}
func (m *Supplier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Supplier.Marshal(b, m, deterministic)
}
func (dst *Supplier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Supplier.Merge(dst, src)
}
func (m *Supplier) XXX_Size() int {
	return xxx_messageInfo_Supplier.Size(m)
}
func (m *Supplier) XXX_DiscardUnknown() {
	xxx_messageInfo_Supplier.DiscardUnknown(m)
}

var xxx_messageInfo_Supplier proto.InternalMessageInfo

func (m *Supplier) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Supplier) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Supplier) GetGlobalId() string {
	if m != nil {
		return m.GlobalId
	}
	return ""
}

type Transaction struct {
	// text of the bank transaction. Used in bank requests.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// amount of the transaction. Used in bank requests.
	Amount               float32  `protobuf:"fixed32,2,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_75fe01dbf4b9a5ba, []int{3}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (dst *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(dst, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Transaction) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type Data struct {
	// Transaction-level information; at this time used only with bank transactions
	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// Invoice-level information for e-invoices and scanned invoices and receipts
	Invoice *Invoice `protobuf:"bytes,2,opt,name=invoice,proto3" json:"invoice,omitempty"`
	// Line-level information for e-invoices; use one sample per invoice line
	InvoiceLine          *InvoiceLine `protobuf:"bytes,3,opt,name=invoice_line,json=invoiceLine,proto3" json:"invoice_line,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_75fe01dbf4b9a5ba, []int{4}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (dst *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(dst, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *Data) GetInvoice() *Invoice {
	if m != nil {
		return m.Invoice
	}
	return nil
}

func (m *Data) GetInvoiceLine() *InvoiceLine {
	if m != nil {
		return m.InvoiceLine
	}
	return nil
}

func init() {
	proto.RegisterType((*Invoice)(nil), "asgt.type.Invoice")
	proto.RegisterType((*InvoiceLine)(nil), "asgt.type.InvoiceLine")
	proto.RegisterType((*Supplier)(nil), "asgt.type.Supplier")
	proto.RegisterType((*Transaction)(nil), "asgt.type.Transaction")
	proto.RegisterType((*Data)(nil), "asgt.type.Data")
}

func init() { proto.RegisterFile("asgt/type/data.proto", fileDescriptor_data_75fe01dbf4b9a5ba) }

var fileDescriptor_data_75fe01dbf4b9a5ba = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0xcd, 0xce, 0x93, 0x40,
	0x14, 0x0d, 0xc8, 0xc7, 0xcf, 0xe5, 0x8b, 0x8b, 0xb1, 0xa9, 0xa4, 0x2e, 0xac, 0xac, 0xba, 0x30,
	0x90, 0xe8, 0xc6, 0xba, 0x34, 0xdd, 0x34, 0xba, 0x1a, 0xbb, 0x72, 0x43, 0xa6, 0x70, 0x4b, 0x26,
	0x81, 0x19, 0x02, 0x17, 0x63, 0x1f, 0xc9, 0x97, 0xf2, 0x59, 0x0c, 0xc3, 0x4f, 0xf9, 0x76, 0x73,
	0xce, 0x3d, 0x73, 0xe6, 0x70, 0x2e, 0xb0, 0x11, 0x5d, 0x49, 0x29, 0xdd, 0x1b, 0x4c, 0x0b, 0x41,
	0x22, 0x69, 0x5a, 0x4d, 0x9a, 0x05, 0x03, 0x9b, 0x0c, 0xec, 0xee, 0x7d, 0xa9, 0x75, 0x59, 0x61,
	0x6a, 0x06, 0xd7, 0xfe, 0x96, 0x92, 0xac, 0xb1, 0x23, 0x51, 0x37, 0xa3, 0x36, 0xfe, 0x67, 0x81,
	0x77, 0x56, 0xbf, 0xb5, 0xcc, 0x91, 0x1d, 0x01, 0x64, 0xd7, 0xf5, 0x98, 0x15, 0x82, 0x30, 0xb2,
	0xf6, 0xd6, 0x21, 0xfc, 0xb4, 0x4b, 0x46, 0x87, 0x64, 0x76, 0x48, 0x2e, 0xb3, 0x03, 0x0f, 0x8c,
	0xfa, 0x24, 0x08, 0x59, 0x0a, 0x7e, 0xd7, 0x37, 0x4d, 0x25, 0xb1, 0x8d, 0x6c, 0x73, 0xf1, 0x4d,
	0xb2, 0xa4, 0x48, 0x7e, 0x4e, 0x23, 0xbe, 0x88, 0xd8, 0x07, 0x78, 0xce, 0xfb, 0x8e, 0x74, 0x8d,
	0x6d, 0xd6, 0xe2, 0x2d, 0x7a, 0xb5, 0xb7, 0x0e, 0x01, 0x0f, 0x67, 0x8e, 0xe3, 0x8d, 0x31, 0x70,
	0x08, 0xff, 0x50, 0xe4, 0x98, 0x91, 0x39, 0xb3, 0x1d, 0xf8, 0x79, 0xdf, 0xb6, 0xa8, 0xf2, 0x7b,
	0xe4, 0x1a, 0x7e, 0xc1, 0x6c, 0x03, 0x4f, 0xa4, 0x49, 0x54, 0x91, 0xb7, 0xb7, 0x0e, 0x36, 0x1f,
	0x41, 0xfc, 0x15, 0xc2, 0xe9, 0xfb, 0x7e, 0x48, 0x85, 0x8b, 0xa9, 0xbf, 0x32, 0x7d, 0x0b, 0x9e,
	0x24, 0xac, 0x33, 0x59, 0x44, 0x81, 0xa1, 0xdd, 0x01, 0x9e, 0x8b, 0xf8, 0x3b, 0xf8, 0x73, 0x74,
	0xf6, 0x1a, 0x6c, 0x59, 0x98, 0x52, 0x02, 0x6e, 0xcb, 0x62, 0x30, 0x52, 0xa2, 0xc6, 0x39, 0xdd,
	0x70, 0x66, 0xef, 0x20, 0x28, 0x2b, 0x7d, 0x15, 0xd5, 0x60, 0xf5, 0x34, 0xc6, 0x1b, 0x89, 0x73,
	0x11, 0x1f, 0x21, 0xbc, 0xb4, 0x42, 0x75, 0x22, 0x27, 0xa9, 0xd5, 0x12, 0xc4, 0x5a, 0x05, 0xd9,
	0x82, 0x2b, 0x6a, 0xdd, 0x2b, 0x32, 0x1d, 0xda, 0x7c, 0x42, 0xf1, 0x5f, 0x0b, 0x9c, 0x93, 0x20,
	0xc1, 0xbe, 0x40, 0x48, 0x0f, 0x8f, 0x69, 0x45, 0xdb, 0x55, 0xd3, 0xab, 0x17, 0xf8, 0x5a, 0xca,
	0x3e, 0x82, 0x27, 0xc7, 0x1a, 0xa6, 0xfd, 0xb0, 0xd5, 0xad, 0xa9, 0x20, 0x3e, 0x4b, 0xd8, 0x11,
	0x9e, 0xa7, 0x63, 0x56, 0x49, 0x85, 0x66, 0x3b, 0x2f, 0x1f, 0x5a, 0x75, 0xca, 0x43, 0xf9, 0x00,
	0xdf, 0xdc, 0x5f, 0xce, 0x20, 0xb8, 0xba, 0xe6, 0x87, 0xf9, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0xff,
	0x08, 0x44, 0x76, 0x2b, 0xa3, 0x02, 0x00, 0x00,
}
