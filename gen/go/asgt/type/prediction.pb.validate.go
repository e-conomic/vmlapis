// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: asgt/type/prediction.proto

package asgttype

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _prediction_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Confidence with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Confidence) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Level

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfidenceValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ConfidenceValidationError is the validation error returned by
// Confidence.Validate if the designated constraints aren't met.
type ConfidenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfidenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfidenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfidenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfidenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfidenceValidationError) ErrorName() string { return "ConfidenceValidationError" }

// Error satisfies the builtin error interface
func (e ConfidenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfidence.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfidenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfidenceValidationError{}

// Validate checks the field values on Prediction with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Prediction) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTargets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PredictionValidationError{
					field:  fmt.Sprintf("Targets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PredictionValidationError is the validation error returned by
// Prediction.Validate if the designated constraints aren't met.
type PredictionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PredictionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PredictionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PredictionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PredictionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PredictionValidationError) ErrorName() string { return "PredictionValidationError" }

// Error satisfies the builtin error interface
func (e PredictionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrediction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PredictionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PredictionValidationError{}

// Validate checks the field values on Prediction_Target with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Prediction_Target) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	for idx, item := range m.GetCandidates() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Prediction_TargetValidationError{
					field:  fmt.Sprintf("Candidates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// Prediction_TargetValidationError is the validation error returned by
// Prediction_Target.Validate if the designated constraints aren't met.
type Prediction_TargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Prediction_TargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Prediction_TargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Prediction_TargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Prediction_TargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Prediction_TargetValidationError) ErrorName() string {
	return "Prediction_TargetValidationError"
}

// Error satisfies the builtin error interface
func (e Prediction_TargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrediction_Target.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Prediction_TargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Prediction_TargetValidationError{}

// Validate checks the field values on Prediction_Target_Candidate with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Prediction_Target_Candidate) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	if v, ok := interface{}(m.GetConfidence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Prediction_Target_CandidateValidationError{
				field:  "Confidence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// Prediction_Target_CandidateValidationError is the validation error returned
// by Prediction_Target_Candidate.Validate if the designated constraints
// aren't met.
type Prediction_Target_CandidateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Prediction_Target_CandidateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Prediction_Target_CandidateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Prediction_Target_CandidateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Prediction_Target_CandidateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Prediction_Target_CandidateValidationError) ErrorName() string {
	return "Prediction_Target_CandidateValidationError"
}

// Error satisfies the builtin error interface
func (e Prediction_Target_CandidateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrediction_Target_Candidate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Prediction_Target_CandidateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Prediction_Target_CandidateValidationError{}
