// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: asgt/type/train_model_event.proto

package asgttype

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on TrainModelEvent with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TrainModelEvent) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDataset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrainModelEventValidationError{
				field:  "Dataset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ModelVersion

	// no validation rules for Status

	// no validation rules for StatusMessage

	for idx, item := range m.GetArtifacts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrainModelEventValidationError{
					field:  fmt.Sprintf("Artifacts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TrainModelEventValidationError is the validation error returned by
// TrainModelEvent.Validate if the designated constraints aren't met.
type TrainModelEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainModelEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainModelEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainModelEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainModelEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainModelEventValidationError) ErrorName() string { return "TrainModelEventValidationError" }

// Error satisfies the builtin error interface
func (e TrainModelEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainModelEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainModelEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainModelEventValidationError{}

// Validate checks the field values on TrainModelEvent_Artifact with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TrainModelEvent_Artifact) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for Path

	return nil
}

// TrainModelEvent_ArtifactValidationError is the validation error returned by
// TrainModelEvent_Artifact.Validate if the designated constraints aren't met.
type TrainModelEvent_ArtifactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainModelEvent_ArtifactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainModelEvent_ArtifactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainModelEvent_ArtifactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainModelEvent_ArtifactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainModelEvent_ArtifactValidationError) ErrorName() string {
	return "TrainModelEvent_ArtifactValidationError"
}

// Error satisfies the builtin error interface
func (e TrainModelEvent_ArtifactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainModelEvent_Artifact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainModelEvent_ArtifactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainModelEvent_ArtifactValidationError{}
