// Code generated by protoc-gen-go. DO NOT EDIT.
// source: asgt/dataservice/v1alpha1/bq_dataset.proto

package dataservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _type "github.com/e-conomic/vmlapis/gen/go/asgt/type"
import _ "github.com/e-conomic/vmlapis/gen/go/gen_bq_schema"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Dataset_Type int32

const (
	Dataset_BANK_TRANSACTION Dataset_Type = 0
	Dataset_SCANNED_INVOICE  Dataset_Type = 1
	Dataset_INVOICE_LINE     Dataset_Type = 2
)

var Dataset_Type_name = map[int32]string{
	0: "BANK_TRANSACTION",
	1: "SCANNED_INVOICE",
	2: "INVOICE_LINE",
}
var Dataset_Type_value = map[string]int32{
	"BANK_TRANSACTION": 0,
	"SCANNED_INVOICE":  1,
	"INVOICE_LINE":     2,
}

func (x Dataset_Type) String() string {
	return proto.EnumName(Dataset_Type_name, int32(x))
}
func (Dataset_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bq_dataset_2b3281f1e8acbb03, []int{0, 0}
}

// Dataset BQ schema
type Dataset struct {
	Consumer             string                 `protobuf:"bytes,1,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 Dataset_Type           `protobuf:"varint,3,opt,name=type,proto3,enum=asgt.dataservice.v1alpha1.Dataset_Type" json:"type,omitempty"`
	Targets              []string               `protobuf:"bytes,4,rep,name=targets,proto3" json:"targets,omitempty"`
	RetentionPolicy      *_type.RetentionPolicy `protobuf:"bytes,5,opt,name=retention_policy,json=retentionPolicy,proto3" json:"retention_policy,omitempty"`
	Hash                 string                 `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Dataset) Reset()         { *m = Dataset{} }
func (m *Dataset) String() string { return proto.CompactTextString(m) }
func (*Dataset) ProtoMessage()    {}
func (*Dataset) Descriptor() ([]byte, []int) {
	return fileDescriptor_bq_dataset_2b3281f1e8acbb03, []int{0}
}
func (m *Dataset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dataset.Unmarshal(m, b)
}
func (m *Dataset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dataset.Marshal(b, m, deterministic)
}
func (dst *Dataset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataset.Merge(dst, src)
}
func (m *Dataset) XXX_Size() int {
	return xxx_messageInfo_Dataset.Size(m)
}
func (m *Dataset) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataset.DiscardUnknown(m)
}

var xxx_messageInfo_Dataset proto.InternalMessageInfo

func (m *Dataset) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

func (m *Dataset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Dataset) GetType() Dataset_Type {
	if m != nil {
		return m.Type
	}
	return Dataset_BANK_TRANSACTION
}

func (m *Dataset) GetTargets() []string {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *Dataset) GetRetentionPolicy() *_type.RetentionPolicy {
	if m != nil {
		return m.RetentionPolicy
	}
	return nil
}

func (m *Dataset) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*Dataset)(nil), "asgt.dataservice.v1alpha1.Dataset")
	proto.RegisterEnum("asgt.dataservice.v1alpha1.Dataset_Type", Dataset_Type_name, Dataset_Type_value)
}

func init() {
	proto.RegisterFile("asgt/dataservice/v1alpha1/bq_dataset.proto", fileDescriptor_bq_dataset_2b3281f1e8acbb03)
}

var fileDescriptor_bq_dataset_2b3281f1e8acbb03 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xcf, 0x6f, 0xaa, 0x40,
	0x18, 0x7c, 0x20, 0xfe, 0x5a, 0x9f, 0x4f, 0xb2, 0xaf, 0x07, 0x34, 0x3d, 0x50, 0x2f, 0x25, 0x3d,
	0x40, 0xb4, 0xb7, 0x5e, 0x0c, 0xa0, 0x07, 0x52, 0x83, 0x0d, 0x9a, 0x1e, 0x7a, 0xd9, 0x2c, 0xb8,
	0x15, 0x12, 0x04, 0x64, 0xb7, 0x26, 0xfe, 0xbb, 0x3d, 0xfa, 0x57, 0x34, 0x0b, 0x62, 0xb4, 0x89,
	0xc7, 0x9d, 0x6f, 0x66, 0xbe, 0x99, 0x6f, 0xc1, 0x13, 0xa6, 0x1b, 0x66, 0xac, 0x31, 0xc3, 0x94,
	0xe4, 0xfb, 0x28, 0x20, 0xc6, 0x7e, 0x84, 0xe3, 0x2c, 0xc4, 0x23, 0xc3, 0xdf, 0xa1, 0x12, 0x67,
	0x7a, 0x96, 0xa7, 0x2c, 0x85, 0x7d, 0xce, 0xd5, 0x2f, 0xb8, 0x7a, 0xc5, 0x1d, 0xa8, 0x85, 0x0d,
	0x3b, 0x64, 0xc4, 0xc8, 0x09, 0x23, 0x09, 0x8b, 0xd2, 0x04, 0x65, 0x69, 0x1c, 0x05, 0x87, 0x52,
	0x3c, 0xb8, 0xdf, 0x90, 0x04, 0xf9, 0x3b, 0x44, 0x83, 0x90, 0x6c, 0x31, 0x37, 0xff, 0x8c, 0x48,
	0xbc, 0xbe, 0x39, 0x65, 0xd8, 0x8f, 0x49, 0x39, 0x1d, 0x7e, 0x8b, 0xa0, 0x39, 0x2d, 0xa3, 0xc0,
	0x07, 0xd0, 0x0a, 0xd2, 0x84, 0x7e, 0x6d, 0x49, 0xae, 0x08, 0xaa, 0xa0, 0xb5, 0xad, 0xfa, 0x71,
	0x22, 0xb6, 0x04, 0xef, 0x0c, 0xc3, 0x3e, 0x90, 0x12, 0xbc, 0x25, 0x8a, 0x78, 0x39, 0x2e, 0x20,
	0x68, 0x01, 0x89, 0x87, 0x54, 0x6a, 0xaa, 0xa0, 0xfd, 0x1b, 0x3f, 0xea, 0x37, 0x1b, 0xe9, 0xa7,
	0x7d, 0xfa, 0xea, 0x90, 0x91, 0xb3, 0x07, 0xd7, 0x42, 0x05, 0x34, 0x19, 0xce, 0x37, 0x84, 0x51,
	0x45, 0x52, 0x6b, 0x5a, 0xdb, 0xab, 0x9e, 0x70, 0x0e, 0xe4, 0xdf, 0xed, 0x95, 0xba, 0x2a, 0x68,
	0x9d, 0xf1, 0xa0, 0xdc, 0xc4, 0xf5, 0xba, 0x57, 0x51, 0xde, 0x0a, 0x46, 0x65, 0xde, 0xcb, 0xaf,
	0x71, 0x5e, 0x23, 0xc4, 0x34, 0x54, 0x1a, 0x57, 0x35, 0x38, 0x34, 0xb4, 0x81, 0xc4, 0x73, 0xc1,
	0x3b, 0x20, 0x5b, 0xa6, 0xfb, 0x8a, 0x56, 0x9e, 0xe9, 0x2e, 0x4d, 0x7b, 0xe5, 0x2c, 0x5c, 0xf9,
	0x0f, 0xfc, 0x0f, 0x7a, 0x4b, 0xdb, 0x74, 0xdd, 0xd9, 0x14, 0x39, 0xee, 0xfb, 0xc2, 0xb1, 0x67,
	0xb2, 0x00, 0x65, 0xf0, 0xf7, 0xf4, 0x40, 0x73, 0xc7, 0x9d, 0xc9, 0xe2, 0x4b, 0xf7, 0x38, 0x01,
	0xa0, 0x75, 0xfa, 0x62, 0x6a, 0x75, 0x3f, 0x3a, 0x17, 0x87, 0xf0, 0x1b, 0xc5, 0xe9, 0x9f, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xcf, 0x48, 0x9f, 0x21, 0x02, 0x00, 0x00,
}
