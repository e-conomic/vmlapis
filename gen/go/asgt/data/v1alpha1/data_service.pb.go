// Code generated by protoc-gen-go. DO NOT EDIT.
// source: asgt/data/v1alpha1/data_service.proto

package dataservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataClient interface {
	CreateDataset(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AppendData(ctx context.Context, in *AppendDataRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteData(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
}

type dataClient struct {
	cc *grpc.ClientConn
}

func NewDataClient(cc *grpc.ClientConn) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) CreateDataset(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/asgt.dataservice.v1alpha1.Data/CreateDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) AppendData(ctx context.Context, in *AppendDataRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/asgt.dataservice.v1alpha1.Data/AppendData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteData(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/asgt.dataservice.v1alpha1.Data/DeleteData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, "/asgt.dataservice.v1alpha1.Data/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServer is the server API for Data service.
type DataServer interface {
	CreateDataset(context.Context, *CreateRequest) (*empty.Empty, error)
	AppendData(context.Context, *AppendDataRequest) (*empty.Empty, error)
	DeleteData(context.Context, *DeleteRequest) (*empty.Empty, error)
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
}

func RegisterDataServer(s *grpc.Server, srv DataServer) {
	s.RegisterService(&_Data_serviceDesc, srv)
}

func _Data_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.dataservice.v1alpha1.Data/CreateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateDataset(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_AppendData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).AppendData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.dataservice.v1alpha1.Data/AppendData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).AppendData(ctx, req.(*AppendDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.dataservice.v1alpha1.Data/DeleteData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteData(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.dataservice.v1alpha1.Data/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Data_serviceDesc = grpc.ServiceDesc{
	ServiceName: "asgt.dataservice.v1alpha1.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDataset",
			Handler:    _Data_CreateDataset_Handler,
		},
		{
			MethodName: "AppendData",
			Handler:    _Data_AppendData_Handler,
		},
		{
			MethodName: "DeleteData",
			Handler:    _Data_DeleteData_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Data_GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "asgt/data/v1alpha1/data_service.proto",
}

func init() {
	proto.RegisterFile("asgt/data/v1alpha1/data_service.proto", fileDescriptor_data_service_0917d31ffc1f4f74)
}

var fileDescriptor_data_service_0917d31ffc1f4f74 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xb1, 0x4a, 0x33, 0x41,
	0x10, 0xc7, 0xb9, 0x8f, 0xf0, 0x09, 0x2b, 0x69, 0xae, 0x10, 0x8c, 0x4a, 0xe0, 0x50, 0xd0, 0x23,
	0xec, 0x11, 0x53, 0x88, 0xd7, 0xa9, 0x11, 0xb1, 0xb5, 0xb4, 0x09, 0x93, 0x64, 0x12, 0x0f, 0x92,
	0xdd, 0xf5, 0x76, 0x12, 0x88, 0x92, 0xc6, 0x5a, 0x2b, 0x2b, 0x1f, 0xc6, 0xa7, 0xf0, 0x15, 0x7c,
	0x10, 0xd9, 0xdd, 0x3b, 0xcf, 0xe2, 0x72, 0xa6, 0xb0, 0x9c, 0xcc, 0x2f, 0xf3, 0xff, 0xcd, 0xdc,
	0xb2, 0x03, 0xd0, 0x63, 0x8a, 0x86, 0x40, 0x10, 0xcd, 0xdb, 0x30, 0x51, 0x77, 0xd0, 0xb6, 0x55,
	0x4f, 0x63, 0x3a, 0x4f, 0x06, 0xc8, 0x55, 0x2a, 0x49, 0xfa, 0xdb, 0x06, 0xe3, 0xa6, 0x91, 0xff,
	0x9e, 0xd3, 0x8d, 0x66, 0xc9, 0x84, 0x41, 0x8a, 0x40, 0xd9, 0x7f, 0x4b, 0x81, 0x21, 0x4e, 0xf0,
	0x1b, 0xd8, 0x2b, 0x01, 0x12, 0x31, 0x92, 0x59, 0x7b, 0x77, 0x2c, 0xe5, 0x78, 0x82, 0x11, 0xa8,
	0x24, 0x02, 0x21, 0x24, 0x01, 0x25, 0x52, 0xe8, 0xac, 0xbb, 0x93, 0x75, 0x6d, 0xd5, 0x9f, 0x8d,
	0x22, 0x9c, 0x2a, 0x5a, 0xb8, 0xe6, 0xf1, 0x7b, 0x8d, 0xd5, 0xba, 0x40, 0xe0, 0x3f, 0x7b, 0xac,
	0x7e, 0x61, 0xa5, 0xba, 0x76, 0x07, 0xf2, 0x0f, 0xf9, 0xca, 0x95, 0xb8, 0x23, 0x6f, 0xf0, 0x7e,
	0x86, 0x9a, 0x1a, 0x5b, 0xdc, 0x45, 0xf0, 0x3c, 0x82, 0x5f, 0x9a, 0x88, 0xe0, 0xf4, 0xe9, 0xe3,
	0xf3, 0xf5, 0x5f, 0x27, 0xe0, 0x85, 0xf5, 0xa3, 0x1b, 0x47, 0x3d, 0x5a, 0x28, 0x5c, 0x16, 0xa5,
	0x80, 0x29, 0x2e, 0x63, 0x77, 0x95, 0xd8, 0x0b, 0xfd, 0x17, 0x8f, 0xb1, 0x33, 0xa5, 0x50, 0x0c,
	0xad, 0x5d, 0xab, 0xc2, 0xa5, 0xc0, 0xfe, 0xdc, 0x07, 0xec, 0x68, 0xe3, 0xf3, 0xc0, 0x58, 0xd7,
	0x7e, 0x11, 0xab, 0x53, 0x75, 0x1a, 0x87, 0xfd, 0xa6, 0x12, 0x5a, 0x95, 0xfd, 0xa0, 0xb9, 0x4a,
	0x25, 0x76, 0x0f, 0xc0, 0x64, 0xbf, 0x79, 0x6c, 0xe3, 0x0a, 0xe9, 0x5a, 0x8c, 0xa4, 0x7f, 0x54,
	0x91, 0x9c, 0x31, 0x79, 0x74, 0xb8, 0x0e, 0xaa, 0x95, 0x14, 0x1a, 0x83, 0x13, 0xab, 0xd3, 0x0e,
	0x5a, 0xeb, 0x5e, 0xc6, 0xbc, 0xbe, 0xd8, 0x0b, 0xcf, 0xeb, 0xb7, 0x9b, 0x3f, 0x02, 0xfa, 0xff,
	0xed, 0x9a, 0x9d, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x77, 0xcb, 0x06, 0x07, 0x35, 0x03, 0x00,
	0x00,
}
