// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: asgt/v2/dataset_service.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetDatasetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDatasetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDatasetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDatasetRequestMultiError, or nil if none found.
func (m *GetDatasetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDatasetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetDatasetName()) > 256 {
		err := GetDatasetRequestValidationError{
			field:  "DatasetName",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetDatasetRequest_DatasetName_Pattern.MatchString(m.GetDatasetName()) {
		err := GetDatasetRequestValidationError{
			field:  "DatasetName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9.][A-Za-z0-9_.>-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDatasetRequestMultiError(errors)
	}

	return nil
}

// GetDatasetRequestMultiError is an error wrapping multiple validation errors
// returned by GetDatasetRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDatasetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDatasetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDatasetRequestMultiError) AllErrors() []error { return m }

// GetDatasetRequestValidationError is the validation error returned by
// GetDatasetRequest.Validate if the designated constraints aren't met.
type GetDatasetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDatasetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDatasetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDatasetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDatasetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDatasetRequestValidationError) ErrorName() string {
	return "GetDatasetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDatasetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDatasetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDatasetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDatasetRequestValidationError{}

var _GetDatasetRequest_DatasetName_Pattern = regexp.MustCompile("^[A-Za-z0-9.][A-Za-z0-9_.>-]*$")

// Validate checks the field values on CreateDatasetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDatasetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDatasetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDatasetRequestMultiError, or nil if none found.
func (m *CreateDatasetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDatasetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetDatasetName()) > 256 {
		err := CreateDatasetRequestValidationError{
			field:  "DatasetName",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateDatasetRequest_DatasetName_Pattern.MatchString(m.GetDatasetName()) {
		err := CreateDatasetRequestValidationError{
			field:  "DatasetName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9.][A-Za-z0-9_.>-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_CreateDatasetRequest_Tags_Unique := make(map[string]struct{}, len(m.GetTags()))

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if _, exists := _CreateDatasetRequest_Tags_Unique[item]; exists {
			err := CreateDatasetRequestValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateDatasetRequest_Tags_Unique[item] = struct{}{}
		}

		if len(item) > 64 {
			err := CreateDatasetRequestValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "value length must be at most 64 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_CreateDatasetRequest_Tags_Pattern.MatchString(item) {
			err := CreateDatasetRequestValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "value does not match regex pattern \"^[A-Za-z0-9\\\\s_.>-]*$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetRetentionPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDatasetRequestValidationError{
					field:  "RetentionPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDatasetRequestValidationError{
					field:  "RetentionPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetentionPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDatasetRequestValidationError{
				field:  "RetentionPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDatasetRequestMultiError(errors)
	}

	return nil
}

// CreateDatasetRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDatasetRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDatasetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDatasetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDatasetRequestMultiError) AllErrors() []error { return m }

// CreateDatasetRequestValidationError is the validation error returned by
// CreateDatasetRequest.Validate if the designated constraints aren't met.
type CreateDatasetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDatasetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDatasetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDatasetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDatasetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDatasetRequestValidationError) ErrorName() string {
	return "CreateDatasetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDatasetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDatasetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDatasetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDatasetRequestValidationError{}

var _CreateDatasetRequest_DatasetName_Pattern = regexp.MustCompile("^[A-Za-z0-9.][A-Za-z0-9_.>-]*$")

var _CreateDatasetRequest_Tags_Pattern = regexp.MustCompile("^[A-Za-z0-9\\s_.>-]*$")

// Validate checks the field values on CreateOrUpdateDatasetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateDatasetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateDatasetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdateDatasetRequestMultiError, or nil if none found.
func (m *CreateOrUpdateDatasetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateDatasetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetDatasetName()) > 256 {
		err := CreateOrUpdateDatasetRequestValidationError{
			field:  "DatasetName",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateOrUpdateDatasetRequest_DatasetName_Pattern.MatchString(m.GetDatasetName()) {
		err := CreateOrUpdateDatasetRequestValidationError{
			field:  "DatasetName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9.][A-Za-z0-9_.>-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrUpdateDatasetRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateDatasetRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateDatasetRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOrUpdateDatasetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateDatasetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateDatasetRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateDatasetRequestValidationError is the validation error returned
// by CreateOrUpdateDatasetRequest.Validate if the designated constraints
// aren't met.
type CreateOrUpdateDatasetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateDatasetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateDatasetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateDatasetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateDatasetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateDatasetRequestValidationError) ErrorName() string {
	return "CreateOrUpdateDatasetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateDatasetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateDatasetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateDatasetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateDatasetRequestValidationError{}

var _CreateOrUpdateDatasetRequest_DatasetName_Pattern = regexp.MustCompile("^[A-Za-z0-9.][A-Za-z0-9_.>-]*$")

// Validate checks the field values on DeleteDatasetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDatasetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDatasetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDatasetRequestMultiError, or nil if none found.
func (m *DeleteDatasetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDatasetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetDatasetName()) > 256 {
		err := DeleteDatasetRequestValidationError{
			field:  "DatasetName",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteDatasetRequest_DatasetName_Pattern.MatchString(m.GetDatasetName()) {
		err := DeleteDatasetRequestValidationError{
			field:  "DatasetName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9.][A-Za-z0-9_.>-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDatasetRequestMultiError(errors)
	}

	return nil
}

// DeleteDatasetRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDatasetRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDatasetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDatasetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDatasetRequestMultiError) AllErrors() []error { return m }

// DeleteDatasetRequestValidationError is the validation error returned by
// DeleteDatasetRequest.Validate if the designated constraints aren't met.
type DeleteDatasetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDatasetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDatasetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDatasetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDatasetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDatasetRequestValidationError) ErrorName() string {
	return "DeleteDatasetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDatasetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDatasetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDatasetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDatasetRequestValidationError{}

var _DeleteDatasetRequest_DatasetName_Pattern = regexp.MustCompile("^[A-Za-z0-9.][A-Za-z0-9_.>-]*$")

// Validate checks the field values on DeleteTagRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTagRequestMultiError, or nil if none found.
func (m *DeleteTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetTagName()) > 256 {
		err := DeleteTagRequestValidationError{
			field:  "TagName",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteTagRequest_TagName_Pattern.MatchString(m.GetTagName()) {
		err := DeleteTagRequestValidationError{
			field:  "TagName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9.][A-Za-z0-9_.>-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTagRequestMultiError(errors)
	}

	return nil
}

// DeleteTagRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTagRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTagRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTagRequestMultiError) AllErrors() []error { return m }

// DeleteTagRequestValidationError is the validation error returned by
// DeleteTagRequest.Validate if the designated constraints aren't met.
type DeleteTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTagRequestValidationError) ErrorName() string { return "DeleteTagRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTagRequestValidationError{}

var _DeleteTagRequest_TagName_Pattern = regexp.MustCompile("^[A-Za-z0-9.][A-Za-z0-9_.>-]*$")

// Validate checks the field values on CreateExampleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateExampleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateExampleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateExampleRequestMultiError, or nil if none found.
func (m *CreateExampleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateExampleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetDatasetName()) > 256 {
		err := CreateExampleRequestValidationError{
			field:  "DatasetName",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateExampleRequest_DatasetName_Pattern.MatchString(m.GetDatasetName()) {
		err := CreateExampleRequestValidationError{
			field:  "DatasetName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9.][A-Za-z0-9_.>-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExample()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateExampleRequestValidationError{
					field:  "Example",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateExampleRequestValidationError{
					field:  "Example",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExample()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateExampleRequestValidationError{
				field:  "Example",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateExampleRequestMultiError(errors)
	}

	return nil
}

// CreateExampleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateExampleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateExampleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateExampleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateExampleRequestMultiError) AllErrors() []error { return m }

// CreateExampleRequestValidationError is the validation error returned by
// CreateExampleRequest.Validate if the designated constraints aren't met.
type CreateExampleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateExampleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateExampleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateExampleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateExampleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateExampleRequestValidationError) ErrorName() string {
	return "CreateExampleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateExampleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateExampleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateExampleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateExampleRequestValidationError{}

var _CreateExampleRequest_DatasetName_Pattern = regexp.MustCompile("^[A-Za-z0-9.][A-Za-z0-9_.>-]*$")

// Validate checks the field values on CreateOrUpdateExampleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateExampleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateExampleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdateExampleRequestMultiError, or nil if none found.
func (m *CreateOrUpdateExampleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateExampleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetDatasetName()) > 256 {
		err := CreateOrUpdateExampleRequestValidationError{
			field:  "DatasetName",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateOrUpdateExampleRequest_DatasetName_Pattern.MatchString(m.GetDatasetName()) {
		err := CreateOrUpdateExampleRequestValidationError{
			field:  "DatasetName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9.][A-Za-z0-9_.>-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExample()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateExampleRequestValidationError{
					field:  "Example",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateExampleRequestValidationError{
					field:  "Example",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExample()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateExampleRequestValidationError{
				field:  "Example",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateExampleRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateExampleRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateExampleRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOrUpdateExampleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateExampleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateExampleRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateExampleRequestValidationError is the validation error returned
// by CreateOrUpdateExampleRequest.Validate if the designated constraints
// aren't met.
type CreateOrUpdateExampleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateExampleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateExampleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateExampleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateExampleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateExampleRequestValidationError) ErrorName() string {
	return "CreateOrUpdateExampleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateExampleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateExampleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateExampleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateExampleRequestValidationError{}

var _CreateOrUpdateExampleRequest_DatasetName_Pattern = regexp.MustCompile("^[A-Za-z0-9.][A-Za-z0-9_.>-]*$")

// Validate checks the field values on BatchCreateExampleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateExampleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateExampleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCreateExampleRequestMultiError, or nil if none found.
func (m *BatchCreateExampleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateExampleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetDatasetName()) > 256 {
		err := BatchCreateExampleRequestValidationError{
			field:  "DatasetName",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_BatchCreateExampleRequest_DatasetName_Pattern.MatchString(m.GetDatasetName()) {
		err := BatchCreateExampleRequestValidationError{
			field:  "DatasetName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9.][A-Za-z0-9_.>-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetExamples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateExampleRequestValidationError{
						field:  fmt.Sprintf("Examples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateExampleRequestValidationError{
						field:  fmt.Sprintf("Examples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateExampleRequestValidationError{
					field:  fmt.Sprintf("Examples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchCreateExampleRequestMultiError(errors)
	}

	return nil
}

// BatchCreateExampleRequestMultiError is an error wrapping multiple validation
// errors returned by BatchCreateExampleRequest.ValidateAll() if the
// designated constraints aren't met.
type BatchCreateExampleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateExampleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateExampleRequestMultiError) AllErrors() []error { return m }

// BatchCreateExampleRequestValidationError is the validation error returned by
// BatchCreateExampleRequest.Validate if the designated constraints aren't met.
type BatchCreateExampleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateExampleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateExampleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateExampleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateExampleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateExampleRequestValidationError) ErrorName() string {
	return "BatchCreateExampleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateExampleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateExampleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateExampleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateExampleRequestValidationError{}

var _BatchCreateExampleRequest_DatasetName_Pattern = regexp.MustCompile("^[A-Za-z0-9.][A-Za-z0-9_.>-]*$")

// Validate checks the field values on TruncateDatasetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TruncateDatasetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TruncateDatasetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TruncateDatasetRequestMultiError, or nil if none found.
func (m *TruncateDatasetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TruncateDatasetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetDatasetName()) > 256 {
		err := TruncateDatasetRequestValidationError{
			field:  "DatasetName",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_TruncateDatasetRequest_DatasetName_Pattern.MatchString(m.GetDatasetName()) {
		err := TruncateDatasetRequestValidationError{
			field:  "DatasetName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9.][A-Za-z0-9_.>-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TruncateDatasetRequestMultiError(errors)
	}

	return nil
}

// TruncateDatasetRequestMultiError is an error wrapping multiple validation
// errors returned by TruncateDatasetRequest.ValidateAll() if the designated
// constraints aren't met.
type TruncateDatasetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TruncateDatasetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TruncateDatasetRequestMultiError) AllErrors() []error { return m }

// TruncateDatasetRequestValidationError is the validation error returned by
// TruncateDatasetRequest.Validate if the designated constraints aren't met.
type TruncateDatasetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TruncateDatasetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TruncateDatasetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TruncateDatasetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TruncateDatasetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TruncateDatasetRequestValidationError) ErrorName() string {
	return "TruncateDatasetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TruncateDatasetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTruncateDatasetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TruncateDatasetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TruncateDatasetRequestValidationError{}

var _TruncateDatasetRequest_DatasetName_Pattern = regexp.MustCompile("^[A-Za-z0-9.][A-Za-z0-9_.>-]*$")

// Validate checks the field values on TrainingRequestOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrainingRequestOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainingRequestOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrainingRequestOptionsMultiError, or nil if none found.
func (m *TrainingRequestOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainingRequestOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := TrainingRequestOptionsValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TrainingRequestOptionsMultiError(errors)
	}

	return nil
}

// TrainingRequestOptionsMultiError is an error wrapping multiple validation
// errors returned by TrainingRequestOptions.ValidateAll() if the designated
// constraints aren't met.
type TrainingRequestOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainingRequestOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainingRequestOptionsMultiError) AllErrors() []error { return m }

// TrainingRequestOptionsValidationError is the validation error returned by
// TrainingRequestOptions.Validate if the designated constraints aren't met.
type TrainingRequestOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingRequestOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingRequestOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingRequestOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingRequestOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingRequestOptionsValidationError) ErrorName() string {
	return "TrainingRequestOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e TrainingRequestOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainingRequestOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingRequestOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingRequestOptionsValidationError{}

// Validate checks the field values on ModelRequestOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModelRequestOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelRequestOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelRequestOptionsMultiError, or nil if none found.
func (m *ModelRequestOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelRequestOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := ModelRequestOptionsValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ModelRequestOptionsMultiError(errors)
	}

	return nil
}

// ModelRequestOptionsMultiError is an error wrapping multiple validation
// errors returned by ModelRequestOptions.ValidateAll() if the designated
// constraints aren't met.
type ModelRequestOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelRequestOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelRequestOptionsMultiError) AllErrors() []error { return m }

// ModelRequestOptionsValidationError is the validation error returned by
// ModelRequestOptions.Validate if the designated constraints aren't met.
type ModelRequestOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelRequestOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelRequestOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelRequestOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelRequestOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelRequestOptionsValidationError) ErrorName() string {
	return "ModelRequestOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e ModelRequestOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelRequestOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelRequestOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelRequestOptionsValidationError{}

// Validate checks the field values on GetDatasetTrainingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDatasetTrainingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDatasetTrainingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDatasetTrainingsRequestMultiError, or nil if none found.
func (m *GetDatasetTrainingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDatasetTrainingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetDatasetName()) > 256 {
		err := GetDatasetTrainingsRequestValidationError{
			field:  "DatasetName",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetDatasetTrainingsRequest_DatasetName_Pattern.MatchString(m.GetDatasetName()) {
		err := GetDatasetTrainingsRequestValidationError{
			field:  "DatasetName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9.][A-Za-z0-9_.>-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDatasetTrainingsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDatasetTrainingsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDatasetTrainingsRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDatasetTrainingsRequestMultiError(errors)
	}

	return nil
}

// GetDatasetTrainingsRequestMultiError is an error wrapping multiple
// validation errors returned by GetDatasetTrainingsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDatasetTrainingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDatasetTrainingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDatasetTrainingsRequestMultiError) AllErrors() []error { return m }

// GetDatasetTrainingsRequestValidationError is the validation error returned
// by GetDatasetTrainingsRequest.Validate if the designated constraints aren't met.
type GetDatasetTrainingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDatasetTrainingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDatasetTrainingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDatasetTrainingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDatasetTrainingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDatasetTrainingsRequestValidationError) ErrorName() string {
	return "GetDatasetTrainingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDatasetTrainingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDatasetTrainingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDatasetTrainingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDatasetTrainingsRequestValidationError{}

var _GetDatasetTrainingsRequest_DatasetName_Pattern = regexp.MustCompile("^[A-Za-z0-9.][A-Za-z0-9_.>-]*$")

// Validate checks the field values on GetDatasetModelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDatasetModelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDatasetModelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDatasetModelsRequestMultiError, or nil if none found.
func (m *GetDatasetModelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDatasetModelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetDatasetName()) > 256 {
		err := GetDatasetModelsRequestValidationError{
			field:  "DatasetName",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetDatasetModelsRequest_DatasetName_Pattern.MatchString(m.GetDatasetName()) {
		err := GetDatasetModelsRequestValidationError{
			field:  "DatasetName",
			reason: "value does not match regex pattern \"^[A-Za-z0-9.][A-Za-z0-9_.>-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDatasetModelsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDatasetModelsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDatasetModelsRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDatasetModelsRequestMultiError(errors)
	}

	return nil
}

// GetDatasetModelsRequestMultiError is an error wrapping multiple validation
// errors returned by GetDatasetModelsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDatasetModelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDatasetModelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDatasetModelsRequestMultiError) AllErrors() []error { return m }

// GetDatasetModelsRequestValidationError is the validation error returned by
// GetDatasetModelsRequest.Validate if the designated constraints aren't met.
type GetDatasetModelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDatasetModelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDatasetModelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDatasetModelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDatasetModelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDatasetModelsRequestValidationError) ErrorName() string {
	return "GetDatasetModelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDatasetModelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDatasetModelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDatasetModelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDatasetModelsRequestValidationError{}

var _GetDatasetModelsRequest_DatasetName_Pattern = regexp.MustCompile("^[A-Za-z0-9.][A-Za-z0-9_.>-]*$")

// Validate checks the field values on GetTrainingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrainingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrainingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrainingsRequestMultiError, or nil if none found.
func (m *GetTrainingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrainingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTrainingsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTrainingsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTrainingsRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTrainingsRequestMultiError(errors)
	}

	return nil
}

// GetTrainingsRequestMultiError is an error wrapping multiple validation
// errors returned by GetTrainingsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTrainingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrainingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrainingsRequestMultiError) AllErrors() []error { return m }

// GetTrainingsRequestValidationError is the validation error returned by
// GetTrainingsRequest.Validate if the designated constraints aren't met.
type GetTrainingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrainingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrainingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrainingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrainingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrainingsRequestValidationError) ErrorName() string {
	return "GetTrainingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrainingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrainingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrainingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrainingsRequestValidationError{}

// Validate checks the field values on TrainingsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TrainingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrainingsResponseMultiError, or nil if none found.
func (m *TrainingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTrainings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TrainingsResponseValidationError{
						field:  fmt.Sprintf("Trainings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TrainingsResponseValidationError{
						field:  fmt.Sprintf("Trainings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrainingsResponseValidationError{
					field:  fmt.Sprintf("Trainings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TrainingsResponseMultiError(errors)
	}

	return nil
}

// TrainingsResponseMultiError is an error wrapping multiple validation errors
// returned by TrainingsResponse.ValidateAll() if the designated constraints
// aren't met.
type TrainingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainingsResponseMultiError) AllErrors() []error { return m }

// TrainingsResponseValidationError is the validation error returned by
// TrainingsResponse.Validate if the designated constraints aren't met.
type TrainingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingsResponseValidationError) ErrorName() string {
	return "TrainingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TrainingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingsResponseValidationError{}

// Validate checks the field values on ModelsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelsResponseMultiError,
// or nil if none found.
func (m *ModelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetModels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelsResponseValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelsResponseValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelsResponseValidationError{
					field:  fmt.Sprintf("Models[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ModelsResponseMultiError(errors)
	}

	return nil
}

// ModelsResponseMultiError is an error wrapping multiple validation errors
// returned by ModelsResponse.ValidateAll() if the designated constraints
// aren't met.
type ModelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelsResponseMultiError) AllErrors() []error { return m }

// ModelsResponseValidationError is the validation error returned by
// ModelsResponse.Validate if the designated constraints aren't met.
type ModelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelsResponseValidationError) ErrorName() string { return "ModelsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ModelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelsResponseValidationError{}
