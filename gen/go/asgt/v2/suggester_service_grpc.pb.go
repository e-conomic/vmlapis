// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: asgt/v2/suggester_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SuggesterService_Suggest_FullMethodName           = "/asgt.v2.SuggesterService/Suggest"
	SuggesterService_BatchSuggest_FullMethodName      = "/asgt.v2.SuggesterService/BatchSuggest"
	SuggesterService_ModelBatchSuggest_FullMethodName = "/asgt.v2.SuggesterService/ModelBatchSuggest"
)

// SuggesterServiceClient is the client API for SuggesterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuggesterServiceClient interface {
	// Suggest target values for some input using a dataset, returning an empty result if no model exists.
	Suggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error)
	// BatchSuggest target values for multiple inputs using a dataset, returning an empty result if no model exists.
	BatchSuggest(ctx context.Context, in *BatchSuggestRequest, opts ...grpc.CallOption) (*BatchSuggestResponse, error)
	// Suggest target values for multiple inputs using the most recently trained model in a dataset.
	// Returns 404 if a dataset exists, but no model has been trained. This matches the behavior of the v1 API.
	ModelBatchSuggest(ctx context.Context, in *BatchSuggestRequest, opts ...grpc.CallOption) (*BatchSuggestResponse, error)
}

type suggesterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSuggesterServiceClient(cc grpc.ClientConnInterface) SuggesterServiceClient {
	return &suggesterServiceClient{cc}
}

func (c *suggesterServiceClient) Suggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error) {
	out := new(SuggestResponse)
	err := c.cc.Invoke(ctx, SuggesterService_Suggest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggesterServiceClient) BatchSuggest(ctx context.Context, in *BatchSuggestRequest, opts ...grpc.CallOption) (*BatchSuggestResponse, error) {
	out := new(BatchSuggestResponse)
	err := c.cc.Invoke(ctx, SuggesterService_BatchSuggest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggesterServiceClient) ModelBatchSuggest(ctx context.Context, in *BatchSuggestRequest, opts ...grpc.CallOption) (*BatchSuggestResponse, error) {
	out := new(BatchSuggestResponse)
	err := c.cc.Invoke(ctx, SuggesterService_ModelBatchSuggest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuggesterServiceServer is the server API for SuggesterService service.
// All implementations should embed UnimplementedSuggesterServiceServer
// for forward compatibility
type SuggesterServiceServer interface {
	// Suggest target values for some input using a dataset, returning an empty result if no model exists.
	Suggest(context.Context, *SuggestRequest) (*SuggestResponse, error)
	// BatchSuggest target values for multiple inputs using a dataset, returning an empty result if no model exists.
	BatchSuggest(context.Context, *BatchSuggestRequest) (*BatchSuggestResponse, error)
	// Suggest target values for multiple inputs using the most recently trained model in a dataset.
	// Returns 404 if a dataset exists, but no model has been trained. This matches the behavior of the v1 API.
	ModelBatchSuggest(context.Context, *BatchSuggestRequest) (*BatchSuggestResponse, error)
}

// UnimplementedSuggesterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSuggesterServiceServer struct {
}

func (UnimplementedSuggesterServiceServer) Suggest(context.Context, *SuggestRequest) (*SuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suggest not implemented")
}
func (UnimplementedSuggesterServiceServer) BatchSuggest(context.Context, *BatchSuggestRequest) (*BatchSuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSuggest not implemented")
}
func (UnimplementedSuggesterServiceServer) ModelBatchSuggest(context.Context, *BatchSuggestRequest) (*BatchSuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelBatchSuggest not implemented")
}

// UnsafeSuggesterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuggesterServiceServer will
// result in compilation errors.
type UnsafeSuggesterServiceServer interface {
	mustEmbedUnimplementedSuggesterServiceServer()
}

func RegisterSuggesterServiceServer(s grpc.ServiceRegistrar, srv SuggesterServiceServer) {
	s.RegisterService(&SuggesterService_ServiceDesc, srv)
}

func _SuggesterService_Suggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggesterServiceServer).Suggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuggesterService_Suggest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggesterServiceServer).Suggest(ctx, req.(*SuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggesterService_BatchSuggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggesterServiceServer).BatchSuggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuggesterService_BatchSuggest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggesterServiceServer).BatchSuggest(ctx, req.(*BatchSuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggesterService_ModelBatchSuggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggesterServiceServer).ModelBatchSuggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuggesterService_ModelBatchSuggest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggesterServiceServer).ModelBatchSuggest(ctx, req.(*BatchSuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SuggesterService_ServiceDesc is the grpc.ServiceDesc for SuggesterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuggesterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "asgt.v2.SuggesterService",
	HandlerType: (*SuggesterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Suggest",
			Handler:    _SuggesterService_Suggest_Handler,
		},
		{
			MethodName: "BatchSuggest",
			Handler:    _SuggesterService_BatchSuggest_Handler,
		},
		{
			MethodName: "ModelBatchSuggest",
			Handler:    _SuggesterService_ModelBatchSuggest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "asgt/v2/suggester_service.proto",
}
