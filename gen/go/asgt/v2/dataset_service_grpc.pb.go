// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v2

import (
	context "context"
	_type "github.com/e-conomic/vmlapis/gen/go/asgt/type"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatasetServiceClient is the client API for DatasetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasetServiceClient interface {
	GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*_type.Dataset, error)
	CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateOrUpdateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*_type.Dataset, error)
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateExample(ctx context.Context, in *CreateExampleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateOrUpdateExample(ctx context.Context, in *CreateOrUpdateExampleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Upload multiple examples at once. This matches the behavior of the v1 API.
	BatchCreateExample(ctx context.Context, in *BatchCreateExampleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Truncate a dataset. Use this operation to remove examples in a dataset used for future training without
	// removing existing models.
	TruncateDataset(ctx context.Context, in *TruncateDatasetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetDatasetTrainings(ctx context.Context, in *GetDatasetTrainingsRequest, opts ...grpc.CallOption) (*TrainingsResponse, error)
	GetTrainings(ctx context.Context, in *GetTrainingsRequest, opts ...grpc.CallOption) (*TrainingsResponse, error)
}

type datasetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetServiceClient(cc grpc.ClientConnInterface) DatasetServiceClient {
	return &datasetServiceClient{cc}
}

func (c *datasetServiceClient) GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*_type.Dataset, error) {
	out := new(_type.Dataset)
	err := c.cc.Invoke(ctx, "/asgt.v2.DatasetService/GetDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/asgt.v2.DatasetService/CreateDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) CreateOrUpdateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/asgt.v2.DatasetService/CreateOrUpdateDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*_type.Dataset, error) {
	out := new(_type.Dataset)
	err := c.cc.Invoke(ctx, "/asgt.v2.DatasetService/DeleteDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/asgt.v2.DatasetService/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) CreateExample(ctx context.Context, in *CreateExampleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/asgt.v2.DatasetService/CreateExample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) CreateOrUpdateExample(ctx context.Context, in *CreateOrUpdateExampleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/asgt.v2.DatasetService/CreateOrUpdateExample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) BatchCreateExample(ctx context.Context, in *BatchCreateExampleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/asgt.v2.DatasetService/BatchCreateExample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) TruncateDataset(ctx context.Context, in *TruncateDatasetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/asgt.v2.DatasetService/TruncateDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetDatasetTrainings(ctx context.Context, in *GetDatasetTrainingsRequest, opts ...grpc.CallOption) (*TrainingsResponse, error) {
	out := new(TrainingsResponse)
	err := c.cc.Invoke(ctx, "/asgt.v2.DatasetService/GetDatasetTrainings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetTrainings(ctx context.Context, in *GetTrainingsRequest, opts ...grpc.CallOption) (*TrainingsResponse, error) {
	out := new(TrainingsResponse)
	err := c.cc.Invoke(ctx, "/asgt.v2.DatasetService/GetTrainings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetServiceServer is the server API for DatasetService service.
// All implementations must embed UnimplementedDatasetServiceServer
// for forward compatibility
type DatasetServiceServer interface {
	GetDataset(context.Context, *GetDatasetRequest) (*_type.Dataset, error)
	CreateDataset(context.Context, *CreateDatasetRequest) (*empty.Empty, error)
	CreateOrUpdateDataset(context.Context, *CreateDatasetRequest) (*empty.Empty, error)
	DeleteDataset(context.Context, *DeleteDatasetRequest) (*_type.Dataset, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*empty.Empty, error)
	CreateExample(context.Context, *CreateExampleRequest) (*empty.Empty, error)
	CreateOrUpdateExample(context.Context, *CreateOrUpdateExampleRequest) (*empty.Empty, error)
	// Upload multiple examples at once. This matches the behavior of the v1 API.
	BatchCreateExample(context.Context, *BatchCreateExampleRequest) (*empty.Empty, error)
	// Truncate a dataset. Use this operation to remove examples in a dataset used for future training without
	// removing existing models.
	TruncateDataset(context.Context, *TruncateDatasetRequest) (*empty.Empty, error)
	GetDatasetTrainings(context.Context, *GetDatasetTrainingsRequest) (*TrainingsResponse, error)
	GetTrainings(context.Context, *GetTrainingsRequest) (*TrainingsResponse, error)
	mustEmbedUnimplementedDatasetServiceServer()
}

// UnimplementedDatasetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatasetServiceServer struct {
}

func (UnimplementedDatasetServiceServer) GetDataset(context.Context, *GetDatasetRequest) (*_type.Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataset not implemented")
}
func (UnimplementedDatasetServiceServer) CreateDataset(context.Context, *CreateDatasetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataset not implemented")
}
func (UnimplementedDatasetServiceServer) CreateOrUpdateDataset(context.Context, *CreateDatasetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateDataset not implemented")
}
func (UnimplementedDatasetServiceServer) DeleteDataset(context.Context, *DeleteDatasetRequest) (*_type.Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataset not implemented")
}
func (UnimplementedDatasetServiceServer) DeleteTag(context.Context, *DeleteTagRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedDatasetServiceServer) CreateExample(context.Context, *CreateExampleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExample not implemented")
}
func (UnimplementedDatasetServiceServer) CreateOrUpdateExample(context.Context, *CreateOrUpdateExampleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateExample not implemented")
}
func (UnimplementedDatasetServiceServer) BatchCreateExample(context.Context, *BatchCreateExampleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateExample not implemented")
}
func (UnimplementedDatasetServiceServer) TruncateDataset(context.Context, *TruncateDatasetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TruncateDataset not implemented")
}
func (UnimplementedDatasetServiceServer) GetDatasetTrainings(context.Context, *GetDatasetTrainingsRequest) (*TrainingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetTrainings not implemented")
}
func (UnimplementedDatasetServiceServer) GetTrainings(context.Context, *GetTrainingsRequest) (*TrainingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainings not implemented")
}
func (UnimplementedDatasetServiceServer) mustEmbedUnimplementedDatasetServiceServer() {}

// UnsafeDatasetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasetServiceServer will
// result in compilation errors.
type UnsafeDatasetServiceServer interface {
	mustEmbedUnimplementedDatasetServiceServer()
}

func RegisterDatasetServiceServer(s grpc.ServiceRegistrar, srv DatasetServiceServer) {
	s.RegisterService(&DatasetService_ServiceDesc, srv)
}

func _DatasetService_GetDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.v2.DatasetService/GetDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetDataset(ctx, req.(*GetDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.v2.DatasetService/CreateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).CreateDataset(ctx, req.(*CreateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_CreateOrUpdateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).CreateOrUpdateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.v2.DatasetService/CreateOrUpdateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).CreateOrUpdateDataset(ctx, req.(*CreateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.v2.DatasetService/DeleteDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, req.(*DeleteDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.v2.DatasetService/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_CreateExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).CreateExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.v2.DatasetService/CreateExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).CreateExample(ctx, req.(*CreateExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_CreateOrUpdateExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).CreateOrUpdateExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.v2.DatasetService/CreateOrUpdateExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).CreateOrUpdateExample(ctx, req.(*CreateOrUpdateExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_BatchCreateExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).BatchCreateExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.v2.DatasetService/BatchCreateExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).BatchCreateExample(ctx, req.(*BatchCreateExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_TruncateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).TruncateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.v2.DatasetService/TruncateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).TruncateDataset(ctx, req.(*TruncateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetDatasetTrainings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetTrainingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetDatasetTrainings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.v2.DatasetService/GetDatasetTrainings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetDatasetTrainings(ctx, req.(*GetDatasetTrainingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetTrainings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetTrainings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asgt.v2.DatasetService/GetTrainings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetTrainings(ctx, req.(*GetTrainingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatasetService_ServiceDesc is the grpc.ServiceDesc for DatasetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatasetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "asgt.v2.DatasetService",
	HandlerType: (*DatasetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataset",
			Handler:    _DatasetService_GetDataset_Handler,
		},
		{
			MethodName: "CreateDataset",
			Handler:    _DatasetService_CreateDataset_Handler,
		},
		{
			MethodName: "CreateOrUpdateDataset",
			Handler:    _DatasetService_CreateOrUpdateDataset_Handler,
		},
		{
			MethodName: "DeleteDataset",
			Handler:    _DatasetService_DeleteDataset_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _DatasetService_DeleteTag_Handler,
		},
		{
			MethodName: "CreateExample",
			Handler:    _DatasetService_CreateExample_Handler,
		},
		{
			MethodName: "CreateOrUpdateExample",
			Handler:    _DatasetService_CreateOrUpdateExample_Handler,
		},
		{
			MethodName: "BatchCreateExample",
			Handler:    _DatasetService_BatchCreateExample_Handler,
		},
		{
			MethodName: "TruncateDataset",
			Handler:    _DatasetService_TruncateDataset_Handler,
		},
		{
			MethodName: "GetDatasetTrainings",
			Handler:    _DatasetService_GetDatasetTrainings_Handler,
		},
		{
			MethodName: "GetTrainings",
			Handler:    _DatasetService_GetTrainings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "asgt/v2/dataset_service.proto",
}
