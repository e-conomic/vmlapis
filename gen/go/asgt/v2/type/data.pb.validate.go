// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: asgt/v2/type/data.proto

package asgttype

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Invoice with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Invoice) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetIssueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvoiceValidationError{
				field:  "IssueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSupplier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvoiceValidationError{
				field:  "Supplier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CustomerRef

	// no validation rules for Text

	if len(m.GetCurrency()) > 10 {
		return InvoiceValidationError{
			field:  "Currency",
			reason: "value length must be at most 10 bytes",
		}
	}

	if !_Invoice_Currency_Pattern.MatchString(m.GetCurrency()) {
		return InvoiceValidationError{
			field:  "Currency",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]*$\"",
		}
	}

	// no validation rules for Total

	return nil
}

// InvoiceValidationError is the validation error returned by Invoice.Validate
// if the designated constraints aren't met.
type InvoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvoiceValidationError) ErrorName() string { return "InvoiceValidationError" }

// Error satisfies the builtin error interface
func (e InvoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvoiceValidationError{}

var _Invoice_Currency_Pattern = regexp.MustCompile("^[A-Za-z0-9]*$")

// Validate checks the field values on InvoiceLine with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *InvoiceLine) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Text

	// no validation rules for ItemId

	return nil
}

// InvoiceLineValidationError is the validation error returned by
// InvoiceLine.Validate if the designated constraints aren't met.
type InvoiceLineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvoiceLineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvoiceLineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvoiceLineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvoiceLineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvoiceLineValidationError) ErrorName() string { return "InvoiceLineValidationError" }

// Error satisfies the builtin error interface
func (e InvoiceLineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvoiceLine.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvoiceLineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvoiceLineValidationError{}

// Validate checks the field values on Supplier with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Supplier) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetId()) > 64 {
		return SupplierValidationError{
			field:  "Id",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_Supplier_Id_Pattern.MatchString(m.GetId()) {
		return SupplierValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]*$\"",
		}
	}

	// no validation rules for Name

	// no validation rules for GlobalId

	return nil
}

// SupplierValidationError is the validation error returned by
// Supplier.Validate if the designated constraints aren't met.
type SupplierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SupplierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SupplierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SupplierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SupplierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SupplierValidationError) ErrorName() string { return "SupplierValidationError" }

// Error satisfies the builtin error interface
func (e SupplierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSupplier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SupplierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SupplierValidationError{}

var _Supplier_Id_Pattern = regexp.MustCompile("^[A-Za-z0-9]*$")

// Validate checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Transaction) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Text

	// no validation rules for Amount

	return nil
}

// TransactionValidationError is the validation error returned by
// Transaction.Validate if the designated constraints aren't met.
type TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionValidationError) ErrorName() string { return "TransactionValidationError" }

// Error satisfies the builtin error interface
func (e TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionValidationError{}

// Validate checks the field values on Data with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Data) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataValidationError{
				field:  "Transaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInvoice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataValidationError{
				field:  "Invoice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInvoiceLine()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataValidationError{
				field:  "InvoiceLine",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DataValidationError is the validation error returned by Data.Validate if the
// designated constraints aren't met.
type DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataValidationError) ErrorName() string { return "DataValidationError" }

// Error satisfies the builtin error interface
func (e DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataValidationError{}
