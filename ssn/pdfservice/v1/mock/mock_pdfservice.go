// Code generated by MockGen. DO NOT EDIT.
// Source: ssn/pdfservice/v1/pdfservice.pb.go

// Package mock_pdfservice is a generated GoMock package.
package mock_pdfservice

import (
	x "github.com/e-conomic/vmlapis/ssn/pdfservice/v1"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockPdfServiceClient is a mock of PdfServiceClient interface
type MockPdfServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPdfServiceClientMockRecorder
}

// MockPdfServiceClientMockRecorder is the mock recorder for MockPdfServiceClient
type MockPdfServiceClientMockRecorder struct {
	mock *MockPdfServiceClient
}

// NewMockPdfServiceClient creates a new mock instance
func NewMockPdfServiceClient(ctrl *gomock.Controller) *MockPdfServiceClient {
	mock := &MockPdfServiceClient{ctrl: ctrl}
	mock.recorder = &MockPdfServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPdfServiceClient) EXPECT() *MockPdfServiceClientMockRecorder {
	return m.recorder
}

// RasterizePdf mocks base method
func (m *MockPdfServiceClient) RasterizePdf(ctx context.Context, in *x.RasterizePdfRequest, opts ...grpc.CallOption) (x.PdfService_RasterizePdfClient, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RasterizePdf", varargs...)
	ret0, _ := ret[0].(x.PdfService_RasterizePdfClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RasterizePdf indicates an expected call of RasterizePdf
func (mr *MockPdfServiceClientMockRecorder) RasterizePdf(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RasterizePdf", reflect.TypeOf((*MockPdfServiceClient)(nil).RasterizePdf), varargs...)
}

// MockPdfService_RasterizePdfClient is a mock of PdfService_RasterizePdfClient interface
type MockPdfService_RasterizePdfClient struct {
	ctrl     *gomock.Controller
	recorder *MockPdfService_RasterizePdfClientMockRecorder
}

// MockPdfService_RasterizePdfClientMockRecorder is the mock recorder for MockPdfService_RasterizePdfClient
type MockPdfService_RasterizePdfClientMockRecorder struct {
	mock *MockPdfService_RasterizePdfClient
}

// NewMockPdfService_RasterizePdfClient creates a new mock instance
func NewMockPdfService_RasterizePdfClient(ctrl *gomock.Controller) *MockPdfService_RasterizePdfClient {
	mock := &MockPdfService_RasterizePdfClient{ctrl: ctrl}
	mock.recorder = &MockPdfService_RasterizePdfClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPdfService_RasterizePdfClient) EXPECT() *MockPdfService_RasterizePdfClientMockRecorder {
	return m.recorder
}

// Recv mocks base method
func (m *MockPdfService_RasterizePdfClient) Recv() (*x.RasterizePdfResponse, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*x.RasterizePdfResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockPdfService_RasterizePdfClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPdfService_RasterizePdfClient)(nil).Recv))
}

// Header mocks base method
func (m *MockPdfService_RasterizePdfClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockPdfService_RasterizePdfClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPdfService_RasterizePdfClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockPdfService_RasterizePdfClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockPdfService_RasterizePdfClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPdfService_RasterizePdfClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockPdfService_RasterizePdfClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockPdfService_RasterizePdfClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPdfService_RasterizePdfClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockPdfService_RasterizePdfClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockPdfService_RasterizePdfClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPdfService_RasterizePdfClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockPdfService_RasterizePdfClient) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockPdfService_RasterizePdfClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPdfService_RasterizePdfClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockPdfService_RasterizePdfClient) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockPdfService_RasterizePdfClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPdfService_RasterizePdfClient)(nil).RecvMsg), m)
}

// MockPdfServiceServer is a mock of PdfServiceServer interface
type MockPdfServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPdfServiceServerMockRecorder
}

// MockPdfServiceServerMockRecorder is the mock recorder for MockPdfServiceServer
type MockPdfServiceServerMockRecorder struct {
	mock *MockPdfServiceServer
}

// NewMockPdfServiceServer creates a new mock instance
func NewMockPdfServiceServer(ctrl *gomock.Controller) *MockPdfServiceServer {
	mock := &MockPdfServiceServer{ctrl: ctrl}
	mock.recorder = &MockPdfServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPdfServiceServer) EXPECT() *MockPdfServiceServerMockRecorder {
	return m.recorder
}

// RasterizePdf mocks base method
func (m *MockPdfServiceServer) RasterizePdf(arg0 *x.RasterizePdfRequest, arg1 x.PdfService_RasterizePdfServer) error {
	ret := m.ctrl.Call(m, "RasterizePdf", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RasterizePdf indicates an expected call of RasterizePdf
func (mr *MockPdfServiceServerMockRecorder) RasterizePdf(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RasterizePdf", reflect.TypeOf((*MockPdfServiceServer)(nil).RasterizePdf), arg0, arg1)
}

// MockPdfService_RasterizePdfServer is a mock of PdfService_RasterizePdfServer interface
type MockPdfService_RasterizePdfServer struct {
	ctrl     *gomock.Controller
	recorder *MockPdfService_RasterizePdfServerMockRecorder
}

// MockPdfService_RasterizePdfServerMockRecorder is the mock recorder for MockPdfService_RasterizePdfServer
type MockPdfService_RasterizePdfServerMockRecorder struct {
	mock *MockPdfService_RasterizePdfServer
}

// NewMockPdfService_RasterizePdfServer creates a new mock instance
func NewMockPdfService_RasterizePdfServer(ctrl *gomock.Controller) *MockPdfService_RasterizePdfServer {
	mock := &MockPdfService_RasterizePdfServer{ctrl: ctrl}
	mock.recorder = &MockPdfService_RasterizePdfServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPdfService_RasterizePdfServer) EXPECT() *MockPdfService_RasterizePdfServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockPdfService_RasterizePdfServer) Send(arg0 *x.RasterizePdfResponse) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockPdfService_RasterizePdfServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPdfService_RasterizePdfServer)(nil).Send), arg0)
}

// SetHeader mocks base method
func (m *MockPdfService_RasterizePdfServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockPdfService_RasterizePdfServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPdfService_RasterizePdfServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockPdfService_RasterizePdfServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockPdfService_RasterizePdfServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPdfService_RasterizePdfServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockPdfService_RasterizePdfServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockPdfService_RasterizePdfServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPdfService_RasterizePdfServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockPdfService_RasterizePdfServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockPdfService_RasterizePdfServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPdfService_RasterizePdfServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockPdfService_RasterizePdfServer) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockPdfService_RasterizePdfServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPdfService_RasterizePdfServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockPdfService_RasterizePdfServer) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockPdfService_RasterizePdfServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPdfService_RasterizePdfServer)(nil).RecvMsg), m)
}
