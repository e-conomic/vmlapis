//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ssn/ocrservice/v1alpha1/ocrservice.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

public protocol Ocrservice_OcrServiceOcrScanImageCall: ClientCallUnary {}

fileprivate final class Ocrservice_OcrServiceOcrScanImageCallBase: ClientCallUnaryBase<Ocrservice_OcrScanImageRequest, Ocrservice_OcrScanImageResponse>, Ocrservice_OcrServiceOcrScanImageCall {
  override class var method: String { return "/ocrservice.OcrService/OcrScanImage" }
}


/// Instantiate Ocrservice_OcrServiceServiceClient, then call methods of this protocol to make API calls.
public protocol Ocrservice_OcrServiceService: ServiceClient {
  /// Synchronous. Unary.
  func ocrScanImage(_ request: Ocrservice_OcrScanImageRequest) throws -> Ocrservice_OcrScanImageResponse
  /// Asynchronous. Unary.
  func ocrScanImage(_ request: Ocrservice_OcrScanImageRequest, completion: @escaping (Ocrservice_OcrScanImageResponse?, CallResult) -> Void) throws -> Ocrservice_OcrServiceOcrScanImageCall

}

public final class Ocrservice_OcrServiceServiceClient: ServiceClientBase, Ocrservice_OcrServiceService {
  /// Synchronous. Unary.
  public func ocrScanImage(_ request: Ocrservice_OcrScanImageRequest) throws -> Ocrservice_OcrScanImageResponse {
    return try Ocrservice_OcrServiceOcrScanImageCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  public func ocrScanImage(_ request: Ocrservice_OcrScanImageRequest, completion: @escaping (Ocrservice_OcrScanImageResponse?, CallResult) -> Void) throws -> Ocrservice_OcrServiceOcrScanImageCall {
    return try Ocrservice_OcrServiceOcrScanImageCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

