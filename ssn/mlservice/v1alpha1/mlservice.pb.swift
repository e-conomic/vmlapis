// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ssn/mlservice/v1alpha1/mlservice.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Mlservice_PredictedField {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: String = String()

  public var confidence: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mlservice_MlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ocrResponses: [Ocrservice_OcrScanImageResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mlservice_MlResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var orderDate: Mlservice_PredictedField {
    get {return _storage._orderDate ?? Mlservice_PredictedField()}
    set {_uniqueStorage()._orderDate = newValue}
  }
  /// Returns true if `orderDate` has been explicitly set.
  public var hasOrderDate: Bool {return _storage._orderDate != nil}
  /// Clears the value of `orderDate`. Subsequent reads from it will return its default value.
  public mutating func clearOrderDate() {_uniqueStorage()._orderDate = nil}

  public var paymentDueDate: Mlservice_PredictedField {
    get {return _storage._paymentDueDate ?? Mlservice_PredictedField()}
    set {_uniqueStorage()._paymentDueDate = newValue}
  }
  /// Returns true if `paymentDueDate` has been explicitly set.
  public var hasPaymentDueDate: Bool {return _storage._paymentDueDate != nil}
  /// Clears the value of `paymentDueDate`. Subsequent reads from it will return its default value.
  public mutating func clearPaymentDueDate() {_uniqueStorage()._paymentDueDate = nil}

  public var currency: Mlservice_PredictedField {
    get {return _storage._currency ?? Mlservice_PredictedField()}
    set {_uniqueStorage()._currency = newValue}
  }
  /// Returns true if `currency` has been explicitly set.
  public var hasCurrency: Bool {return _storage._currency != nil}
  /// Clears the value of `currency`. Subsequent reads from it will return its default value.
  public mutating func clearCurrency() {_uniqueStorage()._currency = nil}

  public var totalVat: Mlservice_PredictedField {
    get {return _storage._totalVat ?? Mlservice_PredictedField()}
    set {_uniqueStorage()._totalVat = newValue}
  }
  /// Returns true if `totalVat` has been explicitly set.
  public var hasTotalVat: Bool {return _storage._totalVat != nil}
  /// Clears the value of `totalVat`. Subsequent reads from it will return its default value.
  public mutating func clearTotalVat() {_uniqueStorage()._totalVat = nil}

  public var totalInclVat: Mlservice_PredictedField {
    get {return _storage._totalInclVat ?? Mlservice_PredictedField()}
    set {_uniqueStorage()._totalInclVat = newValue}
  }
  /// Returns true if `totalInclVat` has been explicitly set.
  public var hasTotalInclVat: Bool {return _storage._totalInclVat != nil}
  /// Clears the value of `totalInclVat`. Subsequent reads from it will return its default value.
  public mutating func clearTotalInclVat() {_uniqueStorage()._totalInclVat = nil}

  public var totalExclVat: Mlservice_PredictedField {
    get {return _storage._totalExclVat ?? Mlservice_PredictedField()}
    set {_uniqueStorage()._totalExclVat = newValue}
  }
  /// Returns true if `totalExclVat` has been explicitly set.
  public var hasTotalExclVat: Bool {return _storage._totalExclVat != nil}
  /// Clears the value of `totalExclVat`. Subsequent reads from it will return its default value.
  public mutating func clearTotalExclVat() {_uniqueStorage()._totalExclVat = nil}

  public var supplierCorporateID: [Mlservice_PredictedField] {
    get {return _storage._supplierCorporateID}
    set {_uniqueStorage()._supplierCorporateID = newValue}
  }

  public var supplierCountryCode: Mlservice_PredictedField {
    get {return _storage._supplierCountryCode ?? Mlservice_PredictedField()}
    set {_uniqueStorage()._supplierCountryCode = newValue}
  }
  /// Returns true if `supplierCountryCode` has been explicitly set.
  public var hasSupplierCountryCode: Bool {return _storage._supplierCountryCode != nil}
  /// Clears the value of `supplierCountryCode`. Subsequent reads from it will return its default value.
  public mutating func clearSupplierCountryCode() {_uniqueStorage()._supplierCountryCode = nil}

  public var documentType: Mlservice_PredictedField {
    get {return _storage._documentType ?? Mlservice_PredictedField()}
    set {_uniqueStorage()._documentType = newValue}
  }
  /// Returns true if `documentType` has been explicitly set.
  public var hasDocumentType: Bool {return _storage._documentType != nil}
  /// Clears the value of `documentType`. Subsequent reads from it will return its default value.
  public mutating func clearDocumentType() {_uniqueStorage()._documentType = nil}

  public var paymentMethod: Mlservice_PredictedField {
    get {return _storage._paymentMethod ?? Mlservice_PredictedField()}
    set {_uniqueStorage()._paymentMethod = newValue}
  }
  /// Returns true if `paymentMethod` has been explicitly set.
  public var hasPaymentMethod: Bool {return _storage._paymentMethod != nil}
  /// Clears the value of `paymentMethod`. Subsequent reads from it will return its default value.
  public mutating func clearPaymentMethod() {_uniqueStorage()._paymentMethod = nil}

  public var creditCardLastFourDigits: Mlservice_PredictedField {
    get {return _storage._creditCardLastFourDigits ?? Mlservice_PredictedField()}
    set {_uniqueStorage()._creditCardLastFourDigits = newValue}
  }
  /// Returns true if `creditCardLastFourDigits` has been explicitly set.
  public var hasCreditCardLastFourDigits: Bool {return _storage._creditCardLastFourDigits != nil}
  /// Clears the value of `creditCardLastFourDigits`. Subsequent reads from it will return its default value.
  public mutating func clearCreditCardLastFourDigits() {_uniqueStorage()._creditCardLastFourDigits = nil}

  public var invoiceNumber: Mlservice_PredictedField {
    get {return _storage._invoiceNumber ?? Mlservice_PredictedField()}
    set {_uniqueStorage()._invoiceNumber = newValue}
  }
  /// Returns true if `invoiceNumber` has been explicitly set.
  public var hasInvoiceNumber: Bool {return _storage._invoiceNumber != nil}
  /// Clears the value of `invoiceNumber`. Subsequent reads from it will return its default value.
  public mutating func clearInvoiceNumber() {_uniqueStorage()._invoiceNumber = nil}

  public var ocrLine: OneOf_OcrLine? {
    get {return _storage._ocrLine}
    set {_uniqueStorage()._ocrLine = newValue}
  }

  public var ocrLineDk: Mlservice_MlResponse.OcrLineDk {
    get {
      if case .ocrLineDk(let v)? = _storage._ocrLine {return v}
      return Mlservice_MlResponse.OcrLineDk()
    }
    set {_uniqueStorage()._ocrLine = .ocrLineDk(newValue)}
  }

  public var ocrLineSe: Mlservice_MlResponse.OcrLineSe {
    get {
      if case .ocrLineSe(let v)? = _storage._ocrLine {return v}
      return Mlservice_MlResponse.OcrLineSe()
    }
    set {_uniqueStorage()._ocrLine = .ocrLineSe(newValue)}
  }

  public var ocrLineNo: Mlservice_MlResponse.OcrLineNo {
    get {
      if case .ocrLineNo(let v)? = _storage._ocrLine {return v}
      return Mlservice_MlResponse.OcrLineNo()
    }
    set {_uniqueStorage()._ocrLine = .ocrLineNo(newValue)}
  }

  public var ocrLineFi: Mlservice_MlResponse.OcrLineFi {
    get {
      if case .ocrLineFi(let v)? = _storage._ocrLine {return v}
      return Mlservice_MlResponse.OcrLineFi()
    }
    set {_uniqueStorage()._ocrLine = .ocrLineFi(newValue)}
  }

  public var ocrLineNl: Mlservice_MlResponse.OcrLineNl {
    get {
      if case .ocrLineNl(let v)? = _storage._ocrLine {return v}
      return Mlservice_MlResponse.OcrLineNl()
    }
    set {_uniqueStorage()._ocrLine = .ocrLineNl(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_OcrLine: Equatable {
    case ocrLineDk(Mlservice_MlResponse.OcrLineDk)
    case ocrLineSe(Mlservice_MlResponse.OcrLineSe)
    case ocrLineNo(Mlservice_MlResponse.OcrLineNo)
    case ocrLineFi(Mlservice_MlResponse.OcrLineFi)
    case ocrLineNl(Mlservice_MlResponse.OcrLineNl)

  #if !swift(>=4.1)
    public static func ==(lhs: Mlservice_MlResponse.OneOf_OcrLine, rhs: Mlservice_MlResponse.OneOf_OcrLine) -> Bool {
      switch (lhs, rhs) {
      case (.ocrLineDk(let l), .ocrLineDk(let r)): return l == r
      case (.ocrLineSe(let l), .ocrLineSe(let r)): return l == r
      case (.ocrLineNo(let l), .ocrLineNo(let r)): return l == r
      case (.ocrLineFi(let l), .ocrLineFi(let r)): return l == r
      case (.ocrLineNl(let l), .ocrLineNl(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct OcrLineDk {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var type: Mlservice_PredictedField {
      get {return _storage._type ?? Mlservice_PredictedField()}
      set {_uniqueStorage()._type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    public var hasType: Bool {return _storage._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
    public mutating func clearType() {_uniqueStorage()._type = nil}

    public var paymentID: Mlservice_PredictedField {
      get {return _storage._paymentID ?? Mlservice_PredictedField()}
      set {_uniqueStorage()._paymentID = newValue}
    }
    /// Returns true if `paymentID` has been explicitly set.
    public var hasPaymentID: Bool {return _storage._paymentID != nil}
    /// Clears the value of `paymentID`. Subsequent reads from it will return its default value.
    public mutating func clearPaymentID() {_uniqueStorage()._paymentID = nil}

    public var creditorID: Mlservice_PredictedField {
      get {return _storage._creditorID ?? Mlservice_PredictedField()}
      set {_uniqueStorage()._creditorID = newValue}
    }
    /// Returns true if `creditorID` has been explicitly set.
    public var hasCreditorID: Bool {return _storage._creditorID != nil}
    /// Clears the value of `creditorID`. Subsequent reads from it will return its default value.
    public mutating func clearCreditorID() {_uniqueStorage()._creditorID = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct OcrLineSe {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var paymentID: Mlservice_PredictedField {
      get {return _storage._paymentID ?? Mlservice_PredictedField()}
      set {_uniqueStorage()._paymentID = newValue}
    }
    /// Returns true if `paymentID` has been explicitly set.
    public var hasPaymentID: Bool {return _storage._paymentID != nil}
    /// Clears the value of `paymentID`. Subsequent reads from it will return its default value.
    public mutating func clearPaymentID() {_uniqueStorage()._paymentID = nil}

    public var bankgiroCreditorID: Mlservice_PredictedField {
      get {return _storage._bankgiroCreditorID ?? Mlservice_PredictedField()}
      set {_uniqueStorage()._bankgiroCreditorID = newValue}
    }
    /// Returns true if `bankgiroCreditorID` has been explicitly set.
    public var hasBankgiroCreditorID: Bool {return _storage._bankgiroCreditorID != nil}
    /// Clears the value of `bankgiroCreditorID`. Subsequent reads from it will return its default value.
    public mutating func clearBankgiroCreditorID() {_uniqueStorage()._bankgiroCreditorID = nil}

    public var plusgiroCreditorID: Mlservice_PredictedField {
      get {return _storage._plusgiroCreditorID ?? Mlservice_PredictedField()}
      set {_uniqueStorage()._plusgiroCreditorID = newValue}
    }
    /// Returns true if `plusgiroCreditorID` has been explicitly set.
    public var hasPlusgiroCreditorID: Bool {return _storage._plusgiroCreditorID != nil}
    /// Clears the value of `plusgiroCreditorID`. Subsequent reads from it will return its default value.
    public mutating func clearPlusgiroCreditorID() {_uniqueStorage()._plusgiroCreditorID = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct OcrLineNo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var paymentID: Mlservice_PredictedField {
      get {return _storage._paymentID ?? Mlservice_PredictedField()}
      set {_uniqueStorage()._paymentID = newValue}
    }
    /// Returns true if `paymentID` has been explicitly set.
    public var hasPaymentID: Bool {return _storage._paymentID != nil}
    /// Clears the value of `paymentID`. Subsequent reads from it will return its default value.
    public mutating func clearPaymentID() {_uniqueStorage()._paymentID = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct OcrLineNl {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var paymentID: Mlservice_PredictedField {
      get {return _storage._paymentID ?? Mlservice_PredictedField()}
      set {_uniqueStorage()._paymentID = newValue}
    }
    /// Returns true if `paymentID` has been explicitly set.
    public var hasPaymentID: Bool {return _storage._paymentID != nil}
    /// Clears the value of `paymentID`. Subsequent reads from it will return its default value.
    public mutating func clearPaymentID() {_uniqueStorage()._paymentID = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct OcrLineFi {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var paymentID: Mlservice_PredictedField {
      get {return _storage._paymentID ?? Mlservice_PredictedField()}
      set {_uniqueStorage()._paymentID = newValue}
    }
    /// Returns true if `paymentID` has been explicitly set.
    public var hasPaymentID: Bool {return _storage._paymentID != nil}
    /// Clears the value of `paymentID`. Subsequent reads from it will return its default value.
    public mutating func clearPaymentID() {_uniqueStorage()._paymentID = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "mlservice"

extension Mlservice_PredictedField: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PredictedField"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "confidence"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      case 2: try decoder.decodeSingularFloatField(value: &self.confidence)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    if self.confidence != 0 {
      try visitor.visitSingularFloatField(value: self.confidence, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mlservice_PredictedField, rhs: Mlservice_PredictedField) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.confidence != rhs.confidence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mlservice_MlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ocrResponses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.ocrResponses)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ocrResponses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ocrResponses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mlservice_MlRequest, rhs: Mlservice_MlRequest) -> Bool {
    if lhs.ocrResponses != rhs.ocrResponses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mlservice_MlResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MlResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orderDate"),
    2: .same(proto: "paymentDueDate"),
    3: .same(proto: "currency"),
    4: .same(proto: "totalVat"),
    5: .same(proto: "totalInclVat"),
    6: .same(proto: "totalExclVat"),
    7: .same(proto: "supplierCorporateId"),
    8: .same(proto: "supplierCountryCode"),
    9: .same(proto: "documentType"),
    10: .same(proto: "paymentMethod"),
    11: .same(proto: "creditCardLastFourDigits"),
    17: .same(proto: "invoiceNumber"),
    12: .same(proto: "ocrLineDk"),
    13: .same(proto: "ocrLineSe"),
    14: .same(proto: "ocrLineNo"),
    15: .same(proto: "ocrLineFi"),
    16: .same(proto: "ocrLineNl"),
  ]

  fileprivate class _StorageClass {
    var _orderDate: Mlservice_PredictedField? = nil
    var _paymentDueDate: Mlservice_PredictedField? = nil
    var _currency: Mlservice_PredictedField? = nil
    var _totalVat: Mlservice_PredictedField? = nil
    var _totalInclVat: Mlservice_PredictedField? = nil
    var _totalExclVat: Mlservice_PredictedField? = nil
    var _supplierCorporateID: [Mlservice_PredictedField] = []
    var _supplierCountryCode: Mlservice_PredictedField? = nil
    var _documentType: Mlservice_PredictedField? = nil
    var _paymentMethod: Mlservice_PredictedField? = nil
    var _creditCardLastFourDigits: Mlservice_PredictedField? = nil
    var _invoiceNumber: Mlservice_PredictedField? = nil
    var _ocrLine: Mlservice_MlResponse.OneOf_OcrLine?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _orderDate = source._orderDate
      _paymentDueDate = source._paymentDueDate
      _currency = source._currency
      _totalVat = source._totalVat
      _totalInclVat = source._totalInclVat
      _totalExclVat = source._totalExclVat
      _supplierCorporateID = source._supplierCorporateID
      _supplierCountryCode = source._supplierCountryCode
      _documentType = source._documentType
      _paymentMethod = source._paymentMethod
      _creditCardLastFourDigits = source._creditCardLastFourDigits
      _invoiceNumber = source._invoiceNumber
      _ocrLine = source._ocrLine
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._orderDate)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._paymentDueDate)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._currency)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._totalVat)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._totalInclVat)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._totalExclVat)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._supplierCorporateID)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._supplierCountryCode)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._documentType)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._paymentMethod)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._creditCardLastFourDigits)
        case 12:
          var v: Mlservice_MlResponse.OcrLineDk?
          if let current = _storage._ocrLine {
            try decoder.handleConflictingOneOf()
            if case .ocrLineDk(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._ocrLine = .ocrLineDk(v)}
        case 13:
          var v: Mlservice_MlResponse.OcrLineSe?
          if let current = _storage._ocrLine {
            try decoder.handleConflictingOneOf()
            if case .ocrLineSe(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._ocrLine = .ocrLineSe(v)}
        case 14:
          var v: Mlservice_MlResponse.OcrLineNo?
          if let current = _storage._ocrLine {
            try decoder.handleConflictingOneOf()
            if case .ocrLineNo(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._ocrLine = .ocrLineNo(v)}
        case 15:
          var v: Mlservice_MlResponse.OcrLineFi?
          if let current = _storage._ocrLine {
            try decoder.handleConflictingOneOf()
            if case .ocrLineFi(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._ocrLine = .ocrLineFi(v)}
        case 16:
          var v: Mlservice_MlResponse.OcrLineNl?
          if let current = _storage._ocrLine {
            try decoder.handleConflictingOneOf()
            if case .ocrLineNl(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._ocrLine = .ocrLineNl(v)}
        case 17: try decoder.decodeSingularMessageField(value: &_storage._invoiceNumber)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._orderDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._paymentDueDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._currency {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._totalVat {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._totalInclVat {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._totalExclVat {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._supplierCorporateID.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._supplierCorporateID, fieldNumber: 7)
      }
      if let v = _storage._supplierCountryCode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._documentType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._paymentMethod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._creditCardLastFourDigits {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      switch _storage._ocrLine {
      case .ocrLineDk(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .ocrLineSe(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case .ocrLineNo(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      case .ocrLineFi(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      case .ocrLineNl(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      case nil: break
      }
      if let v = _storage._invoiceNumber {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mlservice_MlResponse, rhs: Mlservice_MlResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._orderDate != rhs_storage._orderDate {return false}
        if _storage._paymentDueDate != rhs_storage._paymentDueDate {return false}
        if _storage._currency != rhs_storage._currency {return false}
        if _storage._totalVat != rhs_storage._totalVat {return false}
        if _storage._totalInclVat != rhs_storage._totalInclVat {return false}
        if _storage._totalExclVat != rhs_storage._totalExclVat {return false}
        if _storage._supplierCorporateID != rhs_storage._supplierCorporateID {return false}
        if _storage._supplierCountryCode != rhs_storage._supplierCountryCode {return false}
        if _storage._documentType != rhs_storage._documentType {return false}
        if _storage._paymentMethod != rhs_storage._paymentMethod {return false}
        if _storage._creditCardLastFourDigits != rhs_storage._creditCardLastFourDigits {return false}
        if _storage._invoiceNumber != rhs_storage._invoiceNumber {return false}
        if _storage._ocrLine != rhs_storage._ocrLine {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mlservice_MlResponse.OcrLineDk: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Mlservice_MlResponse.protoMessageName + ".OcrLineDk"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "paymentId"),
    3: .same(proto: "creditorId"),
  ]

  fileprivate class _StorageClass {
    var _type: Mlservice_PredictedField? = nil
    var _paymentID: Mlservice_PredictedField? = nil
    var _creditorID: Mlservice_PredictedField? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _paymentID = source._paymentID
      _creditorID = source._creditorID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._type)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._paymentID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._creditorID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._paymentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._creditorID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mlservice_MlResponse.OcrLineDk, rhs: Mlservice_MlResponse.OcrLineDk) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._paymentID != rhs_storage._paymentID {return false}
        if _storage._creditorID != rhs_storage._creditorID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mlservice_MlResponse.OcrLineSe: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Mlservice_MlResponse.protoMessageName + ".OcrLineSe"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "paymentId"),
    2: .same(proto: "bankgiroCreditorId"),
    3: .same(proto: "plusgiroCreditorId"),
  ]

  fileprivate class _StorageClass {
    var _paymentID: Mlservice_PredictedField? = nil
    var _bankgiroCreditorID: Mlservice_PredictedField? = nil
    var _plusgiroCreditorID: Mlservice_PredictedField? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _paymentID = source._paymentID
      _bankgiroCreditorID = source._bankgiroCreditorID
      _plusgiroCreditorID = source._plusgiroCreditorID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._paymentID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._bankgiroCreditorID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._plusgiroCreditorID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._paymentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._bankgiroCreditorID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._plusgiroCreditorID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mlservice_MlResponse.OcrLineSe, rhs: Mlservice_MlResponse.OcrLineSe) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._paymentID != rhs_storage._paymentID {return false}
        if _storage._bankgiroCreditorID != rhs_storage._bankgiroCreditorID {return false}
        if _storage._plusgiroCreditorID != rhs_storage._plusgiroCreditorID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mlservice_MlResponse.OcrLineNo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Mlservice_MlResponse.protoMessageName + ".OcrLineNo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "paymentId"),
  ]

  fileprivate class _StorageClass {
    var _paymentID: Mlservice_PredictedField? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _paymentID = source._paymentID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._paymentID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._paymentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mlservice_MlResponse.OcrLineNo, rhs: Mlservice_MlResponse.OcrLineNo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._paymentID != rhs_storage._paymentID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mlservice_MlResponse.OcrLineNl: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Mlservice_MlResponse.protoMessageName + ".OcrLineNl"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "paymentId"),
  ]

  fileprivate class _StorageClass {
    var _paymentID: Mlservice_PredictedField? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _paymentID = source._paymentID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._paymentID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._paymentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mlservice_MlResponse.OcrLineNl, rhs: Mlservice_MlResponse.OcrLineNl) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._paymentID != rhs_storage._paymentID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mlservice_MlResponse.OcrLineFi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Mlservice_MlResponse.protoMessageName + ".OcrLineFi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "paymentId"),
  ]

  fileprivate class _StorageClass {
    var _paymentID: Mlservice_PredictedField? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _paymentID = source._paymentID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._paymentID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._paymentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mlservice_MlResponse.OcrLineFi, rhs: Mlservice_MlResponse.OcrLineFi) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._paymentID != rhs_storage._paymentID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
