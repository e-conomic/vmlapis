//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ssn/mlservice/v1alpha1/mlservice.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

public protocol Mlservice_MlServiceGetPredictionCall: ClientCallUnary {}

fileprivate final class Mlservice_MlServiceGetPredictionCallBase: ClientCallUnaryBase<Mlservice_MlRequest, Mlservice_MlResponse>, Mlservice_MlServiceGetPredictionCall {
  override class var method: String { return "/mlservice.MlService/GetPrediction" }
}


/// Instantiate Mlservice_MlServiceServiceClient, then call methods of this protocol to make API calls.
public protocol Mlservice_MlServiceService: ServiceClient {
  /// Synchronous. Unary.
  func getPrediction(_ request: Mlservice_MlRequest) throws -> Mlservice_MlResponse
  /// Asynchronous. Unary.
  func getPrediction(_ request: Mlservice_MlRequest, completion: @escaping (Mlservice_MlResponse?, CallResult) -> Void) throws -> Mlservice_MlServiceGetPredictionCall

}

public final class Mlservice_MlServiceServiceClient: ServiceClientBase, Mlservice_MlServiceService {
  /// Synchronous. Unary.
  public func getPrediction(_ request: Mlservice_MlRequest) throws -> Mlservice_MlResponse {
    return try Mlservice_MlServiceGetPredictionCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  public func getPrediction(_ request: Mlservice_MlRequest, completion: @escaping (Mlservice_MlResponse?, CallResult) -> Void) throws -> Mlservice_MlServiceGetPredictionCall {
    return try Mlservice_MlServiceGetPredictionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

