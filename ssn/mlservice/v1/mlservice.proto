syntax = "proto3";

package ssn.mlservice.v1;

import "ssn/ocrservice/v1/ocrservice.proto";

option go_package = "github.com/e-conomic/vmlapis/ssn/mlservice/v1;mlservice";

// Machine learning Service
service MlService {
    rpc GetPrediction(MlRequest) returns (MlResponse) {}
}

message PredictedField {
    string value = 1;
    float confidence = 2;
}

message MlRequest {
    repeated ssn.ocrservice.v1.OcrScanImageResponse ocr_responses = 1;
}

message MlResponse {
    message OcrLineDk {
        // example: "71"
        PredictedField type = 1;
        // example: "000002879094031"
        PredictedField payment_id = 2;
        //example: "86570807"
        PredictedField creditor_id = 3;
    }

    message OcrLineSe {
        // example: "050765098"
        PredictedField payment_id = 1;
        // example: "2654507"
        PredictedField bankgiro_creditor_id = 2;
        // example: "5000872"
        PredictedField plusgiro_creditor_id = 3;
    }

    message OcrLineNo {
        // example: "12345678903"
        PredictedField payment_id = 1;
    }

    message OcrLineNl {
        // example: "0817937867870002"
        PredictedField payment_id = 1;
    }

    message OcrLineFi {
        // example: "00000159220010146012"
        PredictedField payment_id = 1;
    }

    // orderDate
    // ISO 8601 date string, ie. a string of the format "YYYY-MM-DD"
    // Example: "2019-12-31"
    PredictedField order_date = 1;

    // paymentDueDate
    // ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
    // Example: "2019-12-31"
    PredictedField payment_due_date = 2;

    // currency
    // ISO 4217 string, ie. a 3-letter capitalized string
    // Example: "NOK"
    PredictedField currency = 3;

    // totalVat
    // A string that parses as a two-decimal number
    // Example: "10.0" or "11.11"
    PredictedField total_vat = 4;

    // totalInclVat
    // A string that parses as a two-decimal number
    // Example: "10.0" or "11.11"
    PredictedField total_incl_vat = 5;

    // totalExclVat
    // A string that parses as a two-decimal number
    // Example: "10.0" or "11.11"
    PredictedField total_excl_vat = 6;

    // supplierCorporateId
    // The company VAT number
    // Example: "123456789B01" (for Dutch companies)
    // or "12345678" (for Norwegian companies)
    // Note: The field is repeated because multiple VAT numbers might exist.
    // If you have the VAT number of you customer, you can use this information
    // to find out which VAT number belongs to the supplier of the invoice.
    repeated PredictedField supplier_corporate_id = 7;

    // supplierCountryCode
    // ISO 3166-1 alpha-2 string, ei. a two-letter capitalized string
    // Example: "NO"
    PredictedField supplier_country_code = 8;

    // documentType
    // Either "Receipt" or "Invoice"
    PredictedField document_type = 9;

    // paymentMethod
    // Either "Cash" or "CreditCard"
    PredictedField payment_method = 10;

    // creditCardLastFourDigits
    // Four digits
    // Example: "0012"
    PredictedField credit_card_last_four_digits = 11;

    // invoiceNumber
    // The supplier defined identifier af the invoice
    // Example: "12345-A99"
    PredictedField invoice_number = 17;

    // Only one ocrLine will be present in a suggestion.
    oneof ocrLine {
        OcrLineDk ocr_line_dk = 12;
        OcrLineSe ocr_line_se = 13;
        OcrLineNo ocr_line_no = 14;
        OcrLineFi ocr_line_fi = 15;
        OcrLineNl ocr_line_nl = 16;
    }
}
