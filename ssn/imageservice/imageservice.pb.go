// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ssn/imageservice/imageservice.proto

package imageservice

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RasterizePdfRequest_Format int32

const (
	RasterizePdfRequest_PNG RasterizePdfRequest_Format = 0
)

var RasterizePdfRequest_Format_name = map[int32]string{
	0: "PNG",
}

var RasterizePdfRequest_Format_value = map[string]int32{
	"PNG": 0,
}

func (x RasterizePdfRequest_Format) String() string {
	return proto.EnumName(RasterizePdfRequest_Format_name, int32(x))
}

func (RasterizePdfRequest_Format) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f52ba60e79477746, []int{0, 0}
}

type RasterizePdfRequest struct {
	Data                 []byte                     `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Dpi                  uint32                     `protobuf:"varint,2,opt,name=dpi,proto3" json:"dpi,omitempty"`
	Format               RasterizePdfRequest_Format `protobuf:"varint,3,opt,name=format,proto3,enum=imageservice.RasterizePdfRequest_Format" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *RasterizePdfRequest) Reset()         { *m = RasterizePdfRequest{} }
func (m *RasterizePdfRequest) String() string { return proto.CompactTextString(m) }
func (*RasterizePdfRequest) ProtoMessage()    {}
func (*RasterizePdfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52ba60e79477746, []int{0}
}

func (m *RasterizePdfRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RasterizePdfRequest.Unmarshal(m, b)
}
func (m *RasterizePdfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RasterizePdfRequest.Marshal(b, m, deterministic)
}
func (m *RasterizePdfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RasterizePdfRequest.Merge(m, src)
}
func (m *RasterizePdfRequest) XXX_Size() int {
	return xxx_messageInfo_RasterizePdfRequest.Size(m)
}
func (m *RasterizePdfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RasterizePdfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RasterizePdfRequest proto.InternalMessageInfo

func (m *RasterizePdfRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RasterizePdfRequest) GetDpi() uint32 {
	if m != nil {
		return m.Dpi
	}
	return 0
}

func (m *RasterizePdfRequest) GetFormat() RasterizePdfRequest_Format {
	if m != nil {
		return m.Format
	}
	return RasterizePdfRequest_PNG
}

type RasterizePdfResponse struct {
	Index                uint32   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RasterizePdfResponse) Reset()         { *m = RasterizePdfResponse{} }
func (m *RasterizePdfResponse) String() string { return proto.CompactTextString(m) }
func (*RasterizePdfResponse) ProtoMessage()    {}
func (*RasterizePdfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52ba60e79477746, []int{1}
}

func (m *RasterizePdfResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RasterizePdfResponse.Unmarshal(m, b)
}
func (m *RasterizePdfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RasterizePdfResponse.Marshal(b, m, deterministic)
}
func (m *RasterizePdfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RasterizePdfResponse.Merge(m, src)
}
func (m *RasterizePdfResponse) XXX_Size() int {
	return xxx_messageInfo_RasterizePdfResponse.Size(m)
}
func (m *RasterizePdfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RasterizePdfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RasterizePdfResponse proto.InternalMessageInfo

func (m *RasterizePdfResponse) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *RasterizePdfResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type OcrScanImageRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OcrScanImageRequest) Reset()         { *m = OcrScanImageRequest{} }
func (m *OcrScanImageRequest) String() string { return proto.CompactTextString(m) }
func (*OcrScanImageRequest) ProtoMessage()    {}
func (*OcrScanImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52ba60e79477746, []int{2}
}

func (m *OcrScanImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OcrScanImageRequest.Unmarshal(m, b)
}
func (m *OcrScanImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OcrScanImageRequest.Marshal(b, m, deterministic)
}
func (m *OcrScanImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OcrScanImageRequest.Merge(m, src)
}
func (m *OcrScanImageRequest) XXX_Size() int {
	return xxx_messageInfo_OcrScanImageRequest.Size(m)
}
func (m *OcrScanImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OcrScanImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OcrScanImageRequest proto.InternalMessageInfo

func (m *OcrScanImageRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type OcrScanImageResponse struct {
	TessHocr             string   `protobuf:"bytes,1,opt,name=tessHocr,proto3" json:"tessHocr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OcrScanImageResponse) Reset()         { *m = OcrScanImageResponse{} }
func (m *OcrScanImageResponse) String() string { return proto.CompactTextString(m) }
func (*OcrScanImageResponse) ProtoMessage()    {}
func (*OcrScanImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52ba60e79477746, []int{3}
}

func (m *OcrScanImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OcrScanImageResponse.Unmarshal(m, b)
}
func (m *OcrScanImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OcrScanImageResponse.Marshal(b, m, deterministic)
}
func (m *OcrScanImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OcrScanImageResponse.Merge(m, src)
}
func (m *OcrScanImageResponse) XXX_Size() int {
	return xxx_messageInfo_OcrScanImageResponse.Size(m)
}
func (m *OcrScanImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OcrScanImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OcrScanImageResponse proto.InternalMessageInfo

func (m *OcrScanImageResponse) GetTessHocr() string {
	if m != nil {
		return m.TessHocr
	}
	return ""
}

func init() {
	proto.RegisterEnum("imageservice.RasterizePdfRequest_Format", RasterizePdfRequest_Format_name, RasterizePdfRequest_Format_value)
	proto.RegisterType((*RasterizePdfRequest)(nil), "imageservice.RasterizePdfRequest")
	proto.RegisterType((*RasterizePdfResponse)(nil), "imageservice.RasterizePdfResponse")
	proto.RegisterType((*OcrScanImageRequest)(nil), "imageservice.OcrScanImageRequest")
	proto.RegisterType((*OcrScanImageResponse)(nil), "imageservice.OcrScanImageResponse")
}

func init() {
	proto.RegisterFile("ssn/imageservice/imageservice.proto", fileDescriptor_f52ba60e79477746)
}

var fileDescriptor_f52ba60e79477746 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0x65, 0x41, 0x51, 0x27, 0xc5, 0xe0, 0xc2, 0x81, 0x70, 0xc2, 0xf5, 0x52, 0x63, 0x68, 0x4d,
	0xfd, 0x03, 0xc4, 0x83, 0x1f, 0x17, 0x25, 0xcb, 0xc1, 0xe8, 0x6d, 0xd9, 0x2e, 0x75, 0x0f, 0xed,
	0xd6, 0xdd, 0xc5, 0x18, 0x7f, 0x85, 0x3f, 0xd9, 0xb0, 0x45, 0x6c, 0x9b, 0x86, 0xdb, 0xcc, 0xcb,
	0x9b, 0x79, 0x6f, 0x5e, 0x06, 0x2e, 0x8c, 0xc9, 0x42, 0x99, 0xb2, 0x44, 0x18, 0xa1, 0x3f, 0x25,
	0x17, 0x95, 0x26, 0xc8, 0xb5, 0xb2, 0x0a, 0x7b, 0x65, 0x8c, 0xfc, 0x20, 0x18, 0x50, 0x66, 0xac,
	0xd0, 0xf2, 0x5b, 0xcc, 0xe3, 0x15, 0x15, 0x1f, 0x6b, 0x61, 0x2c, 0xc6, 0x70, 0x10, 0x33, 0xcb,
	0x46, 0x68, 0x82, 0x7c, 0x8f, 0xba, 0x1a, 0xf7, 0xa1, 0x13, 0xe7, 0x72, 0xd4, 0x9e, 0x20, 0xbf,
	0x47, 0x37, 0x25, 0x9e, 0x41, 0x77, 0xa5, 0x74, 0xca, 0xec, 0xa8, 0x33, 0x41, 0xfe, 0x69, 0xe4,
	0x07, 0x15, 0xc1, 0x86, 0xc5, 0xc1, 0x9d, 0xe3, 0xd3, 0xed, 0x1c, 0x39, 0x83, 0x6e, 0x81, 0xe0,
	0x23, 0xe8, 0xcc, 0x9f, 0xee, 0xfb, 0x2d, 0x32, 0x83, 0x61, 0x75, 0xd0, 0xe4, 0x2a, 0x33, 0x02,
	0x0f, 0xe1, 0x50, 0x66, 0xb1, 0xf8, 0x72, 0x9e, 0x7a, 0xb4, 0x68, 0x76, 0x46, 0xdb, 0xff, 0x46,
	0xc9, 0x25, 0x0c, 0x9e, 0xb9, 0x5e, 0x70, 0x96, 0x3d, 0x6e, 0xec, 0xec, 0xb9, 0x89, 0x44, 0x30,
	0xac, 0x52, 0xb7, 0x62, 0x63, 0x38, 0xb6, 0xc2, 0x98, 0x07, 0xc5, 0xb5, 0xe3, 0x9f, 0xd0, 0x5d,
	0x1f, 0x25, 0xe0, 0x39, 0xf2, 0xa2, 0x38, 0x13, 0xbf, 0x80, 0x57, 0xde, 0x81, 0xcf, 0xab, 0x29,
	0x34, 0x58, 0x19, 0x93, 0x7d, 0x94, 0xc2, 0x02, 0x69, 0x45, 0x09, 0xc0, 0x3c, 0x5e, 0xfd, 0xc9,
	0xbc, 0x82, 0x57, 0xce, 0xa5, 0x2e, 0xd3, 0x10, 0x76, 0x5d, 0xa6, 0x29, 0x56, 0xd2, 0xba, 0x46,
	0xb7, 0xd3, 0xb7, 0xab, 0x44, 0xda, 0xf7, 0xf5, 0x32, 0xe0, 0x2a, 0x0d, 0xc5, 0x94, 0xab, 0x4c,
	0xa5, 0x92, 0x87, 0xee, 0x63, 0xc2, 0xfa, 0x57, 0x2d, 0xbb, 0x0e, 0xbf, 0xf9, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0x2f, 0xe7, 0x8e, 0x8d, 0x70, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ImageServiceClient is the client API for ImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImageServiceClient interface {
	OcrScanImage(ctx context.Context, in *OcrScanImageRequest, opts ...grpc.CallOption) (*OcrScanImageResponse, error)
}

type imageServiceClient struct {
	cc *grpc.ClientConn
}

func NewImageServiceClient(cc *grpc.ClientConn) ImageServiceClient {
	return &imageServiceClient{cc}
}

func (c *imageServiceClient) OcrScanImage(ctx context.Context, in *OcrScanImageRequest, opts ...grpc.CallOption) (*OcrScanImageResponse, error) {
	out := new(OcrScanImageResponse)
	err := c.cc.Invoke(ctx, "/imageservice.ImageService/OcrScanImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServiceServer is the server API for ImageService service.
type ImageServiceServer interface {
	OcrScanImage(context.Context, *OcrScanImageRequest) (*OcrScanImageResponse, error)
}

func RegisterImageServiceServer(s *grpc.Server, srv ImageServiceServer) {
	s.RegisterService(&_ImageService_serviceDesc, srv)
}

func _ImageService_OcrScanImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OcrScanImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).OcrScanImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imageservice.ImageService/OcrScanImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).OcrScanImage(ctx, req.(*OcrScanImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imageservice.ImageService",
	HandlerType: (*ImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OcrScanImage",
			Handler:    _ImageService_OcrScanImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ssn/imageservice/imageservice.proto",
}

// PdfServiceClient is the client API for PdfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PdfServiceClient interface {
	RasterizePdf(ctx context.Context, in *RasterizePdfRequest, opts ...grpc.CallOption) (PdfService_RasterizePdfClient, error)
}

type pdfServiceClient struct {
	cc *grpc.ClientConn
}

func NewPdfServiceClient(cc *grpc.ClientConn) PdfServiceClient {
	return &pdfServiceClient{cc}
}

func (c *pdfServiceClient) RasterizePdf(ctx context.Context, in *RasterizePdfRequest, opts ...grpc.CallOption) (PdfService_RasterizePdfClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PdfService_serviceDesc.Streams[0], "/imageservice.PdfService/RasterizePdf", opts...)
	if err != nil {
		return nil, err
	}
	x := &pdfServiceRasterizePdfClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PdfService_RasterizePdfClient interface {
	Recv() (*RasterizePdfResponse, error)
	grpc.ClientStream
}

type pdfServiceRasterizePdfClient struct {
	grpc.ClientStream
}

func (x *pdfServiceRasterizePdfClient) Recv() (*RasterizePdfResponse, error) {
	m := new(RasterizePdfResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PdfServiceServer is the server API for PdfService service.
type PdfServiceServer interface {
	RasterizePdf(*RasterizePdfRequest, PdfService_RasterizePdfServer) error
}

func RegisterPdfServiceServer(s *grpc.Server, srv PdfServiceServer) {
	s.RegisterService(&_PdfService_serviceDesc, srv)
}

func _PdfService_RasterizePdf_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RasterizePdfRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PdfServiceServer).RasterizePdf(m, &pdfServiceRasterizePdfServer{stream})
}

type PdfService_RasterizePdfServer interface {
	Send(*RasterizePdfResponse) error
	grpc.ServerStream
}

type pdfServiceRasterizePdfServer struct {
	grpc.ServerStream
}

func (x *pdfServiceRasterizePdfServer) Send(m *RasterizePdfResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PdfService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imageservice.PdfService",
	HandlerType: (*PdfServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RasterizePdf",
			Handler:       _PdfService_RasterizePdf_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ssn/imageservice/imageservice.proto",
}
